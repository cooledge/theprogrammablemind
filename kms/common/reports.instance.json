{
  "queries": [
    "price and quantity are properties",
    "worth means price times quantity"
  ],
  "resultss": [
    {
      "hierarchy": [
        [
          "*",
          "hierarchyAble"
        ],
        [
          "*",
          "isEdee"
        ],
        [
          "*",
          "isEder"
        ],
        [
          "*",
          "mathematical_operator"
        ],
        [
          "*",
          "object"
        ],
        [
          "*",
          "property"
        ],
        [
          "*",
          "queryable"
        ],
        [
          "*",
          "theAble"
        ],
        [
          "+",
          "hierarchyAble"
        ],
        [
          "+",
          "isEdee"
        ],
        [
          "+",
          "isEder"
        ],
        [
          "+",
          "mathematical_operator"
        ],
        [
          "+",
          "object"
        ],
        [
          "+",
          "property"
        ],
        [
          "+",
          "queryable"
        ],
        [
          "+",
          "theAble"
        ],
        [
          "-",
          "hierarchyAble"
        ],
        [
          "-",
          "isEdee"
        ],
        [
          "-",
          "isEder"
        ],
        [
          "-",
          "mathematical_operator"
        ],
        [
          "-",
          "object"
        ],
        [
          "-",
          "property"
        ],
        [
          "-",
          "queryable"
        ],
        [
          "-",
          "theAble"
        ],
        [
          "/",
          "hierarchyAble"
        ],
        [
          "/",
          "isEdee"
        ],
        [
          "/",
          "isEder"
        ],
        [
          "/",
          "mathematical_operator"
        ],
        [
          "/",
          "object"
        ],
        [
          "/",
          "property"
        ],
        [
          "/",
          "queryable"
        ],
        [
          "/",
          "theAble"
        ],
        [
          "a",
          "articlePOS"
        ],
        [
          "action",
          "action"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "ascending",
          "ordering"
        ],
        [
          "between",
          "preposition"
        ],
        [
          "call",
          "verby"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "changeable",
          "changeable"
        ],
        [
          "changes",
          "event"
        ],
        [
          "changes",
          "verby"
        ],
        [
          "column",
          "toAble"
        ],
        [
          "column",
          "to_after_column_toAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "countable",
          "hierarchyAble"
        ],
        [
          "descending",
          "ordering"
        ],
        [
          "describe",
          "verby"
        ],
        [
          "direction",
          "direction"
        ],
        [
          "divideByExpression",
          "mathematicalExpression"
        ],
        [
          "divideByOperator",
          "mathematicalOperator"
        ],
        [
          "event",
          "event"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "left",
          "direction"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mathematical",
          "hierarchyAble"
        ],
        [
          "mathematical",
          "isEdee"
        ],
        [
          "mathematical",
          "isEder"
        ],
        [
          "mathematical",
          "object"
        ],
        [
          "mathematical",
          "property"
        ],
        [
          "mathematical",
          "queryable"
        ],
        [
          "mathematical",
          "theAble"
        ],
        [
          "mathematicalExpression",
          "concept"
        ],
        [
          "mathematicalExpression",
          "number"
        ],
        [
          "mathematicalExpression",
          "property"
        ],
        [
          "mathematicalOperator",
          "mathematicalOperator"
        ],
        [
          "mathematical_operator",
          "adjective"
        ],
        [
          "mathematical_operator",
          "concept"
        ],
        [
          "mathematical_operator",
          "hierarchyAble"
        ],
        [
          "mathematical_operator",
          "isEdee"
        ],
        [
          "mathematical_operator",
          "isEder"
        ],
        [
          "mathematical_operator",
          "object"
        ],
        [
          "mathematical_operator",
          "property"
        ],
        [
          "mathematical_operator",
          "queryable"
        ],
        [
          "mathematical_operator",
          "theAble"
        ],
        [
          "minusExpression",
          "mathematicalExpression"
        ],
        [
          "minusOperator",
          "mathematicalOperator"
        ],
        [
          "modifies",
          "verby"
        ],
        [
          "move",
          "reportAction"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "noun",
          "theAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "operator",
          "concept"
        ],
        [
          "operator",
          "hierarchyAble"
        ],
        [
          "operator",
          "isEdee"
        ],
        [
          "operator",
          "isEder"
        ],
        [
          "operator",
          "object"
        ],
        [
          "operator",
          "property"
        ],
        [
          "operator",
          "queryable"
        ],
        [
          "operator",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "ordering",
          "ordering"
        ],
        [
          "plusExpression",
          "mathematicalExpression"
        ],
        [
          "plusOperator",
          "mathematicalOperator"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "price",
          "number"
        ],
        [
          "price",
          "property"
        ],
        [
          "product",
          "the_after_product_property_theAble"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "the_after_product_property_theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "quantity",
          "number"
        ],
        [
          "quantity",
          "property"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "remove",
          "reportAction"
        ],
        [
          "report",
          "changeable"
        ],
        [
          "report",
          "it"
        ],
        [
          "report",
          "theAble"
        ],
        [
          "report",
          "this"
        ],
        [
          "reportAction",
          "reportAction"
        ],
        [
          "right",
          "direction"
        ],
        [
          "show",
          "action"
        ],
        [
          "show",
          "verby"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "the_after_product_property_theAble"
        ],
        [
          "the_after_product_property_theAble",
          "the_after_product_property_theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "timesExpression",
          "mathematicalExpression"
        ],
        [
          "timesOperator",
          "mathematicalOperator"
        ],
        [
          "toAble",
          "to_after_column_toAble"
        ],
        [
          "to_after_column_toAble",
          "to_after_column_toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "price",
              0
            ],
            "ops": [
              [
                "price",
                0
              ],
              [
                "quantity",
                0
              ],
              [
                "is",
                0
              ],
              [
                "property",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "quantity",
                0
              ],
              [
                "is",
                0
              ],
              [
                "property",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "property",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "property",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 5
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. price/0  - \"price\"\n                                   {\n                                     default: true\n                                     marker: Operator(price/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"price\"\n                                     value: \"price\"\n                                     word: \"price\"\n                                   }\n    1. list/0  - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 8}\n                                     text: \"and\"\n                                     word: \"and\"\n                                   }\n    2. quantity/0  - \"quantity\"\n                                   {\n                                     default: true\n                                     marker: Operator(quantity/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 17}\n                                     text: \"quantity\"\n                                     value: \"quantity\"\n                                     word: \"quantity\"\n                                   }\n    3. is/0  - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 19, 'end': 21}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    4. property/0  - \"properties\"\n                                   {\n                                     default: true\n                                     marker: Operator(property/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 23, 'end': 32}\n                                     text: \"properties\"\n                                     word: \"properties\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({default: True, marker: Operator(price/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: price, value: price, word: price})\n\n>>>>>>>>>>>>> Counter 2\n   *0. price/1 (dead) - \"price\"\n                                   {\n                                     dead: true\n                                     default: true\n                                     marker: Operator(price/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"price\"\n                                     value: \"price\"\n                                     word: \"price\"\n                                   }\n    1. list/0  - \"and\"\n                                   {\n                                     default: true\n                                     marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['number', 'theAble', 'quantifier', 'notAble', 'quantity', 'hierarchyAble', 'queryable', 'object', 'property', 'unknown'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                     range: {'start': 6, 'end': 8}\n                                     text: \"and\"\n                                     types: [\n                                     ]\n                                     word: \"and\"\n                                   }\n    2. quantity/0  - \"quantity\"\n                                   {\n                                     default: true\n                                     marker: Operator(quantity/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 17}\n                                     text: \"quantity\"\n                                     value: \"quantity\"\n                                     word: \"quantity\"\n                                   }\n    3. is/0  - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 19, 'end': 21}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    4. property/0  - \"properties\"\n                                   {\n                                     default: true\n                                     marker: Operator(property/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 23, 'end': 32}\n                                     text: \"properties\"\n                                     word: \"properties\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({default: True, marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['number', 'theAble', 'quantifier', 'notAble', 'quantity', 'hierarchyAble', 'queryable', 'object', 'property', 'unknown'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 6, 'end': 8}, text: and, types: [], word: and})\n\n>>>>>>>>>>>>> Counter 3\n   *0. list/1  - \"price and quantity\"\n                                   {\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['number', 'theAble', 'quantifier', 'notAble', 'quantity', 'hierarchyAble', 'queryable', 'object', 'property', 'unknown'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                     range: {'start': 0, 'end': 17}\n                                     text: \"price and quantity\"\n                                     types: [\n                                     ]\n                                     value: [\n                                       {\n                                         dead: true\n                                         default: true\n                                         marker: Operator(price/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         range: {'start': 0, 'end': 4}\n                                         text: \"price\"\n                                         value: \"price\"\n                                         word: \"price\"\n                                       }\n\n                                       {\n                                         default: true\n                                         marker: Operator(quantity/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 10, 'end': 17}\n                                         text: \"quantity\"\n                                         value: \"quantity\"\n                                         word: \"quantity\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    1. is/0  - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 19, 'end': 21}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n    2. property/0  - \"properties\"\n                                   {\n                                     default: true\n                                     marker: Operator(property/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 23, 'end': 32}\n                                     text: \"properties\"\n                                     word: \"properties\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, marker: Operator(property/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: properties, word: properties})\n\n>>>>>>>>>>>>> Counter 4\n    0. list/1  - \"price and quantity\"\n                                   {\n                                     default: true\n                                     isList: true\n                                     listable: true\n                                     marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['number', 'theAble', 'quantifier', 'notAble', 'quantity', 'hierarchyAble', 'queryable', 'object', 'property', 'unknown'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                     range: {'start': 0, 'end': 17}\n                                     text: \"price and quantity\"\n                                     types: [\n                                     ]\n                                     value: [\n                                       {\n                                         dead: true\n                                         default: true\n                                         marker: Operator(price/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         range: {'start': 0, 'end': 4}\n                                         text: \"price\"\n                                         value: \"price\"\n                                         word: \"price\"\n                                       }\n\n                                       {\n                                         default: true\n                                         marker: Operator(quantity/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                         range: {'start': 10, 'end': 17}\n                                         text: \"quantity\"\n                                         value: \"quantity\"\n                                         word: \"quantity\"\n                                       }\n                                     ]\n                                     word: \"and\"\n                                   }\n    1. is/0  - \"are\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     range: {'start': 19, 'end': 21}\n                                     text: \"are\"\n                                     word: \"are\"\n                                   }\n   *2. property/1 (dead) - \"properties\"\n                                   {\n                                     dead: true\n                                     default: true\n                                     marker: Operator(property/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 23, 'end': 32}\n                                     text: \"properties\"\n                                     word: \"properties\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 21}, text: are, word: are})\n\n>>>>>>>>>>>>> Counter 5\n   *0. is/1  - \"price and quantity are properties\"\n                                   {\n                                     marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           default: true\n                                           isList: true\n                                           listable: true\n                                           marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['number', 'theAble', 'quantifier', 'notAble', 'quantity', 'hierarchyAble', 'queryable', 'object', 'property', 'unknown'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 32}\n                                           text: \"price and quantity\"\n                                           types: [\n                                           'price'\n                                           ]\n                                           value: [\n                                             {\n                                               dead: true\n                                               default: true\n                                               marker: Operator(price/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               range: {'start': 0, 'end': 4}\n                                               text: \"price\"\n                                               value: \"price\"\n                                               word: \"price\"\n                                             }\n\n                                             {\n                                               default: true\n                                               marker: Operator(quantity/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               range: {'start': 10, 'end': 17}\n                                               text: \"quantity\"\n                                               value: \"quantity\"\n                                               word: \"quantity\"\n                                             }\n                                           ]\n                                           word: \"and\"\n                                         }\n\n                                     range: {'start': 0, 'end': 32}\n                                     text: \"price and quantity are properties\"\n                                     two:                                          {\n                                           dead: true\n                                           default: true\n                                           marker: Operator(property/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           range: {'start': 23, 'end': 32}\n                                           text: \"properties\"\n                                           types: [\n                                           'property'\n                                           ]\n                                           word: \"properties\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['number', 'theAble', 'quantifier', 'notAble', 'quantity', 'hierarchyAble', 'queryable', 'object', 'property', 'unknown'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), number: many, range: {'start': 0, 'end': 32}, text: price and quantity, types: ['price'], value: [Context({dead: True, default: True, marker: Operator(price/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: price, value: price, word: price}), Context({default: True, marker: Operator(quantity/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 10, 'end': 17}, text: quantity, value: quantity, word: quantity})], word: and}), range: {'start': 0, 'end': 32}, text: price and quantity are properties, two: Context({dead: True, default: True, marker: Operator(property/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: properties, types: ['property'], word: properties}), word: are})\n\n>>>>>>>>>>>>> Counter 6\n   *0. is/2 (dead) - \"price and quantity are properties\"\n                                   {\n                                     dead: true\n                                     marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"many\"\n                                     one:                                          {\n                                           default: true\n                                           isList: true\n                                           listable: true\n                                           marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['number', 'theAble', 'quantifier', 'notAble', 'quantity', 'hierarchyAble', 'queryable', 'object', 'property', 'unknown'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                           number: \"many\"\n                                           range: {'start': 0, 'end': 32}\n                                           text: \"price and quantity\"\n                                           types: [\n                                           'price'\n                                           ]\n                                           value: [\n                                             {\n                                               dead: true\n                                               default: true\n                                               marker: Operator(price/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                               range: {'start': 0, 'end': 4}\n                                               text: \"price\"\n                                               value: \"price\"\n                                               word: \"price\"\n                                             }\n\n                                             {\n                                               default: true\n                                               marker: Operator(quantity/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                               range: {'start': 10, 'end': 17}\n                                               text: \"quantity\"\n                                               value: \"quantity\"\n                                               word: \"quantity\"\n                                             }\n                                           ]\n                                           word: \"and\"\n                                         }\n\n                                     range: {'start': 0, 'end': 32}\n                                     text: \"price and quantity are properties\"\n                                     two:                                          {\n                                           dead: true\n                                           default: true\n                                           marker: Operator(property/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           range: {'start': 23, 'end': 32}\n                                           text: \"properties\"\n                                           types: [\n                                           'property'\n                                           ]\n                                           word: \"properties\"\n                                         }\n\n                                     word: \"are\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "many",
          "text": "price and quantity are properties",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 32
          },
          "one": {
            "number": "many",
            "marker": "list",
            "default": true,
            "word": "and",
            "text": "price and quantity",
            "range": {
              "start": 0,
              "end": 32
            },
            "types": [
              "list",
              "price"
            ],
            "listable": true,
            "isList": true,
            "value": [
              {
                "marker": "price",
                "value": "price",
                "default": true,
                "text": "price",
                "word": "price",
                "range": {
                  "start": 0,
                  "end": 4
                },
                "dead": true,
                "level": 1
              },
              {
                "marker": "quantity",
                "value": "quantity",
                "default": true,
                "text": "quantity",
                "word": "quantity",
                "range": {
                  "start": 10,
                  "end": 17
                },
                "level": 0
              }
            ],
            "level": 1
          },
          "two": {
            "marker": "property",
            "default": true,
            "word": "properties",
            "text": "properties",
            "range": {
              "start": 23,
              "end": 32
            },
            "dead": true,
            "types": [
              "property"
            ],
            "level": 1,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "reports#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "price and quantity are properties"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "price",
            0
          ],
          [
            "property",
            0
          ],
          [
            "quantity",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "property",
            0
          ],
          [
            "quantity",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "property",
            0
          ]
        ],
        [
          [
            "price",
            0
          ],
          [
            "quantity",
            0
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "price and quantity are properties",
      "key": {
        "query": "price and quantity are properties"
      }
    },
    {
      "hierarchy": [
        [
          "*",
          "hierarchyAble"
        ],
        [
          "*",
          "isEdee"
        ],
        [
          "*",
          "isEder"
        ],
        [
          "*",
          "mathematical_operator"
        ],
        [
          "*",
          "object"
        ],
        [
          "*",
          "property"
        ],
        [
          "*",
          "queryable"
        ],
        [
          "*",
          "theAble"
        ],
        [
          "+",
          "hierarchyAble"
        ],
        [
          "+",
          "isEdee"
        ],
        [
          "+",
          "isEder"
        ],
        [
          "+",
          "mathematical_operator"
        ],
        [
          "+",
          "object"
        ],
        [
          "+",
          "property"
        ],
        [
          "+",
          "queryable"
        ],
        [
          "+",
          "theAble"
        ],
        [
          "-",
          "hierarchyAble"
        ],
        [
          "-",
          "isEdee"
        ],
        [
          "-",
          "isEder"
        ],
        [
          "-",
          "mathematical_operator"
        ],
        [
          "-",
          "object"
        ],
        [
          "-",
          "property"
        ],
        [
          "-",
          "queryable"
        ],
        [
          "-",
          "theAble"
        ],
        [
          "/",
          "hierarchyAble"
        ],
        [
          "/",
          "isEdee"
        ],
        [
          "/",
          "isEder"
        ],
        [
          "/",
          "mathematical_operator"
        ],
        [
          "/",
          "object"
        ],
        [
          "/",
          "property"
        ],
        [
          "/",
          "queryable"
        ],
        [
          "/",
          "theAble"
        ],
        [
          "a",
          "articlePOS"
        ],
        [
          "action",
          "action"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "ascending",
          "ordering"
        ],
        [
          "between",
          "preposition"
        ],
        [
          "call",
          "verby"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "changeable",
          "changeable"
        ],
        [
          "changes",
          "event"
        ],
        [
          "changes",
          "verby"
        ],
        [
          "column",
          "toAble"
        ],
        [
          "column",
          "to_after_column_toAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "countable",
          "hierarchyAble"
        ],
        [
          "descending",
          "ordering"
        ],
        [
          "describe",
          "verby"
        ],
        [
          "direction",
          "direction"
        ],
        [
          "divideByExpression",
          "mathematicalExpression"
        ],
        [
          "divideByOperator",
          "mathematicalOperator"
        ],
        [
          "event",
          "event"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "left",
          "direction"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mathematical",
          "hierarchyAble"
        ],
        [
          "mathematical",
          "isEdee"
        ],
        [
          "mathematical",
          "isEder"
        ],
        [
          "mathematical",
          "object"
        ],
        [
          "mathematical",
          "property"
        ],
        [
          "mathematical",
          "queryable"
        ],
        [
          "mathematical",
          "theAble"
        ],
        [
          "mathematicalExpression",
          "concept"
        ],
        [
          "mathematicalExpression",
          "number"
        ],
        [
          "mathematicalExpression",
          "property"
        ],
        [
          "mathematicalOperator",
          "mathematicalOperator"
        ],
        [
          "mathematical_operator",
          "adjective"
        ],
        [
          "mathematical_operator",
          "concept"
        ],
        [
          "mathematical_operator",
          "hierarchyAble"
        ],
        [
          "mathematical_operator",
          "isEdee"
        ],
        [
          "mathematical_operator",
          "isEder"
        ],
        [
          "mathematical_operator",
          "object"
        ],
        [
          "mathematical_operator",
          "property"
        ],
        [
          "mathematical_operator",
          "queryable"
        ],
        [
          "mathematical_operator",
          "theAble"
        ],
        [
          "minusExpression",
          "mathematicalExpression"
        ],
        [
          "minusOperator",
          "mathematicalOperator"
        ],
        [
          "modifies",
          "verby"
        ],
        [
          "move",
          "reportAction"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "noun",
          "theAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "operator",
          "concept"
        ],
        [
          "operator",
          "hierarchyAble"
        ],
        [
          "operator",
          "isEdee"
        ],
        [
          "operator",
          "isEder"
        ],
        [
          "operator",
          "object"
        ],
        [
          "operator",
          "property"
        ],
        [
          "operator",
          "queryable"
        ],
        [
          "operator",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "ordering",
          "ordering"
        ],
        [
          "plusExpression",
          "mathematicalExpression"
        ],
        [
          "plusOperator",
          "mathematicalOperator"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "price",
          "number"
        ],
        [
          "price",
          "property"
        ],
        [
          "product",
          "the_after_product_property_theAble"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "the_after_product_property_theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "quantity",
          "number"
        ],
        [
          "quantity",
          "property"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "remove",
          "reportAction"
        ],
        [
          "report",
          "changeable"
        ],
        [
          "report",
          "it"
        ],
        [
          "report",
          "theAble"
        ],
        [
          "report",
          "this"
        ],
        [
          "reportAction",
          "reportAction"
        ],
        [
          "right",
          "direction"
        ],
        [
          "show",
          "action"
        ],
        [
          "show",
          "verby"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "the_after_product_property_theAble"
        ],
        [
          "the_after_product_property_theAble",
          "the_after_product_property_theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "timesExpression",
          "mathematicalExpression"
        ],
        [
          "timesOperator",
          "mathematicalOperator"
        ],
        [
          "toAble",
          "to_after_column_toAble"
        ],
        [
          "to_after_column_toAble",
          "to_after_column_toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "unknown",
                0
              ],
              [
                "means",
                0
              ],
              [
                "price",
                0
              ],
              [
                "timesOperator",
                0
              ],
              [
                "quantity",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "price",
              0
            ],
            "ops": [
              [
                "means",
                0
              ],
              [
                "price",
                0
              ],
              [
                "timesOperator",
                0
              ],
              [
                "quantity",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "quantity",
              0
            ],
            "ops": [
              [
                "means",
                0
              ],
              [
                "timesOperator",
                0
              ],
              [
                "quantity",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "timesOperator",
              0
            ],
            "ops": [
              [
                "means",
                0
              ],
              [
                "timesOperator",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "means",
              0
            ],
            "ops": [
              [
                "means",
                0
              ]
            ],
            "counter": 5
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"worth\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"worth\"\n                                     value: \"worth\"\n                                     word: \"worth\"\n                                   }\n    1. means/0  - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 10}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. price/0  - \"price\"\n                                   {\n                                     default: true\n                                     marker: Operator(price/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 16}\n                                     text: \"price\"\n                                     value: \"price\"\n                                     word: \"price\"\n                                   }\n    3. timesOperator/0  - \"times\"\n                                   {\n                                     marker: Operator(timesOperator/0, [\"Selector(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }'), , [Type('number')]<==>[Type('number')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 18, 'end': 22}\n                                     text: \"times\"\n                                     value: \"times\"\n                                     word: \"times\"\n                                   }\n    4. quantity/0  - \"quantity\"\n                                   {\n                                     default: true\n                                     marker: Operator(quantity/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 24, 'end': 31}\n                                     text: \"quantity\"\n                                     value: \"quantity\"\n                                     word: \"quantity\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: worth, value: worth, word: worth})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) - \"worth\"\n                                   {\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"worth\"\n                                     unknown: true\n                                     value: \"worth\"\n                                     word: \"worth\"\n                                   }\n    1. means/0  - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 10}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. price/0  - \"price\"\n                                   {\n                                     default: true\n                                     marker: Operator(price/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 16}\n                                     text: \"price\"\n                                     value: \"price\"\n                                     word: \"price\"\n                                   }\n    3. timesOperator/0  - \"times\"\n                                   {\n                                     marker: Operator(timesOperator/0, [\"Selector(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }'), , [Type('number')]<==>[Type('number')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 18, 'end': 22}\n                                     text: \"times\"\n                                     value: \"times\"\n                                     word: \"times\"\n                                   }\n    4. quantity/0  - \"quantity\"\n                                   {\n                                     default: true\n                                     marker: Operator(quantity/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 24, 'end': 31}\n                                     text: \"quantity\"\n                                     value: \"quantity\"\n                                     word: \"quantity\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, marker: Operator(price/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 16}, text: price, value: price, word: price})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) - \"worth\"\n                                   {\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"worth\"\n                                     unknown: true\n                                     value: \"worth\"\n                                     word: \"worth\"\n                                   }\n    1. means/0  - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 10}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n   *2. price/1 (dead) - \"price\"\n                                   {\n                                     dead: true\n                                     default: true\n                                     marker: Operator(price/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 16}\n                                     text: \"price\"\n                                     value: \"price\"\n                                     word: \"price\"\n                                   }\n    3. timesOperator/0  - \"times\"\n                                   {\n                                     marker: Operator(timesOperator/0, [\"Selector(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }'), , [Type('number')]<==>[Type('number')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 18, 'end': 22}\n                                     text: \"times\"\n                                     value: \"times\"\n                                     word: \"times\"\n                                   }\n    4. quantity/0  - \"quantity\"\n                                   {\n                                     default: true\n                                     marker: Operator(quantity/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 24, 'end': 31}\n                                     text: \"quantity\"\n                                     value: \"quantity\"\n                                     word: \"quantity\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({default: True, marker: Operator(quantity/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 31}, text: quantity, value: quantity, word: quantity})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1 (dead) - \"worth\"\n                                   {\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"worth\"\n                                     unknown: true\n                                     value: \"worth\"\n                                     word: \"worth\"\n                                   }\n    1. means/0  - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 10}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n    2. price/1 (dead) - \"price\"\n                                   {\n                                     dead: true\n                                     default: true\n                                     marker: Operator(price/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 16}\n                                     text: \"price\"\n                                     value: \"price\"\n                                     word: \"price\"\n                                   }\n    3. timesOperator/0  - \"times\"\n                                   {\n                                     marker: Operator(timesOperator/0, [\"Selector(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }'), , [Type('number')]<==>[Type('number')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 18, 'end': 22}\n                                     text: \"times\"\n                                     value: \"times\"\n                                     word: \"times\"\n                                   }\n   *4. quantity/1 (dead) - \"quantity\"\n                                   {\n                                     dead: true\n                                     default: true\n                                     marker: Operator(quantity/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 24, 'end': 31}\n                                     text: \"quantity\"\n                                     value: \"quantity\"\n                                     word: \"quantity\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({marker: Operator(timesOperator/0, [\"Selector(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }'), , [Type('number')]<==>[Type('number')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge)), range: {'start': 18, 'end': 22}, text: times, value: times, word: times})\n\n>>>>>>>>>>>>> Counter 5\n    0. unknown/1 (dead) - \"worth\"\n                                   {\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: \"worth\"\n                                     unknown: true\n                                     value: \"worth\"\n                                     word: \"worth\"\n                                   }\n    1. means/0  - \"means\"\n                                   {\n                                     default: true\n                                     marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 10}\n                                     text: \"means\"\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n   *2. timesExpression/1 (dead) - \"price times quantity\"\n                                   {\n                                     dead: true\n                                     evaluate: true\n                                     isResponse: true\n                                     marker: Operator(timesExpression/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 12, 'end': 31}\n                                     text: \"price times quantity\"\n                                     types: [\n                                     'number'\n,                                      'property'\n                                     ]\n                                     value: None\n                                     word: \"times\"\n                                     x:                                          {\n                                           dead: true\n                                           default: true\n                                           marker: Operator(price/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           range: {'start': 12, 'end': 16}\n                                           text: \"price\"\n                                           types: [\n                                           'price'\n                                           ]\n                                           value: \"price\"\n                                           word: \"price\"\n                                         }\n\n                                     y:                                          {\n                                           dead: true\n                                           default: true\n                                           marker: Operator(quantity/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           range: {'start': 24, 'end': 31}\n                                           text: \"quantity\"\n                                           types: [\n                                           'quantity'\n                                           ]\n                                           value: \"quantity\"\n                                           word: \"quantity\"\n                                         }\n\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({default: True, marker: Operator(means/0, [\"Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), , [Any]<==>[Any], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 10}, text: means, value: means, word: means})\n\n>>>>>>>>>>>>> Counter 6\n   *0. means/1 (dead) - \"worth means price times quantity\"\n                                   {\n                                     dead: true\n                                     default: true\n                                     from:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           range: {'start': 0, 'end': 4}\n                                           text: \"worth\"\n                                           unknown: true\n                                           value: \"worth\"\n                                           word: \"worth\"\n                                         }\n\n                                     marker: Operator(means/1, ['Selector(None, , [Any]<==>[Any], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 31}\n                                     text: \"worth means price times quantity\"\n                                     to:                                          {\n                                           dead: true\n                                           evaluate: true\n                                           isResponse: true\n                                           marker: Operator(timesExpression/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           number: \"one\"\n                                           range: {'start': 12, 'end': 31}\n                                           text: \"price times quantity\"\n                                           types: [\n                                           'number'\n,                                            'property'\n                                           ]\n                                           value: None\n                                           word: \"times\"\n                                           x:                                                {\n                                                 dead: true\n                                                 default: true\n                                                 marker: Operator(price/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                                 range: {'start': 12, 'end': 16}\n                                                 text: \"price\"\n                                                 types: [\n                                                 'price'\n                                                 ]\n                                                 value: \"price\"\n                                                 word: \"price\"\n                                               }\n\n                                           y:                                                {\n                                                 dead: true\n                                                 default: true\n                                                 marker: Operator(quantity/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                                 range: {'start': 24, 'end': 31}\n                                                 text: \"quantity\"\n                                                 types: [\n                                                 'quantity'\n                                                 ]\n                                                 value: \"quantity\"\n                                                 word: \"quantity\"\n                                               }\n\n                                         }\n\n                                     value: \"means\"\n                                     word: \"means\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "marker": "means",
          "value": "means",
          "default": true,
          "text": "worth means price times quantity",
          "word": "means",
          "range": {
            "start": 0,
            "end": 31
          },
          "dead": true,
          "from": {
            "marker": "unknown",
            "range": {
              "start": 0,
              "end": 4
            },
            "word": "worth",
            "text": "worth",
            "value": "worth",
            "unknown": true,
            "dead": true,
            "level": 1
          },
          "to": {
            "value": null,
            "text": "price times quantity",
            "marker": "timesExpression",
            "word": "times",
            "range": {
              "start": 12,
              "end": 31
            },
            "dead": true,
            "types": [
              "number",
              "property",
              "timesExpression"
            ],
            "x": {
              "marker": "price",
              "value": "price",
              "default": true,
              "text": "price",
              "word": "price",
              "range": {
                "start": 12,
                "end": 16
              },
              "dead": true,
              "types": [
                "price"
              ],
              "level": 1
            },
            "y": {
              "marker": "quantity",
              "value": "quantity",
              "default": true,
              "text": "quantity",
              "word": "quantity",
              "range": {
                "start": 24,
                "end": 31
              },
              "dead": true,
              "types": [
                "quantity"
              ],
              "level": 1
            },
            "number": "one",
            "isResponse": true,
            "evaluate": true,
            "level": 1
          },
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "reports#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "worth means price times quantity"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "means",
            0
          ],
          [
            "price",
            0
          ],
          [
            "quantity",
            0
          ],
          [
            "timesOperator",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "price",
            0
          ],
          [
            "quantity",
            0
          ],
          [
            "timesOperator",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "price",
            0
          ],
          [
            "quantity",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "quantity",
            0
          ],
          [
            "timesOperator",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "timesOperator",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "worth means price times quantity",
      "key": {
        "query": "worth means price times quantity"
      }
    }
  ],
  "fragments": [],
  "semantics": [],
  "associations": [
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "price",
        0
      ],
      [
        "property",
        0
      ],
      [
        "quantity",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "property",
        0
      ],
      [
        "quantity",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "property",
        0
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "price",
        0
      ],
      [
        "quantity",
        0
      ],
      [
        "timesOperator",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "price",
        0
      ],
      [
        "quantity",
        0
      ],
      [
        "timesOperator",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "price",
        0
      ],
      [
        "quantity",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "quantity",
        0
      ],
      [
        "timesOperator",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "timesOperator",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "price",
        0
      ],
      [
        "quantity",
        0
      ]
    ]
  ],
  "learned_contextual_priorities": []
}