{
  "configs": [
    "formulas are concepts",
    {
      "name": "formulas",
      "operators": [
        "([formula])",
        "([solve] (equals/1) ([forVariable|for]) (variable))",
        "(([formula]) [formulaForVariable|] ([forVariable|]) (variable))",
        "([calculate] ([expression]))",
        "(([expression]) [equals] ([expression]))"
      ],
      "priorities": [
        {
          "context": [
            [
              "mathematicalOperator",
              0
            ],
            [
              "number",
              0
            ]
          ],
          "choose": [
            0
          ]
        }
      ],
      "semantics": [
        {
          "where": "/home/dev/code/theprogrammablemind/kms/common/formulas.js:109",
          "match": "({context, api}) => context.evaluate && api.get(context)",
          "apply": "({context, api, e}) => {\n        const { formula } = api.get(context)\n        // console.log('greg24 -----------', JSON.stringify(formula, null, 2))\n        context.evalue = e(formula) \n      }"
        }
      ],
      "bridges": [
        {
          "where": "/home/dev/code/theprogrammablemind/kms/common/formulas.js:120",
          "id": "formulaForVariable",
          "isA": [
            "preposition",
            "queryable"
          ],
          "convolution": true,
          "bridge": "{ number: before[0].number, ...next(operator), what: before[0], equality: after[0], variable: after[1] }",
          "generatorp": "({context, g}) => `${g(context.what)} ${g(context.equality)} ${g(context.variable)}`",
          "evaluator": "({context, api, objects}) => {\n        const formulas = api.gets(context.variable).map((f) => { return { ...f.equality, paraphrase: true } })\n        context.evalue = { marker: 'list', value: formulas }\n      }"
        },
        {
          "where": "/home/dev/code/theprogrammablemind/kms/common/formulas.js:132",
          "id": "solve",
          "bridge": "{ ...next(operator), equality: after[0], variable: after[2] }",
          "generatorp": "({context, gp}) => `${context.word} ${gp(context.equality)} for ${gp(context.variable)}`",
          "semantic": "({context}) => {\n        context.response = solveFor(context.equality, context.variable)\n        context.isResponse = true\n        context.value = null\n        if (!context.response) {\n          // TODO some KM for talking to the user wrt brief+avatar\n          context.verbatim = `Solving failed`\n        }\n      }"
        },
        {
          "id": "forVariable",
          "isA": [
            "preposition"
          ]
        },
        {
          "id": "formula"
        },
        {
          "id": "expression",
          "children": [
            "mathematicalExpression",
            "number"
          ],
          "before": [
            "verby"
          ]
        },
        {
          "where": "/home/dev/code/theprogrammablemind/kms/common/formulas.js:159",
          "id": "calculate",
          "isA": [
            "verby"
          ],
          "bridge": "{ ...next(operator), expression: after[0] }",
          "generatorp": "({context, g}) => `${context.word} ${g(context.expression)}`",
          "localHierarchy": [
            [
              "unknown",
              "expression"
            ]
          ],
          "semantic": "({context, e}) => {\n        context.evalue = e(context.expression)\n        context.isResponse = true\n      }"
        },
        {
          "where": "/home/dev/code/theprogrammablemind/kms/common/formulas.js:171",
          "id": "equals",
          "bridge": "{ ...next(operator), left: before[0], right: after[0] }",
          "words": [
            "="
          ],
          "after": [
            "mathematicalOperator"
          ],
          "localHierarchy": [
            [
              "unknown",
              "expression"
            ]
          ],
          "generatorp": "({context, gp}) => `${gp(context.left)} ${context.word} ${gp(context.right)}`",
          "semantic": "({context, api}) => {\n        // TODO make sure left is a single name\n        // TODO calculate invertable formulas?\n        api.add(context.left, context.right, context)\n      }"
        }
      ]
    }
  ],
  "resultss": [
    {
      "hierarchy": [
        [
          "*",
          "hierarchyAble"
        ],
        [
          "*",
          "isEdee"
        ],
        [
          "*",
          "isEder"
        ],
        [
          "*",
          "mathematical_operator"
        ],
        [
          "*",
          "object"
        ],
        [
          "*",
          "property"
        ],
        [
          "*",
          "queryable"
        ],
        [
          "*",
          "theAble"
        ],
        [
          "+",
          "hierarchyAble"
        ],
        [
          "+",
          "isEdee"
        ],
        [
          "+",
          "isEder"
        ],
        [
          "+",
          "mathematical_operator"
        ],
        [
          "+",
          "object"
        ],
        [
          "+",
          "property"
        ],
        [
          "+",
          "queryable"
        ],
        [
          "+",
          "theAble"
        ],
        [
          "-",
          "hierarchyAble"
        ],
        [
          "-",
          "isEdee"
        ],
        [
          "-",
          "isEder"
        ],
        [
          "-",
          "mathematical_operator"
        ],
        [
          "-",
          "object"
        ],
        [
          "-",
          "property"
        ],
        [
          "-",
          "queryable"
        ],
        [
          "-",
          "theAble"
        ],
        [
          "/",
          "hierarchyAble"
        ],
        [
          "/",
          "isEdee"
        ],
        [
          "/",
          "isEder"
        ],
        [
          "/",
          "mathematical_operator"
        ],
        [
          "/",
          "object"
        ],
        [
          "/",
          "property"
        ],
        [
          "/",
          "queryable"
        ],
        [
          "/",
          "theAble"
        ],
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "between",
          "preposition"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "countable",
          "hierarchyAble"
        ],
        [
          "divideByExpression",
          "mathematicalExpression"
        ],
        [
          "divideByOperator",
          "mathematicalOperator"
        ],
        [
          "hasCountOfPieces",
          "countable"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mathematical",
          "hierarchyAble"
        ],
        [
          "mathematical",
          "isEdee"
        ],
        [
          "mathematical",
          "isEder"
        ],
        [
          "mathematical",
          "object"
        ],
        [
          "mathematical",
          "operator_modifier"
        ],
        [
          "mathematical",
          "property"
        ],
        [
          "mathematical",
          "queryable"
        ],
        [
          "mathematical",
          "theAble"
        ],
        [
          "mathematicalExpression",
          "concept"
        ],
        [
          "mathematicalExpression",
          "number"
        ],
        [
          "mathematicalOperator",
          "mathematicalOperator"
        ],
        [
          "mathematical_operator",
          "adjective"
        ],
        [
          "mathematical_operator",
          "concept"
        ],
        [
          "mathematical_operator",
          "hierarchyAble"
        ],
        [
          "mathematical_operator",
          "isEdee"
        ],
        [
          "mathematical_operator",
          "isEder"
        ],
        [
          "mathematical_operator",
          "object"
        ],
        [
          "mathematical_operator",
          "operator"
        ],
        [
          "mathematical_operator",
          "property"
        ],
        [
          "mathematical_operator",
          "queryable"
        ],
        [
          "mathematical_operator",
          "theAble"
        ],
        [
          "minusExpression",
          "mathematicalExpression"
        ],
        [
          "minusOperator",
          "mathematicalOperator"
        ],
        [
          "modifies",
          "verby"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "noun",
          "theAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "operator",
          "concept"
        ],
        [
          "operator",
          "hierarchyAble"
        ],
        [
          "operator",
          "isEdee"
        ],
        [
          "operator",
          "isEder"
        ],
        [
          "operator",
          "object"
        ],
        [
          "operator",
          "property"
        ],
        [
          "operator",
          "queryable"
        ],
        [
          "operator",
          "theAble"
        ],
        [
          "operator_modifier",
          "operator_modifier"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "plusExpression",
          "mathematicalExpression"
        ],
        [
          "plusOperator",
          "mathematicalOperator"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "timesExpression",
          "mathematicalExpression"
        ],
        [
          "timesOperator",
          "mathematicalOperator"
        ],
        [
          "to",
          "preposition"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "x",
          "number"
        ],
        [
          "xfx",
          "queryable"
        ],
        [
          "y",
          "number"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "unknown",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 4
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "many",
          "text": "formulas are concepts",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 20
          },
          "one": {
            "number": "many",
            "marker": "unknown",
            "range": {
              "start": 0,
              "end": 20
            },
            "word": "formulas",
            "text": "formulas",
            "value": "formulas",
            "unknown": true,
            "dead": true,
            "types": [
              "unknown"
            ],
            "level": 1
          },
          "two": {
            "marker": "unknown",
            "range": {
              "start": 13,
              "end": 20
            },
            "word": "concepts",
            "text": "concepts",
            "value": "concepts",
            "unknown": true,
            "dead": true,
            "types": [
              "unknown"
            ],
            "level": 1,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "formulas#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "formulas are concepts"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "formulas are concepts",
      "key": {
        "query": "formulas are concepts"
      }
    },
    {
      "extraConfig": true,
      "name": "formulas",
      "operators": [
        "([formula])",
        "([solve] (equals/1) ([forVariable|for]) (variable))",
        "(([formula]) [formulaForVariable|] ([forVariable|]) (variable))",
        "([calculate] ([expression]))",
        "(([expression]) [equals] ([expression]))"
      ],
      "priorities": [
        {
          "context": [
            [
              "mathematicalOperator",
              0
            ],
            [
              "number",
              0
            ]
          ],
          "choose": [
            0
          ]
        }
      ],
      "semantics": [
        {
          "where": "/home/dev/code/theprogrammablemind/kms/common/formulas.js:109"
        }
      ],
      "bridges": [
        {
          "where": "/home/dev/code/theprogrammablemind/kms/common/formulas.js:120",
          "id": "formulaForVariable",
          "isA": [
            "preposition",
            "queryable"
          ],
          "convolution": true,
          "bridge": "{ number: before[0].number, ...next(operator), what: before[0], equality: after[0], variable: after[1] }"
        },
        {
          "where": "/home/dev/code/theprogrammablemind/kms/common/formulas.js:132",
          "id": "solve",
          "bridge": "{ ...next(operator), equality: after[0], variable: after[2] }"
        },
        {
          "id": "forVariable",
          "isA": [
            "preposition"
          ]
        },
        {
          "id": "formula"
        },
        {
          "id": "expression",
          "children": [
            "mathematicalExpression",
            "number"
          ],
          "before": [
            "verby"
          ]
        },
        {
          "where": "/home/dev/code/theprogrammablemind/kms/common/formulas.js:159",
          "id": "calculate",
          "isA": [
            "verby"
          ],
          "bridge": "{ ...next(operator), expression: after[0] }",
          "localHierarchy": [
            [
              "unknown",
              "expression"
            ]
          ]
        },
        {
          "where": "/home/dev/code/theprogrammablemind/kms/common/formulas.js:171",
          "id": "equals",
          "bridge": "{ ...next(operator), left: before[0], right: after[0] }",
          "words": [
            "="
          ],
          "after": [
            "mathematicalOperator"
          ],
          "localHierarchy": [
            [
              "unknown",
              "expression"
            ]
          ]
        }
      ]
    }
  ],
  "fragments": [],
  "semantics": [],
  "associations": [
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ]
  ],
  "learned_contextual_priorities": []
}