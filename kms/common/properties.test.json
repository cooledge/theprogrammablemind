[
  {
    "associations": [
      [
        [
          "modifies",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "modifies",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "modifies",
          0
        ],
        [
          "unknown",
          1
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        },
        {
          "allowDups": true,
          "bridge": "{ ...next(operator), value: 'chicken' }",
          "id": "chicken",
          "level": 0,
          "transitoryMode": true
        },
        {
          "allowDups": true,
          "bridge": "{ ...next(operator), value: 'strip' }",
          "id": "strip",
          "level": 0,
          "transitoryMode": true
        },
        {
          "allowDups": true,
          "before": [
            "verby"
          ],
          "bridge": "{ ...after[0], chicken: before[0], atomic: true, dead: true, marker: next(operator(concat(before.value, '_', after.value))), value: concat(before.value, '_', after.value), modifiers: append(['chicken'], after[0].modifiers)}",
          "convolution": true,
          "id": "chicken_strip",
          "isA": [
            "adjective"
          ],
          "level": 0,
          "transitoryMode": true
        }
      ],
      "operators": [
        {
          "allowDups": true,
          "pattern": "([strip|])"
        },
        {
          "allowDups": true,
          "pattern": "([chicken|])"
        },
        {
          "allowDups": true,
          "pattern": "((chicken/0) [chicken_strip] (strip/0))"
        },
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "chicken": [
          {
            "id": "chicken",
            "initial": "{ value: 'chicken' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "strip": [
          {
            "id": "strip",
            "initial": "{ value: 'strip', number: 'one' }"
          }
        ],
        "strips": [
          {
            "id": "strip",
            "initial": "{ value: 'strip', number: 'many' }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "concept": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 22,
            "start": 17
          },
          "text": "strips",
          "unknown": true,
          "value": "strips",
          "word": "strips"
        },
        "dead": true,
        "default": true,
        "level": 1,
        "marker": "modifies",
        "modifier": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 6,
            "start": 0
          },
          "text": "chicken",
          "unknown": true,
          "value": "chicken",
          "word": "chicken"
        },
        "range": {
          "end": 22,
          "start": 0
        },
        "text": "chicken modifies strips",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "value": "modifies",
        "word": "modifies"
      }
    ],
    "generatedParenthesized": [
      ""
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "modifies",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "modifies",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "modifies",
            0
          ],
          "ops": [
            [
              "modifies",
              0
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
            "chicken_strip": [
              {
                "chicken": {
                  "marker": "chicken",
                  "value": "chicken",
                  "word": "chicken"
                },
                "marker": "chicken_strip",
                "modifiers": [
                  "chicken"
                ],
                "paraphrase": true,
                "types": [
                  "chicken_strip"
                ],
                "value": "chicken_strip",
                "word": "strip"
              }
            ]
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "concept": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 22,
                "start": 17
              },
              "text": "strips",
              "unknown": true,
              "value": "strips",
              "word": "strips"
            },
            "dead": true,
            "default": true,
            "level": 1,
            "marker": "modifies",
            "modifier": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 6,
                "start": 0
              },
              "text": "chicken",
              "unknown": true,
              "value": "chicken",
              "word": "chicken"
            },
            "range": {
              "end": 22,
              "start": 0
            },
            "text": "chicken modifies strips",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "value": "modifies",
            "word": "modifies"
          },
          "generatedParenthesized": "",
          "paraphrases": "chicken modifies strips",
          "paraphrasesParenthesized": "(chicken modifies strips)",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "chicken modifies strips"
    ],
    "paraphrasesParenthesized": [
      "(chicken modifies strips)"
    ],
    "query": "chicken modifies strips",
    "responses": [
      ""
    ]
  },
  {
    "associations": [
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        },
        {
          "allowDups": true,
          "bridge": "{ ...next(operator), value: 'chicken' }",
          "id": "chicken",
          "level": 0,
          "transitoryMode": true
        },
        {
          "allowDups": true,
          "bridge": "{ ...next(operator), value: 'strip' }",
          "id": "strip",
          "level": 0,
          "transitoryMode": true
        },
        {
          "allowDups": true,
          "before": [
            "verby"
          ],
          "bridge": "{ ...after[0], chicken: before[0], atomic: true, dead: true, marker: next(operator(concat(before.value, '_', after.value))), value: concat(before.value, '_', after.value), modifiers: append(['chicken'], after[0].modifiers)}",
          "convolution": true,
          "id": "chicken_strip",
          "isA": [
            "adjective"
          ],
          "level": 0,
          "transitoryMode": true
        }
      ],
      "operators": [
        {
          "allowDups": true,
          "pattern": "([strip|])"
        },
        {
          "allowDups": true,
          "pattern": "([chicken|])"
        },
        {
          "allowDups": true,
          "pattern": "((chicken/0) [chicken_strip] (strip/0))"
        },
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "chicken": [
          {
            "id": "chicken",
            "initial": "{ value: 'chicken' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "strip": [
          {
            "id": "strip",
            "initial": "{ value: 'strip', number: 'one' }"
          }
        ],
        "strips": [
          {
            "id": "strip",
            "initial": "{ value: 'strip', number: 'many' }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "concept": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 22,
            "start": 17
          },
          "text": "strips",
          "unknown": true,
          "value": "strips",
          "word": "strips"
        },
        "dead": true,
        "default": true,
        "level": 1,
        "marker": "modifies",
        "modifier": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 6,
            "start": 0
          },
          "text": "chicken",
          "unknown": true,
          "value": "chicken",
          "word": "chicken"
        },
        "range": {
          "end": 22,
          "start": 0
        },
        "text": "chicken modifies strips",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "value": "modifies",
        "word": "modifies"
      },
      {
        "atomic": true,
        "chicken": {
          "level": 0,
          "marker": "chicken",
          "range": {
            "end": 6,
            "start": 0
          },
          "text": "chicken",
          "value": "chicken",
          "word": "chicken"
        },
        "dead": true,
        "level": 1,
        "marker": "chicken_strip",
        "modifiers": [
          "chicken"
        ],
        "number": "many",
        "range": {
          "end": 13,
          "start": 0
        },
        "text": "chicken strips",
        "topLevel": true,
        "value": "chicken_strip",
        "word": "strips"
      }
    ],
    "generatedParenthesized": [
      "",
      ""
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "modifies",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "modifies",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "modifies",
            0
          ],
          "ops": [
            [
              "modifies",
              0
            ]
          ]
        },
        {
          "counter": 1,
          "op": [
            "chicken_strip",
            0
          ],
          "ops": [
            [
              "chicken",
              0
            ],
            [
              "chicken_strip",
              0
            ],
            [
              "strip",
              0
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
            "chicken_strip": [
              {
                "chicken": {
                  "marker": "chicken",
                  "value": "chicken",
                  "word": "chicken"
                },
                "marker": "chicken_strip",
                "modifiers": [
                  "chicken"
                ],
                "paraphrase": true,
                "types": [
                  "chicken_strip"
                ],
                "value": "chicken_strip",
                "word": "strip"
              }
            ]
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "atomic": true,
            "chicken": {
              "level": 0,
              "marker": "chicken",
              "range": {
                "end": 6,
                "start": 0
              },
              "text": "chicken",
              "value": "chicken",
              "word": "chicken"
            },
            "dead": true,
            "level": 1,
            "marker": "chicken_strip",
            "modifiers": [
              "chicken"
            ],
            "number": "many",
            "range": {
              "end": 13,
              "start": 0
            },
            "text": "chicken strips",
            "topLevel": true,
            "value": "chicken_strip",
            "word": "strips"
          },
          "generatedParenthesized": "",
          "paraphrases": "chicken strips",
          "paraphrasesParenthesized": "((chicken) strips)",
          "responses": [
            ""
          ]
        },
        {
          "context": {
            "concept": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 22,
                "start": 17
              },
              "text": "strips",
              "unknown": true,
              "value": "strips",
              "word": "strips"
            },
            "dead": true,
            "default": true,
            "level": 1,
            "marker": "modifies",
            "modifier": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 6,
                "start": 0
              },
              "text": "chicken",
              "unknown": true,
              "value": "chicken",
              "word": "chicken"
            },
            "range": {
              "end": 22,
              "start": 0
            },
            "text": "chicken modifies strips",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "value": "modifies",
            "word": "modifies"
          },
          "generatedParenthesized": "",
          "paraphrases": "chicken modifies strips",
          "paraphrasesParenthesized": "(chicken modifies strips)",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "chicken modifies strips",
      "chicken strips"
    ],
    "paraphrasesParenthesized": [
      "(chicken modifies strips)",
      "((chicken) strips)"
    ],
    "query": "chicken modifies strips\\nchicken strips",
    "responses": [
      "",
      ""
    ]
  },
  {
    "associations": [
      [
        [
          "doesnt",
          0
        ],
        [
          "have",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "doesnt",
          0
        ],
        [
          "have",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "doesnt",
          0
        ],
        [
          "have",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "have",
          0
        ],
        [
          "unknown",
          1
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "do": {
          "left": "object",
          "range": {
            "end": 21,
            "start": 0
          },
          "right": "property"
        },
        "doesable": true,
        "is_compound": true,
        "level": 2,
        "marker": "have",
        "negation": true,
        "number": "one",
        "object": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "number": "one",
          "range": {
            "end": 21,
            "start": 0
          },
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "dead": true,
          "level": 1,
          "marker": "property",
          "range": {
            "end": 21,
            "start": 17
          },
          "text": "wings",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "wings",
          "word": "wings"
        },
        "range": {
          "end": 21,
          "start": 0
        },
        "sameWasProcessed": true,
        "text": "greg have wings",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "word": "have"
      }
    ],
    "generatedParenthesized": [
      ""
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "doesnt",
              0
            ],
            [
              "have",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "doesnt",
              0
            ],
            [
              "have",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "doesnt",
            0
          ],
          "ops": [
            [
              "doesnt",
              0
            ],
            [
              "have",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "have",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble",
            "greg"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "greg": {
                "wing": {
                  "has": false,
                  "value": null
                }
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "do": {
              "left": "object",
              "range": {
                "end": 21,
                "start": 0
              },
              "right": "property"
            },
            "doesable": true,
            "is_compound": true,
            "level": 2,
            "marker": "have",
            "negation": true,
            "number": "one",
            "object": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "number": "one",
              "range": {
                "end": 21,
                "start": 0
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "dead": true,
              "level": 1,
              "marker": "property",
              "range": {
                "end": 21,
                "start": 17
              },
              "text": "wings",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "wings",
              "word": "wings"
            },
            "range": {
              "end": 21,
              "start": 0
            },
            "sameWasProcessed": true,
            "text": "greg have wings",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "word": "have"
          },
          "generatedParenthesized": "",
          "paraphrases": "greg doesnt have wings",
          "paraphrasesParenthesized": "((greg) doesnt have (wings))",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "greg doesnt have wings"
    ],
    "paraphrasesParenthesized": [
      "((greg) doesnt have (wings))"
    ],
    "query": "greg doesnt have wings",
    "responses": [
      ""
    ]
  },
  {
    "associations": [
      [
        [
          "does",
          0
        ],
        [
          "have",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "does",
          0
        ],
        [
          "have",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "does",
          0
        ],
        [
          "have",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "does",
          0
        ],
        [
          "have",
          1
        ]
      ],
      [
        [
          "doesnt",
          0
        ],
        [
          "have",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "doesnt",
          0
        ],
        [
          "have",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "doesnt",
          0
        ],
        [
          "have",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "have",
          0
        ],
        [
          "unknown",
          1
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "do": {
          "left": "object",
          "range": {
            "end": 21,
            "start": 0
          },
          "right": "property"
        },
        "doesable": true,
        "is_compound": true,
        "level": 2,
        "marker": "have",
        "negation": true,
        "number": "one",
        "object": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "number": "one",
          "range": {
            "end": 21,
            "start": 0
          },
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "dead": true,
          "level": 1,
          "marker": "property",
          "range": {
            "end": 21,
            "start": 17
          },
          "text": "wings",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "wings",
          "word": "wings"
        },
        "range": {
          "end": 21,
          "start": 0
        },
        "sameWasProcessed": true,
        "text": "greg have wings",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "word": "have"
      },
      {
        "dead": true,
        "do": {
          "left": "object",
          "range": {
            "end": 42,
            "start": 28
          },
          "right": "property"
        },
        "doesable": true,
        "evalue": {
          "marker": "yesno",
          "value": false
        },
        "isResponse": true,
        "is_compound": true,
        "level": 2,
        "marker": "have",
        "number": "one",
        "object": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "number": "one",
          "range": {
            "end": 42,
            "start": 28
          },
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "dead": true,
          "level": 1,
          "marker": "property",
          "range": {
            "end": 42,
            "start": 38
          },
          "text": "wings",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "wings",
          "word": "wings"
        },
        "query": true,
        "range": {
          "end": 42,
          "start": 28
        },
        "text": "greg have wings",
        "topLevel": true,
        "touchedBy": [
          "properties#call10"
        ],
        "what": "does",
        "word": "have"
      }
    ],
    "generatedParenthesized": [
      "",
      "(no)"
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "does",
              0
            ],
            [
              "doesnt",
              0
            ],
            [
              "have",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "does",
              0
            ],
            [
              "doesnt",
              0
            ],
            [
              "have",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "does",
              0
            ],
            [
              "doesnt",
              0
            ],
            [
              "have",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "does",
              0
            ],
            [
              "doesnt",
              0
            ],
            [
              "have",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "doesnt",
            0
          ],
          "ops": [
            [
              "does",
              0
            ],
            [
              "doesnt",
              0
            ],
            [
              "have",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "does",
              0
            ],
            [
              "have",
              0
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "does",
              0
            ],
            [
              "have",
              0
            ],
            [
              "have",
              1
            ]
          ]
        },
        {
          "counter": 8,
          "op": [
            "does",
            0
          ],
          "ops": [
            [
              "does",
              0
            ],
            [
              "have",
              1
            ]
          ]
        },
        {
          "counter": 9,
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ]
          ]
        },
        {
          "counter": 10,
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble",
            "greg"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "greg": {
                "wing": {
                  "has": false,
                  "value": null
                }
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "do": {
              "left": "object",
              "range": {
                "end": 42,
                "start": 28
              },
              "right": "property"
            },
            "doesable": true,
            "evalue": {
              "marker": "yesno",
              "value": false
            },
            "isResponse": true,
            "is_compound": true,
            "level": 2,
            "marker": "have",
            "number": "one",
            "object": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "number": "one",
              "range": {
                "end": 42,
                "start": 28
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "dead": true,
              "level": 1,
              "marker": "property",
              "range": {
                "end": 42,
                "start": 38
              },
              "text": "wings",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "wings",
              "word": "wings"
            },
            "query": true,
            "range": {
              "end": 42,
              "start": 28
            },
            "text": "greg have wings",
            "topLevel": true,
            "touchedBy": [
              "properties#call10"
            ],
            "what": "does",
            "word": "have"
          },
          "generatedParenthesized": "(no)",
          "paraphrases": "does greg have wings?",
          "paraphrasesParenthesized": "((does (greg) have (wings))?)",
          "responses": [
            "",
            "no"
          ]
        },
        {
          "context": {
            "dead": true,
            "do": {
              "left": "object",
              "range": {
                "end": 21,
                "start": 0
              },
              "right": "property"
            },
            "doesable": true,
            "is_compound": true,
            "level": 2,
            "marker": "have",
            "negation": true,
            "number": "one",
            "object": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "number": "one",
              "range": {
                "end": 21,
                "start": 0
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "dead": true,
              "level": 1,
              "marker": "property",
              "range": {
                "end": 21,
                "start": 17
              },
              "text": "wings",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "wings",
              "word": "wings"
            },
            "range": {
              "end": 21,
              "start": 0
            },
            "sameWasProcessed": true,
            "text": "greg have wings",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "word": "have"
          },
          "generatedParenthesized": "",
          "paraphrases": "greg doesnt have wings",
          "paraphrasesParenthesized": "((greg) doesnt have (wings))",
          "responses": [
            "",
            "no"
          ]
        }
      ]
    },
    "paraphrases": [
      "greg doesnt have wings",
      "does greg have wings?"
    ],
    "paraphrasesParenthesized": [
      "((greg) doesnt have (wings))",
      "((does (greg) have (wings))?)"
    ],
    "query": "greg doesnt have wings does greg have wings",
    "responses": [
      "",
      "no"
    ]
  },
  {
    "associations": [
      [
        [
          "have",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "have",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "have",
          0
        ],
        [
          "unknown",
          1
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "do": {
          "left": "object",
          "range": {
            "end": 12,
            "start": 0
          },
          "right": "property"
        },
        "doesable": true,
        "level": 2,
        "marker": "have",
        "number": "one",
        "object": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "number": "one",
          "range": {
            "end": 12,
            "start": 0
          },
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "dead": true,
          "level": 1,
          "marker": "property",
          "range": {
            "end": 12,
            "start": 9
          },
          "text": "eyes",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "eyes",
          "word": "eyes"
        },
        "range": {
          "end": 12,
          "start": 0
        },
        "sameWasProcessed": true,
        "text": "greg has eyes",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "word": "has"
      }
    ],
    "generatedParenthesized": [
      ""
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "have",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble",
            "greg"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "greg": {
                "eye": {
                  "has": true,
                  "value": null
                }
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "do": {
              "left": "object",
              "range": {
                "end": 12,
                "start": 0
              },
              "right": "property"
            },
            "doesable": true,
            "level": 2,
            "marker": "have",
            "number": "one",
            "object": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "number": "one",
              "range": {
                "end": 12,
                "start": 0
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "dead": true,
              "level": 1,
              "marker": "property",
              "range": {
                "end": 12,
                "start": 9
              },
              "text": "eyes",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "eyes",
              "word": "eyes"
            },
            "range": {
              "end": 12,
              "start": 0
            },
            "sameWasProcessed": true,
            "text": "greg has eyes",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "word": "has"
          },
          "generatedParenthesized": "",
          "paraphrases": "greg has eyes",
          "paraphrasesParenthesized": "((greg) has (eyes))",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "greg has eyes"
    ],
    "paraphrasesParenthesized": [
      "((greg) has (eyes))"
    ],
    "query": "greg has eyes",
    "responses": [
      ""
    ]
  },
  {
    "associations": [
      [
        [
          "have",
          0
        ],
        [
          "questionMark",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "have",
          0
        ],
        [
          "questionMark",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "have",
          0
        ],
        [
          "questionMark",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "have",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "have",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "have",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "have",
          1
        ],
        [
          "questionMark",
          0
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "do": {
          "left": "object",
          "range": {
            "end": 12,
            "start": 0
          },
          "right": "property"
        },
        "doesable": true,
        "level": 2,
        "marker": "have",
        "number": "one",
        "object": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "number": "one",
          "range": {
            "end": 12,
            "start": 0
          },
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "dead": true,
          "level": 1,
          "marker": "property",
          "range": {
            "end": 12,
            "start": 9
          },
          "text": "eyes",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "eyes",
          "word": "eyes"
        },
        "range": {
          "end": 12,
          "start": 0
        },
        "sameWasProcessed": true,
        "text": "greg has eyes",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "word": "has"
      },
      {
        "dead": true,
        "do": {
          "left": "object",
          "range": {
            "end": 26,
            "start": 14
          },
          "right": "property"
        },
        "doesable": true,
        "evalue": {
          "marker": "yesno",
          "value": true
        },
        "isResponse": true,
        "level": 2,
        "marker": "have",
        "number": "one",
        "object": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "number": "one",
          "range": {
            "end": 26,
            "start": 14
          },
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "dead": true,
          "level": 1,
          "marker": "property",
          "range": {
            "end": 26,
            "start": 23
          },
          "text": "eyes",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "eyes",
          "word": "eyes"
        },
        "query": [
          "have"
        ],
        "range": {
          "end": 27,
          "start": 14
        },
        "text": "greg has eyes ?",
        "topLevel": true,
        "touchedBy": [
          "properties#call10"
        ],
        "word": "has"
      }
    ],
    "generatedParenthesized": [
      "",
      "(yes)"
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "have",
              1
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "counter": 8,
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "counter": 9,
          "op": [
            "questionMark",
            0
          ],
          "ops": [
            [
              "questionMark",
              0
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble",
            "greg"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "greg": {
                "eye": {
                  "has": true,
                  "value": null
                }
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "do": {
              "left": "object",
              "range": {
                "end": 26,
                "start": 14
              },
              "right": "property"
            },
            "doesable": true,
            "evalue": {
              "marker": "yesno",
              "value": true
            },
            "isResponse": true,
            "level": 2,
            "marker": "have",
            "number": "one",
            "object": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "number": "one",
              "range": {
                "end": 26,
                "start": 14
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "dead": true,
              "level": 1,
              "marker": "property",
              "range": {
                "end": 26,
                "start": 23
              },
              "text": "eyes",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "eyes",
              "word": "eyes"
            },
            "query": [
              "have"
            ],
            "range": {
              "end": 27,
              "start": 14
            },
            "text": "greg has eyes ?",
            "topLevel": true,
            "touchedBy": [
              "properties#call10"
            ],
            "word": "has"
          },
          "generatedParenthesized": "(yes)",
          "paraphrases": "does greg have eyes?",
          "paraphrasesParenthesized": "((does (greg) have (eyes))?)",
          "responses": [
            "",
            "yes"
          ]
        },
        {
          "context": {
            "dead": true,
            "do": {
              "left": "object",
              "range": {
                "end": 12,
                "start": 0
              },
              "right": "property"
            },
            "doesable": true,
            "level": 2,
            "marker": "have",
            "number": "one",
            "object": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "number": "one",
              "range": {
                "end": 12,
                "start": 0
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "dead": true,
              "level": 1,
              "marker": "property",
              "range": {
                "end": 12,
                "start": 9
              },
              "text": "eyes",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "eyes",
              "word": "eyes"
            },
            "range": {
              "end": 12,
              "start": 0
            },
            "sameWasProcessed": true,
            "text": "greg has eyes",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "word": "has"
          },
          "generatedParenthesized": "",
          "paraphrases": "greg has eyes",
          "paraphrasesParenthesized": "((greg) has (eyes))",
          "responses": [
            "",
            "yes"
          ]
        }
      ]
    },
    "paraphrases": [
      "greg has eyes",
      "does greg have eyes?"
    ],
    "paraphrasesParenthesized": [
      "((greg) has (eyes))",
      "((does (greg) have (eyes))?)"
    ],
    "query": "greg has eyes greg has eyes?",
    "responses": [
      "",
      "yes"
    ]
  },
  {
    "associations": [
      [
        [
          "have",
          0
        ],
        [
          "questionMark",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "have",
          0
        ],
        [
          "questionMark",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "have",
          0
        ],
        [
          "questionMark",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "have",
          1
        ],
        [
          "questionMark",
          0
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "do": {
          "left": "object",
          "range": {
            "end": 12,
            "start": 0
          },
          "right": "property"
        },
        "doesable": true,
        "isResponse": true,
        "level": 2,
        "marker": "have",
        "number": "one",
        "object": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "number": "one",
          "range": {
            "end": 12,
            "start": 0
          },
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "dead": true,
          "level": 1,
          "marker": "property",
          "range": {
            "end": 12,
            "start": 9
          },
          "text": "eyes",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "eyes",
          "word": "eyes"
        },
        "query": [
          "have"
        ],
        "range": {
          "end": 13,
          "start": 0
        },
        "text": "greg has eyes ?",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "verbatim": "There is no object named greg",
        "word": "has"
      }
    ],
    "generatedParenthesized": [
      "(There is no object named greg)"
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "questionMark",
            0
          ],
          "ops": [
            [
              "questionMark",
              0
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "do": {
              "left": "object",
              "range": {
                "end": 12,
                "start": 0
              },
              "right": "property"
            },
            "doesable": true,
            "isResponse": true,
            "level": 2,
            "marker": "have",
            "number": "one",
            "object": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "number": "one",
              "range": {
                "end": 12,
                "start": 0
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "dead": true,
              "level": 1,
              "marker": "property",
              "range": {
                "end": 12,
                "start": 9
              },
              "text": "eyes",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "eyes",
              "word": "eyes"
            },
            "query": [
              "have"
            ],
            "range": {
              "end": 13,
              "start": 0
            },
            "text": "greg has eyes ?",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "verbatim": "There is no object named greg",
            "word": "has"
          },
          "generatedParenthesized": "(There is no object named greg)",
          "paraphrases": "does greg have eyes?",
          "paraphrasesParenthesized": "((does (greg) have (eyes))?)",
          "responses": [
            "There is no object named greg"
          ]
        }
      ]
    },
    "paraphrases": [
      "does greg have eyes?"
    ],
    "paraphrasesParenthesized": [
      "((does (greg) have (eyes))?)"
    ],
    "query": "greg has eyes?",
    "responses": [
      "There is no object named greg"
    ]
  },
  {
    "associations": [
      [
        [
          "have",
          0
        ],
        [
          "questionMark",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "have",
          0
        ],
        [
          "questionMark",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "have",
          0
        ],
        [
          "questionMark",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "have",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "have",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "have",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "have",
          1
        ],
        [
          "questionMark",
          0
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "do": {
          "left": "object",
          "range": {
            "end": 12,
            "start": 0
          },
          "right": "property"
        },
        "doesable": true,
        "level": 2,
        "marker": "have",
        "number": "one",
        "object": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "number": "one",
          "range": {
            "end": 12,
            "start": 0
          },
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "dead": true,
          "level": 1,
          "marker": "property",
          "range": {
            "end": 12,
            "start": 9
          },
          "text": "toes",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "toes",
          "word": "toes"
        },
        "range": {
          "end": 12,
          "start": 0
        },
        "sameWasProcessed": true,
        "text": "greg has toes",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "word": "has"
      },
      {
        "dead": true,
        "do": {
          "left": "object",
          "range": {
            "end": 26,
            "start": 14
          },
          "right": "property"
        },
        "doesable": true,
        "evalue": {
          "marker": "yesno",
          "value": false
        },
        "isResponse": true,
        "level": 2,
        "marker": "have",
        "number": "one",
        "object": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "number": "one",
          "range": {
            "end": 26,
            "start": 14
          },
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "dead": true,
          "level": 1,
          "marker": "property",
          "range": {
            "end": 26,
            "start": 23
          },
          "text": "eyes",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "eyes",
          "word": "eyes"
        },
        "query": [
          "have"
        ],
        "range": {
          "end": 27,
          "start": 14
        },
        "text": "greg has eyes ?",
        "topLevel": true,
        "touchedBy": [
          "properties#call10"
        ],
        "word": "has"
      }
    ],
    "generatedParenthesized": [
      "",
      "(no)"
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "have",
              1
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "counter": 8,
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "counter": 9,
          "op": [
            "questionMark",
            0
          ],
          "ops": [
            [
              "questionMark",
              0
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble",
            "greg"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "greg": {
                "toe": {
                  "has": true,
                  "value": null
                }
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "do": {
              "left": "object",
              "range": {
                "end": 26,
                "start": 14
              },
              "right": "property"
            },
            "doesable": true,
            "evalue": {
              "marker": "yesno",
              "value": false
            },
            "isResponse": true,
            "level": 2,
            "marker": "have",
            "number": "one",
            "object": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "number": "one",
              "range": {
                "end": 26,
                "start": 14
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "dead": true,
              "level": 1,
              "marker": "property",
              "range": {
                "end": 26,
                "start": 23
              },
              "text": "eyes",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "eyes",
              "word": "eyes"
            },
            "query": [
              "have"
            ],
            "range": {
              "end": 27,
              "start": 14
            },
            "text": "greg has eyes ?",
            "topLevel": true,
            "touchedBy": [
              "properties#call10"
            ],
            "word": "has"
          },
          "generatedParenthesized": "(no)",
          "paraphrases": "does greg have eyes?",
          "paraphrasesParenthesized": "((does (greg) have (eyes))?)",
          "responses": [
            "",
            "no"
          ]
        },
        {
          "context": {
            "dead": true,
            "do": {
              "left": "object",
              "range": {
                "end": 12,
                "start": 0
              },
              "right": "property"
            },
            "doesable": true,
            "level": 2,
            "marker": "have",
            "number": "one",
            "object": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "number": "one",
              "range": {
                "end": 12,
                "start": 0
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "dead": true,
              "level": 1,
              "marker": "property",
              "range": {
                "end": 12,
                "start": 9
              },
              "text": "toes",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "toes",
              "word": "toes"
            },
            "range": {
              "end": 12,
              "start": 0
            },
            "sameWasProcessed": true,
            "text": "greg has toes",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "word": "has"
          },
          "generatedParenthesized": "",
          "paraphrases": "greg has toes",
          "paraphrasesParenthesized": "((greg) has (toes))",
          "responses": [
            "",
            "no"
          ]
        }
      ]
    },
    "paraphrases": [
      "greg has toes",
      "does greg have eyes?"
    ],
    "paraphrasesParenthesized": [
      "((greg) has (toes))",
      "((does (greg) have (eyes))?)"
    ],
    "query": "greg has toes greg has eyes?",
    "responses": [
      "",
      "no"
    ]
  },
  {
    "associations": [
      [
        [
          "possession",
          0
        ],
        [
          "possession",
          1
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "possession",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "possession",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "possession",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "possession",
          1
        ],
        [
          "unknown",
          1
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "level": 1,
        "marker": "property",
        "object": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 3,
            "start": 0
          },
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "objects": [
          {
            "dead": true,
            "level": 1,
            "marker": "property",
            "range": {
              "end": 18,
              "start": 13
            },
            "text": "bumper",
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "bumper",
            "word": "bumper"
          },
          {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 9,
              "start": 7
            },
            "text": "car",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "car",
            "word": "car"
          },
          {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 3,
              "start": 0
            },
            "text": "greg",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          }
        ],
        "possession": true,
        "range": {
          "end": 18,
          "start": 0
        },
        "text": "greg 's car 's bumper",
        "topLevel": true,
        "types": [
          "property"
        ],
        "unknown": true,
        "value": "bumper",
        "word": "bumper"
      }
    ],
    "generatedParenthesized": [
      ""
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "possession",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "possession",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "possession",
              1
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "possession",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "level": 1,
            "marker": "property",
            "object": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 3,
                "start": 0
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "objects": [
              {
                "dead": true,
                "level": 1,
                "marker": "property",
                "range": {
                  "end": 18,
                  "start": 13
                },
                "text": "bumper",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "bumper",
                "word": "bumper"
              },
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 9,
                  "start": 7
                },
                "text": "car",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "car",
                "word": "car"
              },
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 3,
                  "start": 0
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "possession": true,
            "range": {
              "end": 18,
              "start": 0
            },
            "text": "greg 's car 's bumper",
            "topLevel": true,
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "bumper",
            "word": "bumper"
          },
          "generatedParenthesized": "",
          "paraphrases": "greg's car's bumper",
          "paraphrasesParenthesized": "(((greg)'s) ((car)'s) (bumper))",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "greg's car's bumper"
    ],
    "paraphrasesParenthesized": [
      "(((greg)'s) ((car)'s) (bumper))"
    ],
    "query": "greg's car's bumper",
    "responses": [
      ""
    ]
  },
  {
    "associations": [
      [
        [
          "is",
          0
        ],
        [
          "possession",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "possession",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "possession",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "possession",
          1
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "unknown",
          1
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "dead": true,
          "level": 1,
          "marker": "property",
          "number": "one",
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 4,
              "start": 0
            },
            "text": "alice",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "alice",
            "word": "alice"
          },
          "objects": [
            {
              "dead": true,
              "level": 1,
              "marker": "property",
              "range": {
                "end": 13,
                "start": 8
              },
              "text": "sister",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "sister",
              "word": "sister"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 4,
                "start": 0
              },
              "text": "alice",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "alice",
              "word": "alice"
            }
          ],
          "possession": true,
          "range": {
            "end": 22,
            "start": 0
          },
          "text": "alice 's sister",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "sister",
          "word": "sister"
        },
        "range": {
          "end": 22,
          "start": 0
        },
        "text": "alice 's sister is wendy",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "two": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 22,
            "start": 18
          },
          "text": "wendy",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "wendy",
          "word": "wendy"
        },
        "word": "is"
      }
    ],
    "generatedParenthesized": [
      ""
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "sister": [
              "wendy"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble",
            "wendy",
            "sister",
            "alice"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "wendy": [
              "sister"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "alice": {
                "sister": {
                  "has": true,
                  "value": {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 22,
                      "start": 18
                    },
                    "text": "wendy",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "wendy",
                    "word": "wendy"
                  }
                }
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "sister": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "wendy": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
            "sister": [
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 22,
                  "start": 18
                },
                "text": "wendy",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "wendy",
                "word": "wendy"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "dead": true,
              "level": 1,
              "marker": "property",
              "number": "one",
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 4,
                  "start": 0
                },
                "text": "alice",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "alice",
                "word": "alice"
              },
              "objects": [
                {
                  "dead": true,
                  "level": 1,
                  "marker": "property",
                  "range": {
                    "end": 13,
                    "start": 8
                  },
                  "text": "sister",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "sister",
                  "word": "sister"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 4,
                    "start": 0
                  },
                  "text": "alice",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "alice",
                  "word": "alice"
                }
              ],
              "possession": true,
              "range": {
                "end": 22,
                "start": 0
              },
              "text": "alice 's sister",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "sister",
              "word": "sister"
            },
            "range": {
              "end": 22,
              "start": 0
            },
            "text": "alice 's sister is wendy",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "two": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 22,
                "start": 18
              },
              "text": "wendy",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "wendy",
              "word": "wendy"
            },
            "word": "is"
          },
          "generatedParenthesized": "",
          "paraphrases": "alice's sister is wendy",
          "paraphrasesParenthesized": "((((alice)'s) (sister)) is (wendy))",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "alice's sister is wendy"
    ],
    "paraphrasesParenthesized": [
      "((((alice)'s) (sister)) is (wendy))"
    ],
    "query": "alice's sister is wendy",
    "responses": [
      ""
    ]
  },
  {
    "associations": [
      [
        [
          "is",
          0
        ],
        [
          "possession",
          0
        ],
        [
          "possession",
          1
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "possession",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "possession",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "possession",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "possession",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "possession",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "possession",
          1
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "unknown",
          0
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "dead": true,
          "level": 1,
          "marker": "property",
          "number": "one",
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 4,
              "start": 0
            },
            "text": "alice",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "alice",
            "word": "alice"
          },
          "objects": [
            {
              "dead": true,
              "level": 1,
              "marker": "property",
              "range": {
                "end": 13,
                "start": 8
              },
              "text": "sister",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "sister",
              "word": "sister"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 4,
                "start": 0
              },
              "text": "alice",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "alice",
              "word": "alice"
            }
          ],
          "possession": true,
          "range": {
            "end": 22,
            "start": 0
          },
          "text": "alice 's sister",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "sister",
          "word": "sister"
        },
        "range": {
          "end": 22,
          "start": 0
        },
        "text": "alice 's sister is wendy",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "two": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 22,
            "start": 18
          },
          "text": "wendy",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "wendy",
          "word": "wendy"
        },
        "word": "is"
      },
      {
        "dead": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "dead": true,
          "level": 1,
          "marker": "property",
          "number": "one",
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 28,
              "start": 24
            },
            "text": "wendy",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "wendy",
            "word": "wendy"
          },
          "objects": [
            {
              "dead": true,
              "level": 1,
              "marker": "property",
              "range": {
                "end": 34,
                "start": 32
              },
              "text": "cat",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "cat",
              "word": "cat"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 28,
                "start": 24
              },
              "text": "wendy",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "wendy",
              "word": "wendy"
            }
          ],
          "possession": true,
          "range": {
            "end": 42,
            "start": 24
          },
          "text": "wendy 's cat",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "cat",
          "word": "cat"
        },
        "range": {
          "end": 42,
          "start": 24
        },
        "text": "wendy 's cat is cleo",
        "topLevel": true,
        "touchedBy": [
          "properties#call18"
        ],
        "two": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 42,
            "start": 39
          },
          "text": "cleo",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "cleo",
          "word": "cleo"
        },
        "word": "is"
      },
      {
        "dead": true,
        "evalue": {
          "default": true,
          "focusable": [
            "two",
            "one"
          ],
          "marker": "is",
          "one": {
            "dead": true,
            "level": 1,
            "marker": "property",
            "object": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 11,
                "start": 7
              },
              "text": "alice",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "alice",
              "word": "alice"
            },
            "objects": [
              {
                "dead": true,
                "level": 1,
                "marker": "property",
                "range": {
                  "end": 26,
                  "start": 24
                },
                "text": "cat",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "cat",
                "word": "cat"
              },
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 20,
                  "start": 15
                },
                "text": "sister",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "sister",
                "word": "sister"
              },
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 11,
                  "start": 7
                },
                "text": "alice",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "alice",
                "word": "alice"
              }
            ],
            "possession": true,
            "range": {
              "end": 26,
              "start": 7
            },
            "text": "alice 's sister 's cat",
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "cat",
            "word": "cat"
          },
          "two": {
            "dead": true,
            "evalue": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 42,
                "start": 39
              },
              "text": "cleo",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "cleo",
              "word": "cleo"
            },
            "focus": true,
            "focusable": [
              "object[0]"
            ],
            "instance": true,
            "level": 1,
            "marker": "property",
            "objects": [
              {
                "dead": true,
                "level": 1,
                "marker": "property",
                "range": {
                  "end": 26,
                  "start": 24
                },
                "text": "cat",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "cat",
                "word": "cat"
              },
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 20,
                  "start": 15
                },
                "text": "sister",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "sister",
                "word": "sister"
              },
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 11,
                  "start": 7
                },
                "text": "alice",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "alice",
                "word": "alice"
              }
            ],
            "possession": true,
            "range": {
              "end": 26,
              "start": 7
            },
            "text": "alice 's sister 's cat",
            "touchedBy": [
              "properties#call3",
              "properties#call2"
            ],
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "cat",
            "word": "cat"
          },
          "word": "is"
        },
        "isResponse": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "dead": true,
          "determined": true,
          "level": 1,
          "marker": "what",
          "modifiers": [
          ],
          "number": "one",
          "query": [
            "what"
          ],
          "range": {
            "end": 26,
            "start": 0
          },
          "text": "who",
          "types": [
            "what"
          ],
          "word": "who"
        },
        "query": [
          "what"
        ],
        "range": {
          "end": 26,
          "start": 0
        },
        "text": "who is alice 's sister 's cat",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "two": {
          "dead": true,
          "level": 1,
          "marker": "property",
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 11,
              "start": 7
            },
            "text": "alice",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "alice",
            "word": "alice"
          },
          "objects": [
            {
              "dead": true,
              "level": 1,
              "marker": "property",
              "range": {
                "end": 26,
                "start": 24
              },
              "text": "cat",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "cat",
              "word": "cat"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 20,
                "start": 15
              },
              "text": "sister",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "sister",
              "word": "sister"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 11,
                "start": 7
              },
              "text": "alice",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "alice",
              "word": "alice"
            }
          ],
          "possession": true,
          "range": {
            "end": 26,
            "start": 7
          },
          "text": "alice 's sister 's cat",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "cat",
          "word": "cat"
        },
        "word": "is"
      }
    ],
    "generatedParenthesized": [
      "",
      "",
      "(((((alice)'s) ((sister)'s) (cat)) is ((cleo))))"
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ]
          ]
        },
        {
          "counter": 8,
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "counter": 9,
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "counter": 10,
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "counter": 11,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 12,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 13,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 14,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "what",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "counter": 8,
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "counter": 9,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 10,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "cat": [
              "cleo"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "sister": [
              "wendy"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble",
            "wendy",
            "sister",
            "alice",
            "cleo",
            "cat"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "cleo": [
              "cat"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "wendy": [
              "sister"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "alice": {
                "sister": {
                  "has": true,
                  "value": {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 22,
                      "start": 18
                    },
                    "text": "wendy",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "wendy",
                    "word": "wendy"
                  }
                }
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "cat": {
              },
              "cleo": {
              },
              "concept": {
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "sister": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "wendy": {
                "cat": {
                  "has": true,
                  "value": {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 42,
                      "start": 39
                    },
                    "text": "cleo",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "cleo",
                    "word": "cleo"
                  }
                }
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
            "cat": [
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 42,
                  "start": 39
                },
                "text": "cleo",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "cleo",
                "word": "cleo"
              }
            ],
            "sister": [
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 22,
                  "start": 18
                },
                "text": "wendy",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "wendy",
                "word": "wendy"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "evalue": {
              "default": true,
              "focusable": [
                "two",
                "one"
              ],
              "marker": "is",
              "one": {
                "dead": true,
                "level": 1,
                "marker": "property",
                "object": {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 11,
                    "start": 7
                  },
                  "text": "alice",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "alice",
                  "word": "alice"
                },
                "objects": [
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "property",
                    "range": {
                      "end": 26,
                      "start": 24
                    },
                    "text": "cat",
                    "types": [
                      "property"
                    ],
                    "unknown": true,
                    "value": "cat",
                    "word": "cat"
                  },
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 20,
                      "start": 15
                    },
                    "text": "sister",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "sister",
                    "word": "sister"
                  },
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 11,
                      "start": 7
                    },
                    "text": "alice",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "alice",
                    "word": "alice"
                  }
                ],
                "possession": true,
                "range": {
                  "end": 26,
                  "start": 7
                },
                "text": "alice 's sister 's cat",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "cat",
                "word": "cat"
              },
              "two": {
                "dead": true,
                "evalue": {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 42,
                    "start": 39
                  },
                  "text": "cleo",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "cleo",
                  "word": "cleo"
                },
                "focus": true,
                "focusable": [
                  "object[0]"
                ],
                "instance": true,
                "level": 1,
                "marker": "property",
                "objects": [
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "property",
                    "range": {
                      "end": 26,
                      "start": 24
                    },
                    "text": "cat",
                    "types": [
                      "property"
                    ],
                    "unknown": true,
                    "value": "cat",
                    "word": "cat"
                  },
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 20,
                      "start": 15
                    },
                    "text": "sister",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "sister",
                    "word": "sister"
                  },
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 11,
                      "start": 7
                    },
                    "text": "alice",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "alice",
                    "word": "alice"
                  }
                ],
                "possession": true,
                "range": {
                  "end": 26,
                  "start": 7
                },
                "text": "alice 's sister 's cat",
                "touchedBy": [
                  "properties#call3",
                  "properties#call2"
                ],
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "cat",
                "word": "cat"
              },
              "word": "is"
            },
            "isResponse": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "dead": true,
              "determined": true,
              "level": 1,
              "marker": "what",
              "modifiers": [
              ],
              "number": "one",
              "query": [
                "what"
              ],
              "range": {
                "end": 26,
                "start": 0
              },
              "text": "who",
              "types": [
                "what"
              ],
              "word": "who"
            },
            "query": [
              "what"
            ],
            "range": {
              "end": 26,
              "start": 0
            },
            "text": "who is alice 's sister 's cat",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "two": {
              "dead": true,
              "level": 1,
              "marker": "property",
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 11,
                  "start": 7
                },
                "text": "alice",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "alice",
                "word": "alice"
              },
              "objects": [
                {
                  "dead": true,
                  "level": 1,
                  "marker": "property",
                  "range": {
                    "end": 26,
                    "start": 24
                  },
                  "text": "cat",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "cat",
                  "word": "cat"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 20,
                    "start": 15
                  },
                  "text": "sister",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "sister",
                  "word": "sister"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 11,
                    "start": 7
                  },
                  "text": "alice",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "alice",
                  "word": "alice"
                }
              ],
              "possession": true,
              "range": {
                "end": 26,
                "start": 7
              },
              "text": "alice 's sister 's cat",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "cat",
              "word": "cat"
            },
            "word": "is"
          },
          "generatedParenthesized": "(((((alice)'s) ((sister)'s) (cat)) is ((cleo))))",
          "paraphrases": "who is alice's sister's cat?",
          "paraphrasesParenthesized": "(((who) is (((alice)'s) ((sister)'s) (cat)))?)",
          "responses": [
            "alice's sister's cat is cleo"
          ]
        },
        {
          "context": {
            "dead": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "dead": true,
              "level": 1,
              "marker": "property",
              "number": "one",
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 28,
                  "start": 24
                },
                "text": "wendy",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "wendy",
                "word": "wendy"
              },
              "objects": [
                {
                  "dead": true,
                  "level": 1,
                  "marker": "property",
                  "range": {
                    "end": 34,
                    "start": 32
                  },
                  "text": "cat",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "cat",
                  "word": "cat"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 28,
                    "start": 24
                  },
                  "text": "wendy",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "wendy",
                  "word": "wendy"
                }
              ],
              "possession": true,
              "range": {
                "end": 42,
                "start": 24
              },
              "text": "wendy 's cat",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "cat",
              "word": "cat"
            },
            "range": {
              "end": 42,
              "start": 24
            },
            "text": "wendy 's cat is cleo",
            "topLevel": true,
            "touchedBy": [
              "properties#call18"
            ],
            "two": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 42,
                "start": 39
              },
              "text": "cleo",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "cleo",
              "word": "cleo"
            },
            "word": "is"
          },
          "generatedParenthesized": "",
          "paraphrases": "wendy's cat is cleo",
          "paraphrasesParenthesized": "((((wendy)'s) (cat)) is (cleo))",
          "responses": [
            "",
            ""
          ]
        },
        {
          "context": {
            "dead": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "dead": true,
              "level": 1,
              "marker": "property",
              "number": "one",
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 4,
                  "start": 0
                },
                "text": "alice",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "alice",
                "word": "alice"
              },
              "objects": [
                {
                  "dead": true,
                  "level": 1,
                  "marker": "property",
                  "range": {
                    "end": 13,
                    "start": 8
                  },
                  "text": "sister",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "sister",
                  "word": "sister"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 4,
                    "start": 0
                  },
                  "text": "alice",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "alice",
                  "word": "alice"
                }
              ],
              "possession": true,
              "range": {
                "end": 22,
                "start": 0
              },
              "text": "alice 's sister",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "sister",
              "word": "sister"
            },
            "range": {
              "end": 22,
              "start": 0
            },
            "text": "alice 's sister is wendy",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "two": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 22,
                "start": 18
              },
              "text": "wendy",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "wendy",
              "word": "wendy"
            },
            "word": "is"
          },
          "generatedParenthesized": "",
          "paraphrases": "alice's sister is wendy",
          "paraphrasesParenthesized": "((((alice)'s) (sister)) is (wendy))",
          "responses": [
            "",
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "alice's sister is wendy",
      "wendy's cat is cleo",
      "who is alice's sister's cat?"
    ],
    "paraphrasesParenthesized": [
      "((((alice)'s) (sister)) is (wendy))",
      "((((wendy)'s) (cat)) is (cleo))",
      "(((who) is (((alice)'s) ((sister)'s) (cat)))?)"
    ],
    "query": "alice's sister is wendy wendy's cat is cleo\\nwho is alice's sister's cat",
    "responses": [
      "",
      "",
      "alice's sister's cat is cleo"
    ]
  },
  {
    "associations": [
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "propertyOf",
          1
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          1
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "dead": true,
          "level": 1,
          "marker": "property",
          "number": "one",
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 4,
              "start": 0
            },
            "text": "alice",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "alice",
            "word": "alice"
          },
          "objects": [
            {
              "dead": true,
              "level": 1,
              "marker": "property",
              "range": {
                "end": 13,
                "start": 8
              },
              "text": "sister",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "sister",
              "word": "sister"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 4,
                "start": 0
              },
              "text": "alice",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "alice",
              "word": "alice"
            }
          ],
          "possession": true,
          "range": {
            "end": 22,
            "start": 0
          },
          "text": "alice 's sister",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "sister",
          "word": "sister"
        },
        "range": {
          "end": 22,
          "start": 0
        },
        "text": "alice 's sister is wendy",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "two": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 22,
            "start": 18
          },
          "text": "wendy",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "wendy",
          "word": "wendy"
        },
        "word": "is"
      },
      {
        "dead": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "dead": true,
          "level": 1,
          "marker": "property",
          "number": "one",
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 28,
              "start": 24
            },
            "text": "wendy",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "wendy",
            "word": "wendy"
          },
          "objects": [
            {
              "dead": true,
              "level": 1,
              "marker": "property",
              "range": {
                "end": 34,
                "start": 32
              },
              "text": "cat",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "cat",
              "word": "cat"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 28,
                "start": 24
              },
              "text": "wendy",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "wendy",
              "word": "wendy"
            }
          ],
          "possession": true,
          "range": {
            "end": 42,
            "start": 24
          },
          "text": "wendy 's cat",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "cat",
          "word": "cat"
        },
        "range": {
          "end": 42,
          "start": 24
        },
        "text": "wendy 's cat is cleo",
        "topLevel": true,
        "touchedBy": [
          "properties#call18"
        ],
        "two": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 42,
            "start": 39
          },
          "text": "cleo",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "cleo",
          "word": "cleo"
        },
        "word": "is"
      },
      {
        "dead": true,
        "evalue": {
          "default": true,
          "focusable": [
            "two",
            "one"
          ],
          "marker": "is",
          "one": {
            "concept": true,
            "dead": true,
            "determiner": "the",
            "focusableForPhrase": true,
            "level": 1,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "object": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 36,
                "start": 32
              },
              "text": "alice",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "alice",
              "word": "alice"
            },
            "objects": [
              {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "range": {
                  "end": 13,
                  "start": 7
                },
                "text": "the cat",
                "types": [
                  "property",
                  "unknown"
                ],
                "unknown": true,
                "value": "cat",
                "wantsValue": true,
                "word": "cat"
              },
              {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "unknown",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "range": {
                  "end": 27,
                  "start": 18
                },
                "text": "the sister",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "sister",
                "wantsValue": true,
                "word": "sister"
              },
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 36,
                  "start": 32
                },
                "text": "alice",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "alice",
                "word": "alice"
              }
            ],
            "pullFromContext": true,
            "range": {
              "end": 36,
              "start": 7
            },
            "text": "the cat of the sister of alice",
            "types": [
              "property",
              "unknown"
            ],
            "unknown": true,
            "value": "cat",
            "wantsValue": true,
            "word": "cat"
          },
          "two": {
            "concept": true,
            "dead": true,
            "determiner": "the",
            "evalue": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 42,
                "start": 39
              },
              "text": "cleo",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "cleo",
              "word": "cleo"
            },
            "focus": true,
            "focusable": [
              "object[0]"
            ],
            "focusableForPhrase": true,
            "instance": true,
            "level": 1,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "objects": [
              {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "range": {
                  "end": 13,
                  "start": 7
                },
                "text": "the cat",
                "types": [
                  "property",
                  "unknown"
                ],
                "unknown": true,
                "value": "cat",
                "wantsValue": true,
                "word": "cat"
              },
              {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "unknown",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "range": {
                  "end": 27,
                  "start": 18
                },
                "text": "the sister",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "sister",
                "wantsValue": true,
                "word": "sister"
              },
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 36,
                  "start": 32
                },
                "text": "alice",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "alice",
                "word": "alice"
              }
            ],
            "pullFromContext": true,
            "range": {
              "end": 36,
              "start": 7
            },
            "text": "the cat of the sister of alice",
            "touchedBy": [
              "properties#call3",
              "properties#call2"
            ],
            "types": [
              "property",
              "unknown"
            ],
            "unknown": true,
            "value": "cat",
            "wantsValue": true,
            "word": "cat"
          },
          "word": "is"
        },
        "isResponse": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "dead": true,
          "determined": true,
          "level": 1,
          "marker": "what",
          "modifiers": [
          ],
          "number": "one",
          "query": [
            "what"
          ],
          "range": {
            "end": 36,
            "start": 0
          },
          "text": "who",
          "types": [
            "what"
          ],
          "word": "who"
        },
        "query": [
          "what"
        ],
        "range": {
          "end": 36,
          "start": 0
        },
        "text": "who is the cat of the sister of alice",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "two": {
          "concept": true,
          "dead": true,
          "determiner": "the",
          "focusableForPhrase": true,
          "level": 1,
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 36,
              "start": 32
            },
            "text": "alice",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "alice",
            "word": "alice"
          },
          "objects": [
            {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "range": {
                "end": 13,
                "start": 7
              },
              "text": "the cat",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "cat",
              "wantsValue": true,
              "word": "cat"
            },
            {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "unknown",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "range": {
                "end": 27,
                "start": 18
              },
              "text": "the sister",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "sister",
              "wantsValue": true,
              "word": "sister"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 36,
                "start": 32
              },
              "text": "alice",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "alice",
              "word": "alice"
            }
          ],
          "pullFromContext": true,
          "range": {
            "end": 36,
            "start": 7
          },
          "text": "the cat of the sister of alice",
          "types": [
            "property",
            "unknown"
          ],
          "unknown": true,
          "value": "cat",
          "wantsValue": true,
          "word": "cat"
        },
        "word": "is"
      }
    ],
    "generatedParenthesized": [
      "",
      "",
      "((((the cat) of (the sister) of (alice)) is ((cleo))))"
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ]
          ]
        },
        {
          "counter": 8,
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "counter": 9,
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "counter": 10,
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "counter": 11,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 12,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 13,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 14,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "what",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 8,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 9,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 10,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 11,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 12,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "cat": [
              "cleo"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "sister": [
              "wendy"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble",
            "wendy",
            "sister",
            "alice",
            "cleo",
            "cat"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "cleo": [
              "cat"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "wendy": [
              "sister"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "alice": {
                "sister": {
                  "has": true,
                  "value": {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 22,
                      "start": 18
                    },
                    "text": "wendy",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "wendy",
                    "word": "wendy"
                  }
                }
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "cat": {
              },
              "cleo": {
              },
              "concept": {
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "sister": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "wendy": {
                "cat": {
                  "has": true,
                  "value": {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 42,
                      "start": 39
                    },
                    "text": "cleo",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "cleo",
                    "word": "cleo"
                  }
                }
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
            "cat": [
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 42,
                  "start": 39
                },
                "text": "cleo",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "cleo",
                "word": "cleo"
              }
            ],
            "sister": [
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 22,
                  "start": 18
                },
                "text": "wendy",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "wendy",
                "word": "wendy"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "evalue": {
              "default": true,
              "focusable": [
                "two",
                "one"
              ],
              "marker": "is",
              "one": {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "object": {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 36,
                    "start": 32
                  },
                  "text": "alice",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "alice",
                  "word": "alice"
                },
                "objects": [
                  {
                    "concept": true,
                    "dead": true,
                    "determiner": "the",
                    "focusableForPhrase": true,
                    "level": 1,
                    "marker": "property",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "range": {
                      "end": 13,
                      "start": 7
                    },
                    "text": "the cat",
                    "types": [
                      "property",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "cat",
                    "wantsValue": true,
                    "word": "cat"
                  },
                  {
                    "concept": true,
                    "dead": true,
                    "determiner": "the",
                    "focusableForPhrase": true,
                    "level": 1,
                    "marker": "unknown",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "range": {
                      "end": 27,
                      "start": 18
                    },
                    "text": "the sister",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "sister",
                    "wantsValue": true,
                    "word": "sister"
                  },
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 36,
                      "start": 32
                    },
                    "text": "alice",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "alice",
                    "word": "alice"
                  }
                ],
                "pullFromContext": true,
                "range": {
                  "end": 36,
                  "start": 7
                },
                "text": "the cat of the sister of alice",
                "types": [
                  "property",
                  "unknown"
                ],
                "unknown": true,
                "value": "cat",
                "wantsValue": true,
                "word": "cat"
              },
              "two": {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "evalue": {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 42,
                    "start": 39
                  },
                  "text": "cleo",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "cleo",
                  "word": "cleo"
                },
                "focus": true,
                "focusable": [
                  "object[0]"
                ],
                "focusableForPhrase": true,
                "instance": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "objects": [
                  {
                    "concept": true,
                    "dead": true,
                    "determiner": "the",
                    "focusableForPhrase": true,
                    "level": 1,
                    "marker": "property",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "range": {
                      "end": 13,
                      "start": 7
                    },
                    "text": "the cat",
                    "types": [
                      "property",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "cat",
                    "wantsValue": true,
                    "word": "cat"
                  },
                  {
                    "concept": true,
                    "dead": true,
                    "determiner": "the",
                    "focusableForPhrase": true,
                    "level": 1,
                    "marker": "unknown",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "range": {
                      "end": 27,
                      "start": 18
                    },
                    "text": "the sister",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "sister",
                    "wantsValue": true,
                    "word": "sister"
                  },
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 36,
                      "start": 32
                    },
                    "text": "alice",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "alice",
                    "word": "alice"
                  }
                ],
                "pullFromContext": true,
                "range": {
                  "end": 36,
                  "start": 7
                },
                "text": "the cat of the sister of alice",
                "touchedBy": [
                  "properties#call3",
                  "properties#call2"
                ],
                "types": [
                  "property",
                  "unknown"
                ],
                "unknown": true,
                "value": "cat",
                "wantsValue": true,
                "word": "cat"
              },
              "word": "is"
            },
            "isResponse": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "dead": true,
              "determined": true,
              "level": 1,
              "marker": "what",
              "modifiers": [
              ],
              "number": "one",
              "query": [
                "what"
              ],
              "range": {
                "end": 36,
                "start": 0
              },
              "text": "who",
              "types": [
                "what"
              ],
              "word": "who"
            },
            "query": [
              "what"
            ],
            "range": {
              "end": 36,
              "start": 0
            },
            "text": "who is the cat of the sister of alice",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "two": {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 36,
                  "start": 32
                },
                "text": "alice",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "alice",
                "word": "alice"
              },
              "objects": [
                {
                  "concept": true,
                  "dead": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "range": {
                    "end": 13,
                    "start": 7
                  },
                  "text": "the cat",
                  "types": [
                    "property",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "cat",
                  "wantsValue": true,
                  "word": "cat"
                },
                {
                  "concept": true,
                  "dead": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "unknown",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "range": {
                    "end": 27,
                    "start": 18
                  },
                  "text": "the sister",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "sister",
                  "wantsValue": true,
                  "word": "sister"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 36,
                    "start": 32
                  },
                  "text": "alice",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "alice",
                  "word": "alice"
                }
              ],
              "pullFromContext": true,
              "range": {
                "end": 36,
                "start": 7
              },
              "text": "the cat of the sister of alice",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "cat",
              "wantsValue": true,
              "word": "cat"
            },
            "word": "is"
          },
          "generatedParenthesized": "((((the cat) of (the sister) of (alice)) is ((cleo))))",
          "paraphrases": "who is the cat of the sister of alice?",
          "paraphrasesParenthesized": "(((who) is ((the cat) of (the sister) of (alice)))?)",
          "responses": [
            "the cat of the sister of alice is cleo"
          ]
        },
        {
          "context": {
            "dead": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "dead": true,
              "level": 1,
              "marker": "property",
              "number": "one",
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 28,
                  "start": 24
                },
                "text": "wendy",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "wendy",
                "word": "wendy"
              },
              "objects": [
                {
                  "dead": true,
                  "level": 1,
                  "marker": "property",
                  "range": {
                    "end": 34,
                    "start": 32
                  },
                  "text": "cat",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "cat",
                  "word": "cat"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 28,
                    "start": 24
                  },
                  "text": "wendy",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "wendy",
                  "word": "wendy"
                }
              ],
              "possession": true,
              "range": {
                "end": 42,
                "start": 24
              },
              "text": "wendy 's cat",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "cat",
              "word": "cat"
            },
            "range": {
              "end": 42,
              "start": 24
            },
            "text": "wendy 's cat is cleo",
            "topLevel": true,
            "touchedBy": [
              "properties#call18"
            ],
            "two": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 42,
                "start": 39
              },
              "text": "cleo",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "cleo",
              "word": "cleo"
            },
            "word": "is"
          },
          "generatedParenthesized": "",
          "paraphrases": "wendy's cat is cleo",
          "paraphrasesParenthesized": "((((wendy)'s) (cat)) is (cleo))",
          "responses": [
            "",
            ""
          ]
        },
        {
          "context": {
            "dead": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "dead": true,
              "level": 1,
              "marker": "property",
              "number": "one",
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 4,
                  "start": 0
                },
                "text": "alice",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "alice",
                "word": "alice"
              },
              "objects": [
                {
                  "dead": true,
                  "level": 1,
                  "marker": "property",
                  "range": {
                    "end": 13,
                    "start": 8
                  },
                  "text": "sister",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "sister",
                  "word": "sister"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 4,
                    "start": 0
                  },
                  "text": "alice",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "alice",
                  "word": "alice"
                }
              ],
              "possession": true,
              "range": {
                "end": 22,
                "start": 0
              },
              "text": "alice 's sister",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "sister",
              "word": "sister"
            },
            "range": {
              "end": 22,
              "start": 0
            },
            "text": "alice 's sister is wendy",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "two": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 22,
                "start": 18
              },
              "text": "wendy",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "wendy",
              "word": "wendy"
            },
            "word": "is"
          },
          "generatedParenthesized": "",
          "paraphrases": "alice's sister is wendy",
          "paraphrasesParenthesized": "((((alice)'s) (sister)) is (wendy))",
          "responses": [
            "",
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "alice's sister is wendy",
      "wendy's cat is cleo",
      "who is the cat of the sister of alice?"
    ],
    "paraphrasesParenthesized": [
      "((((alice)'s) (sister)) is (wendy))",
      "((((wendy)'s) (cat)) is (cleo))",
      "(((who) is ((the cat) of (the sister) of (alice)))?)"
    ],
    "query": "alice's sister is wendy wendy's cat is cleo\\nwho is the cat of the sister of alice",
    "responses": [
      "",
      "",
      "the cat of the sister of alice is cleo"
    ]
  },
  {
    "associations": [
      [
        [
          "object",
          0
        ],
        [
          "property",
          0
        ]
      ],
      [
        [
          "object",
          0
        ],
        [
          "property",
          0
        ],
        [
          "propertyOf",
          0
        ]
      ],
      [
        [
          "property",
          0
        ],
        [
          "propertyOf",
          0
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "default": true,
        "level": 1,
        "marker": "property",
        "object": {
          "dead": true,
          "default": true,
          "level": 1,
          "marker": "object",
          "range": {
            "end": 17,
            "start": 12
          },
          "text": "object",
          "types": [
            "object"
          ],
          "value": "object",
          "word": "object"
        },
        "objects": [
          {
            "dead": true,
            "default": true,
            "level": 1,
            "marker": "property",
            "range": {
              "end": 7,
              "start": 0
            },
            "text": "property",
            "types": [
              "property"
            ],
            "value": "property",
            "word": "property"
          },
          {
            "dead": true,
            "default": true,
            "level": 1,
            "marker": "object",
            "range": {
              "end": 17,
              "start": 12
            },
            "text": "object",
            "types": [
              "object"
            ],
            "value": "object",
            "word": "object"
          }
        ],
        "range": {
          "end": 17,
          "start": 0
        },
        "text": "property of object",
        "topLevel": true,
        "types": [
          "property"
        ],
        "value": "property",
        "word": "property"
      }
    ],
    "generatedParenthesized": [
      ""
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "object",
            0
          ],
          "ops": [
            [
              "object",
              0
            ],
            [
              "property",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "property",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "propertyOf",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "default": true,
            "level": 1,
            "marker": "property",
            "object": {
              "dead": true,
              "default": true,
              "level": 1,
              "marker": "object",
              "range": {
                "end": 17,
                "start": 12
              },
              "text": "object",
              "types": [
                "object"
              ],
              "value": "object",
              "word": "object"
            },
            "objects": [
              {
                "dead": true,
                "default": true,
                "level": 1,
                "marker": "property",
                "range": {
                  "end": 7,
                  "start": 0
                },
                "text": "property",
                "types": [
                  "property"
                ],
                "value": "property",
                "word": "property"
              },
              {
                "dead": true,
                "default": true,
                "level": 1,
                "marker": "object",
                "range": {
                  "end": 17,
                  "start": 12
                },
                "text": "object",
                "types": [
                  "object"
                ],
                "value": "object",
                "word": "object"
              }
            ],
            "range": {
              "end": 17,
              "start": 0
            },
            "text": "property of object",
            "topLevel": true,
            "types": [
              "property"
            ],
            "value": "property",
            "word": "property"
          },
          "generatedParenthesized": "",
          "paraphrases": "property of object",
          "paraphrasesParenthesized": "((property) of (object))",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "property of object"
    ],
    "paraphrasesParenthesized": [
      "((property) of (object))"
    ],
    "query": "property of object",
    "responses": [
      ""
    ]
  },
  {
    "associations": [
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          1
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "what",
          0
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "concept": true,
          "dead": true,
          "determiner": "the",
          "focusableForPhrase": true,
          "level": 1,
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "number": "one",
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 14,
              "start": 11
            },
            "text": "greg",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "range": {
                "end": 6,
                "start": 0
              },
              "text": "the age",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 14,
                "start": 11
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "range": {
            "end": 20,
            "start": 0
          },
          "text": "the age of greg",
          "types": [
            "property",
            "unknown"
          ],
          "unknown": true,
          "value": "age",
          "wantsValue": true,
          "word": "age"
        },
        "range": {
          "end": 20,
          "start": 0
        },
        "text": "the age of greg is 23",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "two": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 20,
            "start": 19
          },
          "text": "23",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "23",
          "word": "23"
        },
        "word": "is"
      },
      {
        "dead": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "concept": true,
          "dead": true,
          "determiner": "the",
          "focusableForPhrase": true,
          "level": 1,
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "number": "one",
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 43,
              "start": 40
            },
            "text": "greg",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "range": {
                "end": 35,
                "start": 22
              },
              "text": "the profession",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "profession",
              "wantsValue": true,
              "word": "profession"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 43,
                "start": 40
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "range": {
            "end": 57,
            "start": 22
          },
          "text": "the profession of greg",
          "types": [
            "property",
            "unknown"
          ],
          "unknown": true,
          "value": "profession",
          "wantsValue": true,
          "word": "profession"
        },
        "range": {
          "end": 57,
          "start": 22
        },
        "text": "the profession of greg is programmer",
        "topLevel": true,
        "touchedBy": [
          "properties#call16"
        ],
        "two": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 57,
            "start": 48
          },
          "text": "programmer",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "programmer",
          "word": "programmer"
        },
        "word": "is"
      },
      {
        "dead": true,
        "evalue": {
          "default": true,
          "focusable": [
            "two",
            "one"
          ],
          "marker": "is",
          "number": "many",
          "one": {
            "concept": true,
            "dead": true,
            "determiner": "the",
            "focusableForPhrase": true,
            "level": 1,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "object": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 89,
                "start": 86
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "objects": [
              {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "range": {
                  "end": 81,
                  "start": 68
                },
                "text": "the properties",
                "types": [
                  "property",
                  "unknown"
                ],
                "unknown": true,
                "value": "properties",
                "wantsValue": true,
                "word": "properties"
              },
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 89,
                  "start": 86
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "pullFromContext": true,
            "range": {
              "end": 89,
              "start": 68
            },
            "text": "the properties of greg",
            "types": [
              "property",
              "unknown"
            ],
            "unknown": true,
            "value": "properties",
            "wantsValue": true,
            "word": "properties"
          },
          "two": {
            "concept": true,
            "dead": true,
            "determiner": "the",
            "evalue": {
              "marker": "list",
              "value": [
                "age: 23",
                "profession: programmer"
              ]
            },
            "focus": true,
            "focusable": [
              "object[0]"
            ],
            "focusableForPhrase": true,
            "instance": true,
            "level": 1,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "objects": [
              {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "range": {
                  "end": 81,
                  "start": 68
                },
                "text": "the properties",
                "types": [
                  "property",
                  "unknown"
                ],
                "unknown": true,
                "value": "properties",
                "wantsValue": true,
                "word": "properties"
              },
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 89,
                  "start": 86
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "pullFromContext": true,
            "range": {
              "end": 89,
              "start": 68
            },
            "text": "the properties of greg",
            "touchedBy": [
              "properties#call31",
              "properties#call30"
            ],
            "types": [
              "property",
              "unknown"
            ],
            "unknown": true,
            "value": "properties",
            "wantsValue": true,
            "word": "properties"
          },
          "word": "are"
        },
        "isResponse": true,
        "level": 2,
        "marker": "is",
        "number": "many",
        "one": {
          "dead": true,
          "default": true,
          "determined": true,
          "level": 1,
          "marker": "what",
          "number": "many",
          "query": [
            "what"
          ],
          "range": {
            "end": 89,
            "start": 59
          },
          "text": "what",
          "types": [
            "what"
          ],
          "value": "what",
          "word": "what"
        },
        "query": [
          "what"
        ],
        "range": {
          "end": 89,
          "start": 59
        },
        "text": "what are the properties of greg",
        "topLevel": true,
        "touchedBy": [
          "properties#call30"
        ],
        "two": {
          "concept": true,
          "dead": true,
          "determiner": "the",
          "focusableForPhrase": true,
          "level": 1,
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 89,
              "start": 86
            },
            "text": "greg",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "range": {
                "end": 81,
                "start": 68
              },
              "text": "the properties",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "properties",
              "wantsValue": true,
              "word": "properties"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 89,
                "start": 86
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "range": {
            "end": 89,
            "start": 68
          },
          "text": "the properties of greg",
          "types": [
            "property",
            "unknown"
          ],
          "unknown": true,
          "value": "properties",
          "wantsValue": true,
          "word": "properties"
        },
        "word": "are"
      }
    ],
    "generatedParenthesized": [
      "",
      "",
      "((((the properties) of (greg)) are ((age: 23 and profession: programmer))))"
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 8,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 9,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 10,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 11,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 12,
          "op": [
            "what",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 13,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 14,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 15,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 16,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 17,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 18,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 19,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 20,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 21,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 22,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 23,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 24,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "age": [
              "23"
            ],
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "profession": [
              "programmer"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble",
            "23",
            "age",
            "greg",
            "programmer",
            "profession"
          ],
          "parents": {
            "23": [
              "age"
            ],
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "programmer": [
              "profession"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "23": {
              },
              "a": {
              },
              "age": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "greg": {
                "age": {
                  "has": true,
                  "value": {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 20,
                      "start": 19
                    },
                    "text": "23",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "23",
                    "word": "23"
                  }
                },
                "profession": {
                  "has": true,
                  "value": {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 57,
                      "start": 48
                    },
                    "text": "programmer",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "programmer",
                    "word": "programmer"
                  }
                }
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "profession": {
              },
              "programmer": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
            "age": [
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 20,
                  "start": 19
                },
                "text": "23",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "23",
                "word": "23"
              }
            ],
            "profession": [
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 57,
                  "start": 48
                },
                "text": "programmer",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "programmer",
                "word": "programmer"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "evalue": {
              "default": true,
              "focusable": [
                "two",
                "one"
              ],
              "marker": "is",
              "number": "many",
              "one": {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "object": {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 89,
                    "start": 86
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                },
                "objects": [
                  {
                    "concept": true,
                    "dead": true,
                    "determiner": "the",
                    "focusableForPhrase": true,
                    "level": 1,
                    "marker": "property",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "range": {
                      "end": 81,
                      "start": 68
                    },
                    "text": "the properties",
                    "types": [
                      "property",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "properties",
                    "wantsValue": true,
                    "word": "properties"
                  },
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 89,
                      "start": 86
                    },
                    "text": "greg",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                ],
                "pullFromContext": true,
                "range": {
                  "end": 89,
                  "start": 68
                },
                "text": "the properties of greg",
                "types": [
                  "property",
                  "unknown"
                ],
                "unknown": true,
                "value": "properties",
                "wantsValue": true,
                "word": "properties"
              },
              "two": {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "evalue": {
                  "marker": "list",
                  "value": [
                    "age: 23",
                    "profession: programmer"
                  ]
                },
                "focus": true,
                "focusable": [
                  "object[0]"
                ],
                "focusableForPhrase": true,
                "instance": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "objects": [
                  {
                    "concept": true,
                    "dead": true,
                    "determiner": "the",
                    "focusableForPhrase": true,
                    "level": 1,
                    "marker": "property",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "range": {
                      "end": 81,
                      "start": 68
                    },
                    "text": "the properties",
                    "types": [
                      "property",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "properties",
                    "wantsValue": true,
                    "word": "properties"
                  },
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 89,
                      "start": 86
                    },
                    "text": "greg",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                ],
                "pullFromContext": true,
                "range": {
                  "end": 89,
                  "start": 68
                },
                "text": "the properties of greg",
                "touchedBy": [
                  "properties#call31",
                  "properties#call30"
                ],
                "types": [
                  "property",
                  "unknown"
                ],
                "unknown": true,
                "value": "properties",
                "wantsValue": true,
                "word": "properties"
              },
              "word": "are"
            },
            "isResponse": true,
            "level": 2,
            "marker": "is",
            "number": "many",
            "one": {
              "dead": true,
              "default": true,
              "determined": true,
              "level": 1,
              "marker": "what",
              "number": "many",
              "query": [
                "what"
              ],
              "range": {
                "end": 89,
                "start": 59
              },
              "text": "what",
              "types": [
                "what"
              ],
              "value": "what",
              "word": "what"
            },
            "query": [
              "what"
            ],
            "range": {
              "end": 89,
              "start": 59
            },
            "text": "what are the properties of greg",
            "topLevel": true,
            "touchedBy": [
              "properties#call30"
            ],
            "two": {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 89,
                  "start": 86
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "dead": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "range": {
                    "end": 81,
                    "start": 68
                  },
                  "text": "the properties",
                  "types": [
                    "property",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "properties",
                  "wantsValue": true,
                  "word": "properties"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 89,
                    "start": 86
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "range": {
                "end": 89,
                "start": 68
              },
              "text": "the properties of greg",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "properties",
              "wantsValue": true,
              "word": "properties"
            },
            "word": "are"
          },
          "generatedParenthesized": "((((the properties) of (greg)) are ((age: 23 and profession: programmer))))",
          "paraphrases": "what are the properties of greg?",
          "paraphrasesParenthesized": "(((what) are ((the properties) of (greg)))?)",
          "responses": [
            "",
            "",
            "the properties of greg are age: 23 and profession: programmer"
          ]
        },
        {
          "context": {
            "dead": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "number": "one",
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 43,
                  "start": 40
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "dead": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "range": {
                    "end": 35,
                    "start": 22
                  },
                  "text": "the profession",
                  "types": [
                    "property",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "profession",
                  "wantsValue": true,
                  "word": "profession"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 43,
                    "start": 40
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "range": {
                "end": 57,
                "start": 22
              },
              "text": "the profession of greg",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "profession",
              "wantsValue": true,
              "word": "profession"
            },
            "range": {
              "end": 57,
              "start": 22
            },
            "text": "the profession of greg is programmer",
            "topLevel": true,
            "touchedBy": [
              "properties#call16"
            ],
            "two": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 57,
                "start": 48
              },
              "text": "programmer",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "programmer",
              "word": "programmer"
            },
            "word": "is"
          },
          "generatedParenthesized": "",
          "paraphrases": "the profession of greg is programmer",
          "paraphrasesParenthesized": "(((the profession) of (greg)) is (programmer))",
          "responses": [
            "",
            "",
            "the properties of greg are age: 23 and profession: programmer"
          ]
        },
        {
          "context": {
            "dead": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "number": "one",
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 14,
                  "start": 11
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "dead": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "range": {
                    "end": 6,
                    "start": 0
                  },
                  "text": "the age",
                  "types": [
                    "property",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "age",
                  "wantsValue": true,
                  "word": "age"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 14,
                    "start": 11
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "range": {
                "end": 20,
                "start": 0
              },
              "text": "the age of greg",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            "range": {
              "end": 20,
              "start": 0
            },
            "text": "the age of greg is 23",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "two": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 20,
                "start": 19
              },
              "text": "23",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "23",
              "word": "23"
            },
            "word": "is"
          },
          "generatedParenthesized": "",
          "paraphrases": "the age of greg is 23",
          "paraphrasesParenthesized": "(((the age) of (greg)) is (23))",
          "responses": [
            "",
            "",
            "the properties of greg are age: 23 and profession: programmer"
          ]
        }
      ]
    },
    "paraphrases": [
      "the age of greg is 23",
      "the profession of greg is programmer",
      "what are the properties of greg?"
    ],
    "paraphrasesParenthesized": [
      "(((the age) of (greg)) is (23))",
      "(((the profession) of (greg)) is (programmer))",
      "(((what) are ((the properties) of (greg)))?)"
    ],
    "query": "the age of greg is 23 the profession of greg is programmer what are the properties of greg",
    "responses": [
      "",
      "",
      "the properties of greg are age: 23 and profession: programmer"
    ]
  },
  {
    "associations": [
      [
        [
          "is",
          0
        ],
        [
          "possession",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "possession",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "possession",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "possession",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "possession",
          1
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          1
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "unknown",
          1
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "concept": true,
          "dead": true,
          "determiner": "the",
          "focusableForPhrase": true,
          "level": 1,
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "number": "one",
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 14,
              "start": 11
            },
            "text": "greg",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "range": {
                "end": 6,
                "start": 0
              },
              "text": "the age",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 14,
                "start": 11
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "range": {
            "end": 20,
            "start": 0
          },
          "text": "the age of greg",
          "types": [
            "property",
            "unknown"
          ],
          "unknown": true,
          "value": "age",
          "wantsValue": true,
          "word": "age"
        },
        "range": {
          "end": 20,
          "start": 0
        },
        "text": "the age of greg is 23",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "two": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 20,
            "start": 19
          },
          "text": "23",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "23",
          "word": "23"
        },
        "word": "is"
      },
      {
        "dead": true,
        "evalue": {
          "default": true,
          "focusable": [
            "two",
            "one"
          ],
          "marker": "is",
          "one": {
            "dead": true,
            "level": 1,
            "marker": "property",
            "object": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 33,
                "start": 30
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "objects": [
              {
                "dead": true,
                "level": 1,
                "marker": "property",
                "range": {
                  "end": 39,
                  "start": 37
                },
                "text": "age",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "age",
                "word": "age"
              },
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 33,
                  "start": 30
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "possession": true,
            "range": {
              "end": 39,
              "start": 30
            },
            "text": "greg 's age",
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "age",
            "word": "age"
          },
          "two": {
            "dead": true,
            "evalue": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 20,
                "start": 19
              },
              "text": "23",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "23",
              "word": "23"
            },
            "focus": true,
            "focusable": [
              "object[0]"
            ],
            "instance": true,
            "level": 1,
            "marker": "property",
            "objects": [
              {
                "dead": true,
                "level": 1,
                "marker": "property",
                "range": {
                  "end": 39,
                  "start": 37
                },
                "text": "age",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "age",
                "word": "age"
              },
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 33,
                  "start": 30
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "possession": true,
            "range": {
              "end": 39,
              "start": 30
            },
            "text": "greg 's age",
            "touchedBy": [
              "properties#call17",
              "properties#call16"
            ],
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "age",
            "word": "age"
          },
          "word": "is"
        },
        "isResponse": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "dead": true,
          "default": true,
          "determined": true,
          "level": 1,
          "marker": "what",
          "number": "one",
          "query": [
            "what"
          ],
          "range": {
            "end": 39,
            "start": 22
          },
          "text": "what",
          "types": [
            "what"
          ],
          "value": "what",
          "word": "what"
        },
        "query": [
          "what"
        ],
        "range": {
          "end": 39,
          "start": 22
        },
        "text": "what is greg 's age",
        "topLevel": true,
        "touchedBy": [
          "properties#call16"
        ],
        "two": {
          "dead": true,
          "level": 1,
          "marker": "property",
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 33,
              "start": 30
            },
            "text": "greg",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "dead": true,
              "level": 1,
              "marker": "property",
              "range": {
                "end": 39,
                "start": 37
              },
              "text": "age",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "word": "age"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 33,
                "start": 30
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "possession": true,
          "range": {
            "end": 39,
            "start": 30
          },
          "text": "greg 's age",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "age",
          "word": "age"
        },
        "word": "is"
      }
    ],
    "generatedParenthesized": [
      "",
      "(((((greg)'s) (age)) is ((23))))"
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "what",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 8,
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 9,
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 10,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 11,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 12,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 13,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 14,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 15,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "age": [
              "23"
            ],
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble",
            "23",
            "age",
            "greg"
          ],
          "parents": {
            "23": [
              "age"
            ],
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "23": {
              },
              "a": {
              },
              "age": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "greg": {
                "age": {
                  "has": true,
                  "value": {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 20,
                      "start": 19
                    },
                    "text": "23",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "23",
                    "word": "23"
                  }
                }
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
            "age": [
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 20,
                  "start": 19
                },
                "text": "23",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "23",
                "word": "23"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "evalue": {
              "default": true,
              "focusable": [
                "two",
                "one"
              ],
              "marker": "is",
              "one": {
                "dead": true,
                "level": 1,
                "marker": "property",
                "object": {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 33,
                    "start": 30
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                },
                "objects": [
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "property",
                    "range": {
                      "end": 39,
                      "start": 37
                    },
                    "text": "age",
                    "types": [
                      "property"
                    ],
                    "unknown": true,
                    "value": "age",
                    "word": "age"
                  },
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 33,
                      "start": 30
                    },
                    "text": "greg",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                ],
                "possession": true,
                "range": {
                  "end": 39,
                  "start": 30
                },
                "text": "greg 's age",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "age",
                "word": "age"
              },
              "two": {
                "dead": true,
                "evalue": {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 20,
                    "start": 19
                  },
                  "text": "23",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "23",
                  "word": "23"
                },
                "focus": true,
                "focusable": [
                  "object[0]"
                ],
                "instance": true,
                "level": 1,
                "marker": "property",
                "objects": [
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "property",
                    "range": {
                      "end": 39,
                      "start": 37
                    },
                    "text": "age",
                    "types": [
                      "property"
                    ],
                    "unknown": true,
                    "value": "age",
                    "word": "age"
                  },
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 33,
                      "start": 30
                    },
                    "text": "greg",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                ],
                "possession": true,
                "range": {
                  "end": 39,
                  "start": 30
                },
                "text": "greg 's age",
                "touchedBy": [
                  "properties#call17",
                  "properties#call16"
                ],
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "age",
                "word": "age"
              },
              "word": "is"
            },
            "isResponse": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "dead": true,
              "default": true,
              "determined": true,
              "level": 1,
              "marker": "what",
              "number": "one",
              "query": [
                "what"
              ],
              "range": {
                "end": 39,
                "start": 22
              },
              "text": "what",
              "types": [
                "what"
              ],
              "value": "what",
              "word": "what"
            },
            "query": [
              "what"
            ],
            "range": {
              "end": 39,
              "start": 22
            },
            "text": "what is greg 's age",
            "topLevel": true,
            "touchedBy": [
              "properties#call16"
            ],
            "two": {
              "dead": true,
              "level": 1,
              "marker": "property",
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 33,
                  "start": 30
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "dead": true,
                  "level": 1,
                  "marker": "property",
                  "range": {
                    "end": 39,
                    "start": 37
                  },
                  "text": "age",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "age",
                  "word": "age"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 33,
                    "start": 30
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "possession": true,
              "range": {
                "end": 39,
                "start": 30
              },
              "text": "greg 's age",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "word": "age"
            },
            "word": "is"
          },
          "generatedParenthesized": "(((((greg)'s) (age)) is ((23))))",
          "paraphrases": "what is greg's age?",
          "paraphrasesParenthesized": "(((what) is (((greg)'s) (age)))?)",
          "responses": [
            "",
            "greg's age is 23"
          ]
        },
        {
          "context": {
            "dead": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "number": "one",
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 14,
                  "start": 11
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "dead": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "range": {
                    "end": 6,
                    "start": 0
                  },
                  "text": "the age",
                  "types": [
                    "property",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "age",
                  "wantsValue": true,
                  "word": "age"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 14,
                    "start": 11
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "range": {
                "end": 20,
                "start": 0
              },
              "text": "the age of greg",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            "range": {
              "end": 20,
              "start": 0
            },
            "text": "the age of greg is 23",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "two": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 20,
                "start": 19
              },
              "text": "23",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "23",
              "word": "23"
            },
            "word": "is"
          },
          "generatedParenthesized": "",
          "paraphrases": "the age of greg is 23",
          "paraphrasesParenthesized": "(((the age) of (greg)) is (23))",
          "responses": [
            "",
            "greg's age is 23"
          ]
        }
      ]
    },
    "paraphrases": [
      "the age of greg is 23",
      "what is greg's age?"
    ],
    "paraphrasesParenthesized": [
      "(((the age) of (greg)) is (23))",
      "(((what) is (((greg)'s) (age)))?)"
    ],
    "query": "the age of greg is 23 what is greg's age",
    "responses": [
      "",
      "greg's age is 23"
    ]
  },
  {
    "associations": [
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          1
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "unknown",
          1
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "concept": true,
          "dead": true,
          "determiner": "the",
          "focusableForPhrase": true,
          "level": 1,
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "number": "one",
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 14,
              "start": 11
            },
            "text": "greg",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "range": {
                "end": 6,
                "start": 0
              },
              "text": "the age",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 14,
                "start": 11
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "range": {
            "end": 20,
            "start": 0
          },
          "text": "the age of greg",
          "types": [
            "property",
            "unknown"
          ],
          "unknown": true,
          "value": "age",
          "wantsValue": true,
          "word": "age"
        },
        "range": {
          "end": 20,
          "start": 0
        },
        "text": "the age of greg is 23",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "two": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 20,
            "start": 19
          },
          "text": "23",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "23",
          "word": "23"
        },
        "word": "is"
      },
      {
        "dead": true,
        "evalue": {
          "default": true,
          "focusable": [
            "two",
            "one"
          ],
          "marker": "is",
          "one": {
            "concept": true,
            "dead": true,
            "determiner": "the",
            "focusableForPhrase": true,
            "level": 1,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "object": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 44,
                "start": 41
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "objects": [
              {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "range": {
                  "end": 36,
                  "start": 30
                },
                "text": "the age",
                "types": [
                  "property",
                  "unknown"
                ],
                "unknown": true,
                "value": "age",
                "wantsValue": true,
                "word": "age"
              },
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 44,
                  "start": 41
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "pullFromContext": true,
            "range": {
              "end": 44,
              "start": 30
            },
            "text": "the age of greg",
            "types": [
              "property",
              "unknown"
            ],
            "unknown": true,
            "value": "age",
            "wantsValue": true,
            "word": "age"
          },
          "two": {
            "concept": true,
            "dead": true,
            "determiner": "the",
            "evalue": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 20,
                "start": 19
              },
              "text": "23",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "23",
              "word": "23"
            },
            "focus": true,
            "focusable": [
              "object[0]"
            ],
            "focusableForPhrase": true,
            "instance": true,
            "level": 1,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "objects": [
              {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "range": {
                  "end": 36,
                  "start": 30
                },
                "text": "the age",
                "types": [
                  "property",
                  "unknown"
                ],
                "unknown": true,
                "value": "age",
                "wantsValue": true,
                "word": "age"
              },
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 44,
                  "start": 41
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "pullFromContext": true,
            "range": {
              "end": 44,
              "start": 30
            },
            "text": "the age of greg",
            "touchedBy": [
              "properties#call17",
              "properties#call16"
            ],
            "types": [
              "property",
              "unknown"
            ],
            "unknown": true,
            "value": "age",
            "wantsValue": true,
            "word": "age"
          },
          "word": "is"
        },
        "isResponse": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "dead": true,
          "default": true,
          "determined": true,
          "level": 1,
          "marker": "what",
          "number": "one",
          "query": [
            "what"
          ],
          "range": {
            "end": 44,
            "start": 22
          },
          "text": "what",
          "types": [
            "what"
          ],
          "value": "what",
          "word": "what"
        },
        "query": [
          "what"
        ],
        "range": {
          "end": 44,
          "start": 22
        },
        "text": "what is the age of greg",
        "topLevel": true,
        "touchedBy": [
          "properties#call16"
        ],
        "two": {
          "concept": true,
          "dead": true,
          "determiner": "the",
          "focusableForPhrase": true,
          "level": 1,
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 44,
              "start": 41
            },
            "text": "greg",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "range": {
                "end": 36,
                "start": 30
              },
              "text": "the age",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 44,
                "start": 41
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "range": {
            "end": 44,
            "start": 30
          },
          "text": "the age of greg",
          "types": [
            "property",
            "unknown"
          ],
          "unknown": true,
          "value": "age",
          "wantsValue": true,
          "word": "age"
        },
        "word": "is"
      }
    ],
    "generatedParenthesized": [
      "",
      "((((the age) of (greg)) is ((23))))"
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 8,
          "op": [
            "what",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 9,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 10,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 11,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 12,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 13,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 14,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 15,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 16,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "age": [
              "23"
            ],
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble",
            "23",
            "age",
            "greg"
          ],
          "parents": {
            "23": [
              "age"
            ],
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "23": {
              },
              "a": {
              },
              "age": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "greg": {
                "age": {
                  "has": true,
                  "value": {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 20,
                      "start": 19
                    },
                    "text": "23",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "23",
                    "word": "23"
                  }
                }
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
            "age": [
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 20,
                  "start": 19
                },
                "text": "23",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "23",
                "word": "23"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "evalue": {
              "default": true,
              "focusable": [
                "two",
                "one"
              ],
              "marker": "is",
              "one": {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "object": {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 44,
                    "start": 41
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                },
                "objects": [
                  {
                    "concept": true,
                    "dead": true,
                    "determiner": "the",
                    "focusableForPhrase": true,
                    "level": 1,
                    "marker": "property",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "range": {
                      "end": 36,
                      "start": 30
                    },
                    "text": "the age",
                    "types": [
                      "property",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "age",
                    "wantsValue": true,
                    "word": "age"
                  },
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 44,
                      "start": 41
                    },
                    "text": "greg",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                ],
                "pullFromContext": true,
                "range": {
                  "end": 44,
                  "start": 30
                },
                "text": "the age of greg",
                "types": [
                  "property",
                  "unknown"
                ],
                "unknown": true,
                "value": "age",
                "wantsValue": true,
                "word": "age"
              },
              "two": {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "evalue": {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 20,
                    "start": 19
                  },
                  "text": "23",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "23",
                  "word": "23"
                },
                "focus": true,
                "focusable": [
                  "object[0]"
                ],
                "focusableForPhrase": true,
                "instance": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "objects": [
                  {
                    "concept": true,
                    "dead": true,
                    "determiner": "the",
                    "focusableForPhrase": true,
                    "level": 1,
                    "marker": "property",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "range": {
                      "end": 36,
                      "start": 30
                    },
                    "text": "the age",
                    "types": [
                      "property",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "age",
                    "wantsValue": true,
                    "word": "age"
                  },
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 44,
                      "start": 41
                    },
                    "text": "greg",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                ],
                "pullFromContext": true,
                "range": {
                  "end": 44,
                  "start": 30
                },
                "text": "the age of greg",
                "touchedBy": [
                  "properties#call17",
                  "properties#call16"
                ],
                "types": [
                  "property",
                  "unknown"
                ],
                "unknown": true,
                "value": "age",
                "wantsValue": true,
                "word": "age"
              },
              "word": "is"
            },
            "isResponse": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "dead": true,
              "default": true,
              "determined": true,
              "level": 1,
              "marker": "what",
              "number": "one",
              "query": [
                "what"
              ],
              "range": {
                "end": 44,
                "start": 22
              },
              "text": "what",
              "types": [
                "what"
              ],
              "value": "what",
              "word": "what"
            },
            "query": [
              "what"
            ],
            "range": {
              "end": 44,
              "start": 22
            },
            "text": "what is the age of greg",
            "topLevel": true,
            "touchedBy": [
              "properties#call16"
            ],
            "two": {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 44,
                  "start": 41
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "dead": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "range": {
                    "end": 36,
                    "start": 30
                  },
                  "text": "the age",
                  "types": [
                    "property",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "age",
                  "wantsValue": true,
                  "word": "age"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 44,
                    "start": 41
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "range": {
                "end": 44,
                "start": 30
              },
              "text": "the age of greg",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            "word": "is"
          },
          "generatedParenthesized": "((((the age) of (greg)) is ((23))))",
          "paraphrases": "what is the age of greg?",
          "paraphrasesParenthesized": "(((what) is ((the age) of (greg)))?)",
          "responses": [
            "",
            "the age of greg is 23"
          ]
        },
        {
          "context": {
            "dead": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "number": "one",
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 14,
                  "start": 11
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "dead": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "range": {
                    "end": 6,
                    "start": 0
                  },
                  "text": "the age",
                  "types": [
                    "property",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "age",
                  "wantsValue": true,
                  "word": "age"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 14,
                    "start": 11
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "range": {
                "end": 20,
                "start": 0
              },
              "text": "the age of greg",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            "range": {
              "end": 20,
              "start": 0
            },
            "text": "the age of greg is 23",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "two": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 20,
                "start": 19
              },
              "text": "23",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "23",
              "word": "23"
            },
            "word": "is"
          },
          "generatedParenthesized": "",
          "paraphrases": "the age of greg is 23",
          "paraphrasesParenthesized": "(((the age) of (greg)) is (23))",
          "responses": [
            "",
            "the age of greg is 23"
          ]
        }
      ]
    },
    "paraphrases": [
      "the age of greg is 23",
      "what is the age of greg?"
    ],
    "paraphrasesParenthesized": [
      "(((the age) of (greg)) is (23))",
      "(((what) is ((the age) of (greg)))?)"
    ],
    "query": "the age of greg is 23 what is the age of greg",
    "responses": [
      "",
      "the age of greg is 23"
    ]
  },
  {
    "associations": [
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          1
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "what",
          0
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "concept": true,
          "dead": true,
          "determiner": "the",
          "focusableForPhrase": true,
          "level": 1,
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "number": "one",
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 14,
              "start": 11
            },
            "text": "greg",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "range": {
                "end": 6,
                "start": 0
              },
              "text": "the age",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 14,
                "start": 11
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "range": {
            "end": 20,
            "start": 0
          },
          "text": "the age of greg",
          "types": [
            "property",
            "unknown"
          ],
          "unknown": true,
          "value": "age",
          "wantsValue": true,
          "word": "age"
        },
        "range": {
          "end": 20,
          "start": 0
        },
        "text": "the age of greg is 23",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "two": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 20,
            "start": 19
          },
          "text": "23",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "23",
          "word": "23"
        },
        "word": "is"
      },
      {
        "dead": true,
        "evalue": {
          "default": true,
          "focusable": [
            "two",
            "one"
          ],
          "marker": "is",
          "one": {
            "concept": true,
            "dead": true,
            "determiner": "the",
            "focusableForPhrase": true,
            "level": 1,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "object": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 22,
                "start": 19
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "objects": [
              {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "range": {
                  "end": 14,
                  "start": 8
                },
                "text": "the age",
                "types": [
                  "property",
                  "unknown"
                ],
                "unknown": true,
                "value": "age",
                "wantsValue": true,
                "word": "age"
              },
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 22,
                  "start": 19
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "pullFromContext": true,
            "range": {
              "end": 22,
              "start": 8
            },
            "text": "the age of greg",
            "types": [
              "property",
              "unknown"
            ],
            "unknown": true,
            "value": "age",
            "wantsValue": true,
            "word": "age"
          },
          "two": {
            "concept": true,
            "dead": true,
            "determiner": "the",
            "evalue": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 20,
                "start": 19
              },
              "text": "23",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "23",
              "word": "23"
            },
            "focus": true,
            "focusable": [
              "object[0]"
            ],
            "focusableForPhrase": true,
            "instance": true,
            "level": 1,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "objects": [
              {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "range": {
                  "end": 14,
                  "start": 8
                },
                "text": "the age",
                "types": [
                  "property",
                  "unknown"
                ],
                "unknown": true,
                "value": "age",
                "wantsValue": true,
                "word": "age"
              },
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 22,
                  "start": 19
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "pullFromContext": true,
            "range": {
              "end": 22,
              "start": 8
            },
            "text": "the age of greg",
            "touchedBy": [
              "properties#call3",
              "properties#call2"
            ],
            "types": [
              "property",
              "unknown"
            ],
            "unknown": true,
            "value": "age",
            "wantsValue": true,
            "word": "age"
          },
          "word": "is"
        },
        "isResponse": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "dead": true,
          "default": true,
          "determined": true,
          "level": 1,
          "marker": "what",
          "number": "one",
          "query": [
            "what"
          ],
          "range": {
            "end": 22,
            "start": 0
          },
          "text": "what",
          "types": [
            "what"
          ],
          "value": "what",
          "word": "what"
        },
        "query": [
          "what"
        ],
        "range": {
          "end": 22,
          "start": 0
        },
        "text": "what is the age of greg",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "two": {
          "concept": true,
          "dead": true,
          "determiner": "the",
          "focusableForPhrase": true,
          "level": 1,
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 22,
              "start": 19
            },
            "text": "greg",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "range": {
                "end": 14,
                "start": 8
              },
              "text": "the age",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 22,
                "start": 19
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "range": {
            "end": 22,
            "start": 8
          },
          "text": "the age of greg",
          "types": [
            "property",
            "unknown"
          ],
          "unknown": true,
          "value": "age",
          "wantsValue": true,
          "word": "age"
        },
        "word": "is"
      }
    ],
    "generatedParenthesized": [
      "",
      "((((the age) of (greg)) is ((23))))"
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 8,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "what",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 8,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "age": [
              "23"
            ],
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble",
            "23",
            "age",
            "greg"
          ],
          "parents": {
            "23": [
              "age"
            ],
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "23": {
              },
              "a": {
              },
              "age": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "greg": {
                "age": {
                  "has": true,
                  "value": {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 20,
                      "start": 19
                    },
                    "text": "23",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "23",
                    "word": "23"
                  }
                }
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
            "age": [
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 20,
                  "start": 19
                },
                "text": "23",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "23",
                "word": "23"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "evalue": {
              "default": true,
              "focusable": [
                "two",
                "one"
              ],
              "marker": "is",
              "one": {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "object": {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 22,
                    "start": 19
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                },
                "objects": [
                  {
                    "concept": true,
                    "dead": true,
                    "determiner": "the",
                    "focusableForPhrase": true,
                    "level": 1,
                    "marker": "property",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "range": {
                      "end": 14,
                      "start": 8
                    },
                    "text": "the age",
                    "types": [
                      "property",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "age",
                    "wantsValue": true,
                    "word": "age"
                  },
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 22,
                      "start": 19
                    },
                    "text": "greg",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                ],
                "pullFromContext": true,
                "range": {
                  "end": 22,
                  "start": 8
                },
                "text": "the age of greg",
                "types": [
                  "property",
                  "unknown"
                ],
                "unknown": true,
                "value": "age",
                "wantsValue": true,
                "word": "age"
              },
              "two": {
                "concept": true,
                "dead": true,
                "determiner": "the",
                "evalue": {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 20,
                    "start": 19
                  },
                  "text": "23",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "23",
                  "word": "23"
                },
                "focus": true,
                "focusable": [
                  "object[0]"
                ],
                "focusableForPhrase": true,
                "instance": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "objects": [
                  {
                    "concept": true,
                    "dead": true,
                    "determiner": "the",
                    "focusableForPhrase": true,
                    "level": 1,
                    "marker": "property",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "range": {
                      "end": 14,
                      "start": 8
                    },
                    "text": "the age",
                    "types": [
                      "property",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "age",
                    "wantsValue": true,
                    "word": "age"
                  },
                  {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 22,
                      "start": 19
                    },
                    "text": "greg",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                ],
                "pullFromContext": true,
                "range": {
                  "end": 22,
                  "start": 8
                },
                "text": "the age of greg",
                "touchedBy": [
                  "properties#call3",
                  "properties#call2"
                ],
                "types": [
                  "property",
                  "unknown"
                ],
                "unknown": true,
                "value": "age",
                "wantsValue": true,
                "word": "age"
              },
              "word": "is"
            },
            "isResponse": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "dead": true,
              "default": true,
              "determined": true,
              "level": 1,
              "marker": "what",
              "number": "one",
              "query": [
                "what"
              ],
              "range": {
                "end": 22,
                "start": 0
              },
              "text": "what",
              "types": [
                "what"
              ],
              "value": "what",
              "word": "what"
            },
            "query": [
              "what"
            ],
            "range": {
              "end": 22,
              "start": 0
            },
            "text": "what is the age of greg",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "two": {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 22,
                  "start": 19
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "dead": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "range": {
                    "end": 14,
                    "start": 8
                  },
                  "text": "the age",
                  "types": [
                    "property",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "age",
                  "wantsValue": true,
                  "word": "age"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 22,
                    "start": 19
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "range": {
                "end": 22,
                "start": 8
              },
              "text": "the age of greg",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            "word": "is"
          },
          "generatedParenthesized": "((((the age) of (greg)) is ((23))))",
          "paraphrases": "what is the age of greg?",
          "paraphrasesParenthesized": "(((what) is ((the age) of (greg)))?)",
          "responses": [
            "the age of greg is 23"
          ]
        },
        {
          "context": {
            "dead": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "number": "one",
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 14,
                  "start": 11
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "dead": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "range": {
                    "end": 6,
                    "start": 0
                  },
                  "text": "the age",
                  "types": [
                    "property",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "age",
                  "wantsValue": true,
                  "word": "age"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 14,
                    "start": 11
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "range": {
                "end": 20,
                "start": 0
              },
              "text": "the age of greg",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            "range": {
              "end": 20,
              "start": 0
            },
            "text": "the age of greg is 23",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "two": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 20,
                "start": 19
              },
              "text": "23",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "23",
              "word": "23"
            },
            "word": "is"
          },
          "generatedParenthesized": "",
          "paraphrases": "the age of greg is 23",
          "paraphrasesParenthesized": "(((the age) of (greg)) is (23))",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "the age of greg is 23",
      "what is the age of greg?"
    ],
    "paraphrasesParenthesized": [
      "(((the age) of (greg)) is (23))",
      "(((what) is ((the age) of (greg)))?)"
    ],
    "query": "the age of greg is 23\\nwhat is the age of greg",
    "responses": [
      "",
      "the age of greg is 23"
    ]
  },
  {
    "associations": [
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          1
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "readonly",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "readonly",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "unknown",
          1
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "concept": true,
          "dead": true,
          "determiner": "the",
          "focusableForPhrase": true,
          "level": 1,
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "number": "one",
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 15,
              "start": 12
            },
            "text": "greg",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "range": {
                "end": 7,
                "start": 0
              },
              "text": "the name",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "name",
              "wantsValue": true,
              "word": "name"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 15,
                "start": 12
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "range": {
            "end": 23,
            "start": 0
          },
          "text": "the name of greg",
          "types": [
            "property",
            "unknown"
          ],
          "unknown": true,
          "value": "name",
          "wantsValue": true,
          "word": "name"
        },
        "range": {
          "end": 23,
          "start": 0
        },
        "text": "the name of greg is greg",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "two": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 23,
            "start": 20
          },
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "word": "is"
      },
      {
        "dead": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "number": "one",
          "range": {
            "end": 40,
            "start": 25
          },
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "range": {
          "end": 40,
          "start": 25
        },
        "text": "greg is readonly",
        "topLevel": true,
        "touchedBy": [
          "properties#call16"
        ],
        "two": {
          "dead": true,
          "default": true,
          "level": 1,
          "marker": "readonly",
          "range": {
            "end": 40,
            "start": 33
          },
          "text": "readonly",
          "types": [
            "readonly"
          ],
          "value": "readonly",
          "word": "readonly"
        },
        "word": "is"
      }
    ],
    "generatedParenthesized": [
      "",
      ""
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "readonly",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 8,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 9,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 10,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 11,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 12,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "name": [
              "greg"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble",
            "greg",
            "name"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "greg": [
              "name"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
              "greg": {
              }
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "greg": {
                "name": {
                  "has": true,
                  "value": {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 23,
                      "start": 20
                    },
                    "text": "greg",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                }
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "name": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
            "name": [
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 23,
                  "start": 20
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "number": "one",
              "range": {
                "end": 40,
                "start": 25
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "range": {
              "end": 40,
              "start": 25
            },
            "text": "greg is readonly",
            "topLevel": true,
            "touchedBy": [
              "properties#call16"
            ],
            "two": {
              "dead": true,
              "default": true,
              "level": 1,
              "marker": "readonly",
              "range": {
                "end": 40,
                "start": 33
              },
              "text": "readonly",
              "types": [
                "readonly"
              ],
              "value": "readonly",
              "word": "readonly"
            },
            "word": "is"
          },
          "generatedParenthesized": "",
          "paraphrases": "greg is readonly",
          "paraphrasesParenthesized": "((greg) is (readonly))",
          "responses": [
            "",
            ""
          ]
        },
        {
          "context": {
            "dead": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "number": "one",
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 15,
                  "start": 12
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "dead": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "range": {
                    "end": 7,
                    "start": 0
                  },
                  "text": "the name",
                  "types": [
                    "property",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "name",
                  "wantsValue": true,
                  "word": "name"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 15,
                    "start": 12
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "range": {
                "end": 23,
                "start": 0
              },
              "text": "the name of greg",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "name",
              "wantsValue": true,
              "word": "name"
            },
            "range": {
              "end": 23,
              "start": 0
            },
            "text": "the name of greg is greg",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "two": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 23,
                "start": 20
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "word": "is"
          },
          "generatedParenthesized": "",
          "paraphrases": "the name of greg is greg",
          "paraphrasesParenthesized": "(((the name) of (greg)) is (greg))",
          "responses": [
            "",
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "the name of greg is greg",
      "greg is readonly"
    ],
    "paraphrasesParenthesized": [
      "(((the name) of (greg)) is (greg))",
      "((greg) is (readonly))"
    ],
    "query": "the name of greg is greg greg is readonly",
    "responses": [
      "",
      ""
    ]
  },
  {
    "associations": [
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          1
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "readonly",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "readonly",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "unknown",
          1
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "concept": true,
          "dead": true,
          "determiner": "the",
          "focusableForPhrase": true,
          "level": 1,
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "number": "one",
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 15,
              "start": 12
            },
            "text": "greg",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "range": {
                "end": 7,
                "start": 0
              },
              "text": "the name",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "name",
              "wantsValue": true,
              "word": "name"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 15,
                "start": 12
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "range": {
            "end": 23,
            "start": 0
          },
          "text": "the name of greg",
          "types": [
            "property",
            "unknown"
          ],
          "unknown": true,
          "value": "name",
          "wantsValue": true,
          "word": "name"
        },
        "range": {
          "end": 23,
          "start": 0
        },
        "text": "the name of greg is greg",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "two": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 23,
            "start": 20
          },
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "word": "is"
      },
      {
        "dead": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "number": "one",
          "range": {
            "end": 40,
            "start": 25
          },
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "range": {
          "end": 40,
          "start": 25
        },
        "text": "greg is readonly",
        "topLevel": true,
        "touchedBy": [
          "properties#call16"
        ],
        "two": {
          "dead": true,
          "default": true,
          "level": 1,
          "marker": "readonly",
          "range": {
            "end": 40,
            "start": 33
          },
          "text": "readonly",
          "types": [
            "readonly"
          ],
          "value": "readonly",
          "word": "readonly"
        },
        "word": "is"
      },
      {
        "dead": true,
        "evalue": [
          {
            "marker": "yesno",
            "paraphrase": true,
            "value": false
          },
          {
            "dead": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "number": "one",
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "paraphrase": true,
                "range": {
                  "end": 23,
                  "start": 17
                },
                "text": "object1",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "dead": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "paraphrase": true,
                  "pullFromContext": true,
                  "range": {
                    "end": 12,
                    "start": 0
                  },
                  "text": "the property1",
                  "types": [
                    "property",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "name",
                  "wantsValue": true,
                  "word": "name"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "paraphrase": true,
                  "range": {
                    "end": 23,
                    "start": 17
                  },
                  "text": "object1",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "paraphrase": true,
              "pullFromContext": true,
              "range": {
                "end": 33,
                "start": 0
              },
              "text": "the property1 of object1",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "name",
              "wantsValue": true,
              "word": "name"
            },
            "paraphrase": true,
            "range": {
              "end": 33,
              "start": 0
            },
            "text": "the property1 of object1 is value1",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "two": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 23,
                "start": 20
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "word": "is"
          }
        ],
        "isResponse": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "concept": true,
          "dead": true,
          "determiner": "the",
          "focusableForPhrase": true,
          "level": 1,
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "number": "one",
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 57,
              "start": 54
            },
            "text": "greg",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "range": {
                "end": 49,
                "start": 42
              },
              "text": "the name",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "name",
              "wantsValue": true,
              "word": "name"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 57,
                "start": 54
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "range": {
            "end": 65,
            "start": 42
          },
          "text": "the name of greg",
          "types": [
            "property",
            "unknown"
          ],
          "unknown": true,
          "value": "name",
          "wantsValue": true,
          "word": "name"
        },
        "range": {
          "end": 65,
          "start": 42
        },
        "text": "the name of greg is fred",
        "topLevel": true,
        "touchedBy": [
          "properties#call26"
        ],
        "two": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "range": {
            "end": 65,
            "start": 62
          },
          "text": "fred",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "fred",
          "word": "fred"
        },
        "word": "is"
      }
    ],
    "generatedParenthesized": [
      "",
      "",
      "((no) (((the name) of (greg)) is (greg)))"
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 8,
          "op": [
            "readonly",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "counter": 9,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "counter": 10,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "counter": 11,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 12,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 13,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 14,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 15,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 16,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 17,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 18,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 19,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "counter": 20,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "name": [
              "greg"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble",
            "greg",
            "name"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "greg": [
              "name"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
              "greg": {
              }
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "greg": {
                "name": {
                  "has": true,
                  "value": {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "range": {
                      "end": 23,
                      "start": 20
                    },
                    "text": "greg",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                }
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "name": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
            "name": [
              {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 23,
                  "start": 20
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "evalue": [
              {
                "marker": "yesno",
                "paraphrase": true,
                "value": false
              },
              {
                "dead": true,
                "level": 2,
                "marker": "is",
                "number": "one",
                "one": {
                  "concept": true,
                  "dead": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "number": "one",
                  "object": {
                    "dead": true,
                    "level": 1,
                    "marker": "unknown",
                    "paraphrase": true,
                    "range": {
                      "end": 23,
                      "start": 17
                    },
                    "text": "object1",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  },
                  "objects": [
                    {
                      "concept": true,
                      "dead": true,
                      "determiner": "the",
                      "focusableForPhrase": true,
                      "level": 1,
                      "marker": "property",
                      "modifiers": [
                        "determiner"
                      ],
                      "paraphrase": true,
                      "pullFromContext": true,
                      "range": {
                        "end": 12,
                        "start": 0
                      },
                      "text": "the property1",
                      "types": [
                        "property",
                        "unknown"
                      ],
                      "unknown": true,
                      "value": "name",
                      "wantsValue": true,
                      "word": "name"
                    },
                    {
                      "dead": true,
                      "level": 1,
                      "marker": "unknown",
                      "paraphrase": true,
                      "range": {
                        "end": 23,
                        "start": 17
                      },
                      "text": "object1",
                      "types": [
                        "unknown"
                      ],
                      "unknown": true,
                      "value": "greg",
                      "word": "greg"
                    }
                  ],
                  "paraphrase": true,
                  "pullFromContext": true,
                  "range": {
                    "end": 33,
                    "start": 0
                  },
                  "text": "the property1 of object1",
                  "types": [
                    "property",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "name",
                  "wantsValue": true,
                  "word": "name"
                },
                "paraphrase": true,
                "range": {
                  "end": 33,
                  "start": 0
                },
                "text": "the property1 of object1 is value1",
                "topLevel": true,
                "touchedBy": [
                  "properties#call2"
                ],
                "two": {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 23,
                    "start": 20
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                },
                "word": "is"
              }
            ],
            "isResponse": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "number": "one",
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 57,
                  "start": 54
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "dead": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "range": {
                    "end": 49,
                    "start": 42
                  },
                  "text": "the name",
                  "types": [
                    "property",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "name",
                  "wantsValue": true,
                  "word": "name"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 57,
                    "start": 54
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "range": {
                "end": 65,
                "start": 42
              },
              "text": "the name of greg",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "name",
              "wantsValue": true,
              "word": "name"
            },
            "range": {
              "end": 65,
              "start": 42
            },
            "text": "the name of greg is fred",
            "topLevel": true,
            "touchedBy": [
              "properties#call26"
            ],
            "two": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 65,
                "start": 62
              },
              "text": "fred",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "fred",
              "word": "fred"
            },
            "word": "is"
          },
          "generatedParenthesized": "((no) (((the name) of (greg)) is (greg)))",
          "paraphrases": "the name of greg is fred",
          "paraphrasesParenthesized": "(((the name) of (greg)) is (fred))",
          "responses": [
            "",
            "",
            "no the name of greg is greg"
          ]
        },
        {
          "context": {
            "dead": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "number": "one",
              "range": {
                "end": 40,
                "start": 25
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "range": {
              "end": 40,
              "start": 25
            },
            "text": "greg is readonly",
            "topLevel": true,
            "touchedBy": [
              "properties#call16"
            ],
            "two": {
              "dead": true,
              "default": true,
              "level": 1,
              "marker": "readonly",
              "range": {
                "end": 40,
                "start": 33
              },
              "text": "readonly",
              "types": [
                "readonly"
              ],
              "value": "readonly",
              "word": "readonly"
            },
            "word": "is"
          },
          "generatedParenthesized": "",
          "paraphrases": "greg is readonly",
          "paraphrasesParenthesized": "((greg) is (readonly))",
          "responses": [
            "",
            "",
            "no the name of greg is greg"
          ]
        },
        {
          "context": {
            "dead": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "number": "one",
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 15,
                  "start": 12
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "dead": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "range": {
                    "end": 7,
                    "start": 0
                  },
                  "text": "the name",
                  "types": [
                    "property",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "name",
                  "wantsValue": true,
                  "word": "name"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 15,
                    "start": 12
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "range": {
                "end": 23,
                "start": 0
              },
              "text": "the name of greg",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "name",
              "wantsValue": true,
              "word": "name"
            },
            "range": {
              "end": 23,
              "start": 0
            },
            "text": "the name of greg is greg",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "two": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 23,
                "start": 20
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "word": "is"
          },
          "generatedParenthesized": "",
          "paraphrases": "the name of greg is greg",
          "paraphrasesParenthesized": "(((the name) of (greg)) is (greg))",
          "responses": [
            "",
            "",
            "no the name of greg is greg"
          ]
        }
      ]
    },
    "paraphrases": [
      "the name of greg is greg",
      "greg is readonly",
      "the name of greg is fred"
    ],
    "paraphrasesParenthesized": [
      "(((the name) of (greg)) is (greg))",
      "((greg) is (readonly))",
      "(((the name) of (greg)) is (fred))"
    ],
    "query": "the name of greg is greg greg is readonly the name of greg is fred",
    "responses": [
      "",
      "",
      "no the name of greg is greg"
    ]
  },
  {
    "associations": [
      [
        [
          "property",
          0
        ],
        [
          "the",
          0
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "concept": true,
        "dead": true,
        "default": true,
        "determiner": "the",
        "focusableForPhrase": true,
        "level": 1,
        "marker": "property",
        "modifiers": [
          "determiner"
        ],
        "pullFromContext": true,
        "range": {
          "end": 11,
          "start": 0
        },
        "text": "the property",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "types": [
          "property"
        ],
        "value": {
          "marker": "answerNotKnown"
        },
        "wantsValue": true,
        "word": "property"
      }
    ],
    "generatedParenthesized": [
      ""
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "property",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "the",
              0
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "concept": true,
            "dead": true,
            "default": true,
            "determiner": "the",
            "focusableForPhrase": true,
            "level": 1,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "pullFromContext": true,
            "range": {
              "end": 11,
              "start": 0
            },
            "text": "the property",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "types": [
              "property"
            ],
            "value": {
              "marker": "answerNotKnown"
            },
            "wantsValue": true,
            "word": "property"
          },
          "generatedParenthesized": "",
          "paraphrases": "the property",
          "paraphrasesParenthesized": "(the property)",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "the property"
    ],
    "paraphrasesParenthesized": [
      "(the property)"
    ],
    "query": "the property",
    "responses": [
      ""
    ]
  },
  {
    "associations": [
      [
        [
          "object",
          0
        ],
        [
          "property",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ]
      ],
      [
        [
          "object",
          0
        ],
        [
          "property",
          0
        ],
        [
          "the",
          0
        ]
      ],
      [
        [
          "property",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ]
      ],
      [
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "concept": true,
        "dead": true,
        "default": true,
        "determiner": "the",
        "focusableForPhrase": true,
        "level": 1,
        "marker": "property",
        "modifiers": [
          "determiner"
        ],
        "object": {
          "dead": true,
          "default": true,
          "level": 1,
          "marker": "object",
          "range": {
            "end": 21,
            "start": 16
          },
          "text": "object",
          "types": [
            "object"
          ],
          "value": "object",
          "word": "object"
        },
        "objects": [
          {
            "concept": true,
            "dead": true,
            "default": true,
            "determiner": "the",
            "focusableForPhrase": true,
            "level": 1,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "pullFromContext": true,
            "range": {
              "end": 11,
              "start": 0
            },
            "text": "the property",
            "types": [
              "property"
            ],
            "value": "property",
            "wantsValue": true,
            "word": "property"
          },
          {
            "dead": true,
            "default": true,
            "level": 1,
            "marker": "object",
            "range": {
              "end": 21,
              "start": 16
            },
            "text": "object",
            "types": [
              "object"
            ],
            "value": "object",
            "word": "object"
          }
        ],
        "pullFromContext": true,
        "range": {
          "end": 21,
          "start": 0
        },
        "text": "the property of object",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "types": [
          "property"
        ],
        "value": {
          "marker": "answerNotKnown"
        },
        "wantsValue": true,
        "word": "property"
      }
    ],
    "generatedParenthesized": [
      ""
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "object",
            0
          ],
          "ops": [
            [
              "object",
              0
            ],
            [
              "property",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "property",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "propertyOf",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "concept": true,
            "dead": true,
            "default": true,
            "determiner": "the",
            "focusableForPhrase": true,
            "level": 1,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "object": {
              "dead": true,
              "default": true,
              "level": 1,
              "marker": "object",
              "range": {
                "end": 21,
                "start": 16
              },
              "text": "object",
              "types": [
                "object"
              ],
              "value": "object",
              "word": "object"
            },
            "objects": [
              {
                "concept": true,
                "dead": true,
                "default": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "range": {
                  "end": 11,
                  "start": 0
                },
                "text": "the property",
                "types": [
                  "property"
                ],
                "value": "property",
                "wantsValue": true,
                "word": "property"
              },
              {
                "dead": true,
                "default": true,
                "level": 1,
                "marker": "object",
                "range": {
                  "end": 21,
                  "start": 16
                },
                "text": "object",
                "types": [
                  "object"
                ],
                "value": "object",
                "word": "object"
              }
            ],
            "pullFromContext": true,
            "range": {
              "end": 21,
              "start": 0
            },
            "text": "the property of object",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "types": [
              "property"
            ],
            "value": {
              "marker": "answerNotKnown"
            },
            "wantsValue": true,
            "word": "property"
          },
          "generatedParenthesized": "",
          "paraphrases": "the property of object",
          "paraphrasesParenthesized": "((the property) of (object))",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "the property of object"
    ],
    "paraphrasesParenthesized": [
      "((the property) of (object))"
    ],
    "query": "the property of object",
    "responses": [
      ""
    ]
  },
  {
    "associations": [
      [
        [
          "object",
          0
        ],
        [
          "property",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ]
      ],
      [
        [
          "object",
          0
        ],
        [
          "property",
          0
        ],
        [
          "the",
          0
        ]
      ],
      [
        [
          "property",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ]
      ],
      [
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "concept": true,
        "dead": true,
        "default": true,
        "determiner": "the",
        "focusableForPhrase": true,
        "level": 1,
        "marker": "property",
        "modifiers": [
          "determiner"
        ],
        "object": {
          "concept": true,
          "dead": true,
          "default": true,
          "determiner": "the",
          "focusableForPhrase": true,
          "level": 1,
          "marker": "object",
          "modifiers": [
            "determiner"
          ],
          "pullFromContext": true,
          "range": {
            "end": 25,
            "start": 16
          },
          "text": "the object",
          "types": [
            "object"
          ],
          "value": "object",
          "wantsValue": true,
          "word": "object"
        },
        "objects": [
          {
            "concept": true,
            "dead": true,
            "default": true,
            "determiner": "the",
            "focusableForPhrase": true,
            "level": 1,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "pullFromContext": true,
            "range": {
              "end": 11,
              "start": 0
            },
            "text": "the property",
            "types": [
              "property"
            ],
            "value": "property",
            "wantsValue": true,
            "word": "property"
          },
          {
            "concept": true,
            "dead": true,
            "default": true,
            "determiner": "the",
            "focusableForPhrase": true,
            "level": 1,
            "marker": "object",
            "modifiers": [
              "determiner"
            ],
            "pullFromContext": true,
            "range": {
              "end": 25,
              "start": 16
            },
            "text": "the object",
            "types": [
              "object"
            ],
            "value": "object",
            "wantsValue": true,
            "word": "object"
          }
        ],
        "pullFromContext": true,
        "range": {
          "end": 25,
          "start": 0
        },
        "text": "the property of the object",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "types": [
          "property"
        ],
        "value": {
          "marker": "answerNotKnown"
        },
        "wantsValue": true,
        "word": "property"
      }
    ],
    "generatedParenthesized": [
      ""
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "object",
            0
          ],
          "ops": [
            [
              "object",
              0
            ],
            [
              "property",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "property",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "propertyOf",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "concept": true,
            "dead": true,
            "default": true,
            "determiner": "the",
            "focusableForPhrase": true,
            "level": 1,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "object": {
              "concept": true,
              "dead": true,
              "default": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "object",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "range": {
                "end": 25,
                "start": 16
              },
              "text": "the object",
              "types": [
                "object"
              ],
              "value": "object",
              "wantsValue": true,
              "word": "object"
            },
            "objects": [
              {
                "concept": true,
                "dead": true,
                "default": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "range": {
                  "end": 11,
                  "start": 0
                },
                "text": "the property",
                "types": [
                  "property"
                ],
                "value": "property",
                "wantsValue": true,
                "word": "property"
              },
              {
                "concept": true,
                "dead": true,
                "default": true,
                "determiner": "the",
                "focusableForPhrase": true,
                "level": 1,
                "marker": "object",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "range": {
                  "end": 25,
                  "start": 16
                },
                "text": "the object",
                "types": [
                  "object"
                ],
                "value": "object",
                "wantsValue": true,
                "word": "object"
              }
            ],
            "pullFromContext": true,
            "range": {
              "end": 25,
              "start": 0
            },
            "text": "the property of the object",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "types": [
              "property"
            ],
            "value": {
              "marker": "answerNotKnown"
            },
            "wantsValue": true,
            "word": "property"
          },
          "generatedParenthesized": "",
          "paraphrases": "the property of the object",
          "paraphrasesParenthesized": "((the property) of (the object))",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "the property of the object"
    ],
    "paraphrasesParenthesized": [
      "((the property) of (the object))"
    ],
    "query": "the property of the object",
    "responses": [
      ""
    ]
  },
  {
    "associations": [
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "unknown",
          1
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          1
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "the",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "what",
          0
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "evalue": {
          "verbatim": "What \"greg\" means is unknown"
        },
        "isResponse": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "dead": true,
          "default": true,
          "determined": true,
          "level": 1,
          "marker": "what",
          "number": "one",
          "query": [
            "what"
          ],
          "range": {
            "end": 22,
            "start": 0
          },
          "text": "what",
          "types": [
            "what"
          ],
          "value": "what",
          "word": "what"
        },
        "query": [
          "what"
        ],
        "range": {
          "end": 22,
          "start": 0
        },
        "text": "what is the age of greg",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "two": {
          "concept": true,
          "dead": true,
          "determiner": "the",
          "focusableForPhrase": true,
          "level": 1,
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "dead": true,
            "level": 1,
            "marker": "unknown",
            "range": {
              "end": 22,
              "start": 19
            },
            "text": "greg",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "range": {
                "end": 14,
                "start": 8
              },
              "text": "the age",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "range": {
                "end": 22,
                "start": 19
              },
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "range": {
            "end": 22,
            "start": 8
          },
          "text": "the age of greg",
          "types": [
            "property",
            "unknown"
          ],
          "unknown": true,
          "value": "age",
          "wantsValue": true,
          "word": "age"
        },
        "word": "is"
      }
    ],
    "generatedParenthesized": [
      "(What \"greg\" means is unknown)"
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "what",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 8,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "evalue": {
              "verbatim": "What \"greg\" means is unknown"
            },
            "isResponse": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "dead": true,
              "default": true,
              "determined": true,
              "level": 1,
              "marker": "what",
              "number": "one",
              "query": [
                "what"
              ],
              "range": {
                "end": 22,
                "start": 0
              },
              "text": "what",
              "types": [
                "what"
              ],
              "value": "what",
              "word": "what"
            },
            "query": [
              "what"
            ],
            "range": {
              "end": 22,
              "start": 0
            },
            "text": "what is the age of greg",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "two": {
              "concept": true,
              "dead": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "dead": true,
                "level": 1,
                "marker": "unknown",
                "range": {
                  "end": 22,
                  "start": 19
                },
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "dead": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "range": {
                    "end": 14,
                    "start": 8
                  },
                  "text": "the age",
                  "types": [
                    "property",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "age",
                  "wantsValue": true,
                  "word": "age"
                },
                {
                  "dead": true,
                  "level": 1,
                  "marker": "unknown",
                  "range": {
                    "end": 22,
                    "start": 19
                  },
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "range": {
                "end": 22,
                "start": 8
              },
              "text": "the age of greg",
              "types": [
                "property",
                "unknown"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            "word": "is"
          },
          "generatedParenthesized": "(What \"greg\" means is unknown)",
          "paraphrases": "what is the age of greg?",
          "paraphrasesParenthesized": "(((what) is ((the age) of (greg)))?)",
          "responses": [
            "What \"greg\" means is unknown"
          ]
        }
      ]
    },
    "paraphrases": [
      "what is the age of greg?"
    ],
    "paraphrasesParenthesized": [
      "(((what) is ((the age) of (greg)))?)"
    ],
    "query": "what is the age of greg",
    "responses": [
      "What \"greg\" means is unknown"
    ]
  },
  {
    "associations": [
      [
        [
          "is",
          0
        ],
        [
          "object",
          0
        ],
        [
          "property",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "object",
          0
        ],
        [
          "property",
          0
        ],
        [
          "the",
          0
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "property",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "the",
          0
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          0
        ],
        [
          "what",
          0
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "propertyOf",
          1
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "evalue": {
          "verbatim": "There is no property the property of object"
        },
        "isResponse": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "dead": true,
          "default": true,
          "determined": true,
          "level": 1,
          "marker": "what",
          "number": "one",
          "query": [
            "what"
          ],
          "range": {
            "end": 29,
            "start": 0
          },
          "text": "what",
          "types": [
            "what"
          ],
          "value": "what",
          "word": "what"
        },
        "query": [
          "what"
        ],
        "range": {
          "end": 29,
          "start": 0
        },
        "text": "what is the property of object",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "two": {
          "concept": true,
          "dead": true,
          "default": true,
          "determiner": "the",
          "focusableForPhrase": true,
          "level": 1,
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "dead": true,
            "default": true,
            "level": 1,
            "marker": "object",
            "range": {
              "end": 29,
              "start": 24
            },
            "text": "object",
            "types": [
              "object"
            ],
            "value": "object",
            "word": "object"
          },
          "objects": [
            {
              "concept": true,
              "dead": true,
              "default": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "range": {
                "end": 19,
                "start": 8
              },
              "text": "the property",
              "types": [
                "property"
              ],
              "value": "property",
              "wantsValue": true,
              "word": "property"
            },
            {
              "dead": true,
              "default": true,
              "level": 1,
              "marker": "object",
              "range": {
                "end": 29,
                "start": 24
              },
              "text": "object",
              "types": [
                "object"
              ],
              "value": "object",
              "word": "object"
            }
          ],
          "pullFromContext": true,
          "range": {
            "end": 29,
            "start": 8
          },
          "text": "the property of object",
          "types": [
            "property"
          ],
          "value": "property",
          "wantsValue": true,
          "word": "property"
        },
        "word": "is"
      }
    ],
    "generatedParenthesized": [
      "(There is no property the property of object)"
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "object",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "object",
              0
            ],
            [
              "property",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "property",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "what",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "counter": 6,
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "counter": 7,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 8,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "evalue": {
              "verbatim": "There is no property the property of object"
            },
            "isResponse": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "dead": true,
              "default": true,
              "determined": true,
              "level": 1,
              "marker": "what",
              "number": "one",
              "query": [
                "what"
              ],
              "range": {
                "end": 29,
                "start": 0
              },
              "text": "what",
              "types": [
                "what"
              ],
              "value": "what",
              "word": "what"
            },
            "query": [
              "what"
            ],
            "range": {
              "end": 29,
              "start": 0
            },
            "text": "what is the property of object",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "two": {
              "concept": true,
              "dead": true,
              "default": true,
              "determiner": "the",
              "focusableForPhrase": true,
              "level": 1,
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "dead": true,
                "default": true,
                "level": 1,
                "marker": "object",
                "range": {
                  "end": 29,
                  "start": 24
                },
                "text": "object",
                "types": [
                  "object"
                ],
                "value": "object",
                "word": "object"
              },
              "objects": [
                {
                  "concept": true,
                  "dead": true,
                  "default": true,
                  "determiner": "the",
                  "focusableForPhrase": true,
                  "level": 1,
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "range": {
                    "end": 19,
                    "start": 8
                  },
                  "text": "the property",
                  "types": [
                    "property"
                  ],
                  "value": "property",
                  "wantsValue": true,
                  "word": "property"
                },
                {
                  "dead": true,
                  "default": true,
                  "level": 1,
                  "marker": "object",
                  "range": {
                    "end": 29,
                    "start": 24
                  },
                  "text": "object",
                  "types": [
                    "object"
                  ],
                  "value": "object",
                  "word": "object"
                }
              ],
              "pullFromContext": true,
              "range": {
                "end": 29,
                "start": 8
              },
              "text": "the property of object",
              "types": [
                "property"
              ],
              "value": "property",
              "wantsValue": true,
              "word": "property"
            },
            "word": "is"
          },
          "generatedParenthesized": "(There is no property the property of object)",
          "paraphrases": "what is the property of object?",
          "paraphrasesParenthesized": "(((what) is ((the property) of (object)))?)",
          "responses": [
            "There is no property the property of object"
          ]
        }
      ]
    },
    "paraphrases": [
      "what is the property of object?"
    ],
    "paraphrasesParenthesized": [
      "(((what) is ((the property) of (object)))?)"
    ],
    "query": "what is the property of object",
    "responses": [
      "There is no property the property of object"
    ]
  },
  {
    "associations": [
      [
        [
          "property",
          0
        ],
        [
          "whose",
          0
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "default": true,
        "level": 1,
        "marker": "property",
        "modifiers": [
          "whose"
        ],
        "query": true,
        "range": {
          "end": 13,
          "start": 0
        },
        "text": "whose property",
        "topLevel": true,
        "types": [
          "property"
        ],
        "value": "property",
        "whose": "whose",
        "word": "property"
      }
    ],
    "generatedParenthesized": [
      ""
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "property",
              0
            ],
            [
              "whose",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "whose",
            0
          ],
          "ops": [
            [
              "whose",
              0
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "default": true,
            "level": 1,
            "marker": "property",
            "modifiers": [
              "whose"
            ],
            "query": true,
            "range": {
              "end": 13,
              "start": 0
            },
            "text": "whose property",
            "topLevel": true,
            "types": [
              "property"
            ],
            "value": "property",
            "whose": "whose",
            "word": "property"
          },
          "generatedParenthesized": "",
          "paraphrases": "whose property",
          "paraphrasesParenthesized": "(whose property)",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "whose property"
    ],
    "paraphrasesParenthesized": [
      "(whose property)"
    ],
    "query": "whose property",
    "responses": [
      ""
    ]
  },
  {
    "associations": [
      [
        [
          "between",
          0
        ],
        [
          "list",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "xfx",
          0
        ]
      ],
      [
        [
          "between",
          0
        ],
        [
          "list",
          1
        ],
        [
          "xfx",
          0
        ]
      ],
      [
        [
          "between",
          0
        ],
        [
          "unknown",
          0
        ],
        [
          "xfx",
          0
        ]
      ],
      [
        [
          "between",
          1
        ],
        [
          "xfx",
          0
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "arguments": {
          "default": true,
          "level": 1,
          "marker": "list",
          "range": {
            "end": 20,
            "start": 12
          },
          "text": "a1 and a2",
          "types": [
            "list"
          ],
          "value": [
            {
              "level": 0,
              "marker": "property",
              "range": {
                "end": 13,
                "start": 12
              },
              "text": "a1",
              "value": "a1",
              "word": "a1"
            },
            {
              "level": 0,
              "marker": "property",
              "range": {
                "end": 20,
                "start": 19
              },
              "text": "a2",
              "value": "a2",
              "word": "a2"
            }
          ],
          "word": "and"
        },
        "dead": true,
        "default": true,
        "level": 1,
        "marker": "xfx",
        "range": {
          "end": 20,
          "start": 0
        },
        "text": "xfx between a1 and a2",
        "topLevel": true,
        "types": [
          "xfx"
        ],
        "value": "xfx",
        "word": "xfx"
      }
    ],
    "generatedParenthesized": [
      ""
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "list",
            0
          ],
          "ops": [
            [
              "between",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "xfx",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "between",
            0
          ],
          "ops": [
            [
              "between",
              0
            ],
            [
              "property",
              0
            ],
            [
              "xfx",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "xfx",
            0
          ],
          "ops": [
            [
              "between",
              1
            ],
            [
              "xfx",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "between",
            1
          ],
          "ops": [
            [
              "between",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "arguments": {
              "default": true,
              "level": 1,
              "marker": "list",
              "range": {
                "end": 20,
                "start": 12
              },
              "text": "a1 and a2",
              "types": [
                "list"
              ],
              "value": [
                {
                  "level": 0,
                  "marker": "property",
                  "range": {
                    "end": 13,
                    "start": 12
                  },
                  "text": "a1",
                  "value": "a1",
                  "word": "a1"
                },
                {
                  "level": 0,
                  "marker": "property",
                  "range": {
                    "end": 20,
                    "start": 19
                  },
                  "text": "a2",
                  "value": "a2",
                  "word": "a2"
                }
              ],
              "word": "and"
            },
            "dead": true,
            "default": true,
            "level": 1,
            "marker": "xfx",
            "range": {
              "end": 20,
              "start": 0
            },
            "text": "xfx between a1 and a2",
            "topLevel": true,
            "types": [
              "xfx"
            ],
            "value": "xfx",
            "word": "xfx"
          },
          "generatedParenthesized": "",
          "paraphrases": "xfx between a1 and a2",
          "paraphrasesParenthesized": "(xfx between ((a1) and (a2)))",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "xfx between a1 and a2"
    ],
    "paraphrasesParenthesized": [
      "(xfx between ((a1) and (a2)))"
    ],
    "query": "xfx between a1 and a2",
    "responses": [
      ""
    ]
  },
  {
    "associations": [
      [
        [
          "a",
          0
        ],
        [
          "concept",
          0
        ],
        [
          "is",
          0
        ],
        [
          "unknown",
          0
        ]
      ],
      [
        [
          "a",
          0
        ],
        [
          "concept",
          0
        ],
        [
          "is",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "a",
          0
        ],
        [
          "is",
          0
        ],
        [
          "unknown",
          1
        ]
      ],
      [
        [
          "is",
          0
        ],
        [
          "unknown",
          1
        ]
      ]
    ],
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "xfx",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), arguments: after[0] }",
          "id": "between",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], arguments: operator.arguments }",
          "id": "between",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, number: operator.number, object.number: operator.number, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: { number: operator.number, ...before }, property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), possession: true, object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, possession: true, objects: append(default(after[0].objects, after), operator.objects), marker: after.marker, types: append(after[0].types, ['property']) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: after[0] }",
          "id": "by",
          "level": 0,
          "optional": {
            "isEder": "{ marker: 'unknown', implicit: true, concept: true }"
          }
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...after, query: ['what'], modifiers: ['what'], what: operator }",
          "id": "what",
          "level": 0,
          "optional": "{ ...next(operator), query: ['what'], determined: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true,
            "right": [
              {
                "variable": "type"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "left": [
              {
                "variable": "type"
              }
            ],
            "match": "same",
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), toObject: after[0] }",
          "id": "to",
          "level": 0,
          "where": "/home/dev/code/theprogrammablemind/kms/common/dialogues.js:215"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "toAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true, dead: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "unknown",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ number: operator.number, ...context, [context.subject].number: operator.number }",
          "id": "isEd",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdAble",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEdee",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "isEder",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }",
          "id": "is",
          "isA": [
            "verby"
          ],
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, what: operator.marker, ...context, number: operator.number, object.number: operator.number }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], focusableForPhrase: true, pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "before": [
            "verby"
          ],
          "bridge": "{ ...next(operator) }",
          "id": "thisitthat",
          "isA": [
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, types: ['reason'], isResponse: true }",
          "id": "why",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "reason",
          "isA": [
            "theAble",
            "queryable"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, unknown: true, determined: true }",
          "id": "it",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "this",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), unknown: true, pullFromContext: true }",
          "id": "that",
          "isA": [
            "thisitthat"
          ],
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "adjective",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "articlePOS",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "preposition",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "pronoun",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "verby",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "punctuation",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        },
        {
          "allowDups": true,
          "bridge": "{ ...next(operator) }",
          "id": "pokemon",
          "level": 0,
          "transitoryMode": true
        }
      ],
      "operators": [
        {
          "allowDups": true,
          "pattern": "([pokemon])"
        },
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|] ([property|]))"
        },
        {
          "pattern": "(<doesnt|> ([have/0]))"
        },
        {
          "pattern": "(([xfx]) <([between] (words))>)"
        },
        {
          "pattern": "(([queryable]) [is|] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "(([queryable]) [(<isEd|> ([isEdAble|]))])"
        },
        {
          "pattern": "([why])"
        },
        {
          "pattern": "([reason])"
        },
        {
          "pattern": "([thisitthat|])"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([this])"
        },
        {
          "pattern": "([that])"
        },
        {
          "pattern": "(<what> ([whatAble|]))"
        },
        {
          "pattern": "([what:optional])"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does|> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "(([isEdee])^ <isEdAble|> ([by] ([isEder])?))"
        },
        {
          "pattern": "([isEdee|])"
        },
        {
          "pattern": "([isEder|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "([to] ([toAble|]))"
        },
        {
          "pattern": "([adjective])"
        },
        {
          "pattern": "([articlePOS])"
        },
        {
          "pattern": "([preposition])"
        },
        {
          "pattern": "([pronoun])"
        },
        {
          "pattern": "([verby])"
        },
        {
          "pattern": "([punctuation])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "are": [
          {
            "id": "is",
            "initial": "{ number: 'many' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'many' }"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "do": [
          {
            "id": "does",
            "initial": "{ number: 'many' }"
          }
        ],
        "does": [
          {
            "id": "does",
            "initial": "{ number: 'one' }"
          }
        ],
        "doesnt": [
          {
            "id": "doesnt",
            "initial": "{ number: 'one' }"
          }
        ],
        "dont": [
          {
            "id": "doesnt",
            "initial": "{ number: 'many' }"
          }
        ],
        "has": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'one' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true, number: 'many' }"
          }
        ],
        "is": [
          {
            "id": "is",
            "initial": "{ number: 'one' }"
          },
          {
            "id": "isEd",
            "initial": "{ number: 'one' }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "pokemon": [
          {
            "id": "pokemon",
            "initial": "{ value: \"pokemon\", number: \"many\" }"
          },
          {
            "id": "pokemon",
            "initial": "{ value: \"pokemon\", number: \"one\" }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [], query: true }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "dead": true,
        "level": 2,
        "marker": "is",
        "number": "one",
        "one": {
          "dead": true,
          "level": 1,
          "marker": "unknown",
          "number": "one",
          "range": {
            "end": 19,
            "start": 0
          },
          "text": "pokemon",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "pokemon",
          "word": "pokemon"
        },
        "range": {
          "end": 19,
          "start": 0
        },
        "text": "pokemon is a concept",
        "topLevel": true,
        "touchedBy": [
          "properties#call2"
        ],
        "two": {
          "concept": true,
          "dead": true,
          "default": true,
          "determiner": {
            "default": true,
            "level": 0,
            "marker": "a",
            "range": {
              "end": 11,
              "start": 11
            },
            "text": "a",
            "word": "a"
          },
          "level": 1,
          "marker": "concept",
          "modifiers": [
            "determiner"
          ],
          "number": "one",
          "pullFromContext": false,
          "range": {
            "end": 19,
            "start": 11
          },
          "text": "a concept",
          "types": [
            "concept"
          ],
          "value": "concept",
          "wantsValue": true,
          "word": "concept"
        },
        "word": "is"
      }
    ],
    "generatedParenthesized": [
      ""
    ],
    "metadata": {
      "opChoices": [
        {
          "counter": 1,
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "a",
              0
            ],
            [
              "concept",
              0
            ],
            [
              "is",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "counter": 2,
          "op": [
            "concept",
            0
          ],
          "ops": [
            [
              "a",
              0
            ],
            [
              "concept",
              0
            ],
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 3,
          "op": [
            "a",
            0
          ],
          "ops": [
            [
              "a",
              0
            ],
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 4,
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "counter": 5,
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "nameToUUID": {
        "dialogues": "dialogues2",
        "gdefaults": "gdefaults2",
        "meta": "meta2",
        "pos": "pos2",
        "properties": "properties1",
        "stm": "stm2"
      },
      "namespaced": {
        "dialogues2": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "gdefaults2": {
        },
        "meta2": {
        },
        "pos2": {
        },
        "properties1": {
          "children": {
            "articlePOS": [
              "a",
              "the"
            ],
            "canBeDoQuestion": [
              "have"
            ],
            "canBeQuestion": [
              "have",
              "is"
            ],
            "hierarchyAble": [
              "unknown"
            ],
            "ifAble": [
              "orAble"
            ],
            "notAble": [
              "unknown"
            ],
            "object": [
              "unknown",
              "what",
              "whose"
            ],
            "pronoun": [
              "it",
              "this"
            ],
            "punctuation": [
              "questionMark"
            ],
            "queryable": [
              "concept",
              "hierarchyAble",
              "readonly",
              "property",
              "object",
              "xfx",
              "unknown",
              "it",
              "what",
              "whatAble",
              "this",
              "thisitthat",
              "reason"
            ],
            "theAble": [
              "concept",
              "property",
              "object",
              "unknown",
              "reason"
            ],
            "thisitthat": [
              "it",
              "this",
              "that"
            ],
            "toAble": [
              "it"
            ],
            "unknown": [
              "property"
            ],
            "verby": [
              "is"
            ]
          },
          "concepts": [
            "properties",
            "concept",
            "theAble",
            "queryable",
            "unknown",
            "hierarchyAble",
            "object",
            "what",
            "readonly",
            "property",
            "xfx",
            "whose",
            "have",
            "canBeDoQuestion",
            "canBeQuestion",
            "it",
            "pronoun",
            "this",
            "questionMark",
            "punctuation",
            "a",
            "articlePOS",
            "the",
            "notAble",
            "whatAble",
            "is",
            "toAble",
            "verby",
            "thisitthat",
            "reason",
            "that",
            "orAble",
            "ifAble"
          ],
          "parents": {
            "a": [
              "articlePOS"
            ],
            "concept": [
              "theAble",
              "queryable"
            ],
            "have": [
              "canBeDoQuestion",
              "canBeQuestion"
            ],
            "hierarchyAble": [
              "queryable"
            ],
            "is": [
              "canBeQuestion",
              "verby"
            ],
            "it": [
              "pronoun",
              "queryable",
              "toAble",
              "thisitthat"
            ],
            "object": [
              "queryable",
              "theAble"
            ],
            "orAble": [
              "ifAble"
            ],
            "property": [
              "queryable",
              "theAble",
              "unknown"
            ],
            "questionMark": [
              "punctuation"
            ],
            "readonly": [
              "queryable"
            ],
            "reason": [
              "theAble",
              "queryable"
            ],
            "that": [
              "thisitthat"
            ],
            "the": [
              "articlePOS"
            ],
            "this": [
              "pronoun",
              "queryable",
              "thisitthat"
            ],
            "thisitthat": [
              "queryable"
            ],
            "unknown": [
              "hierarchyAble",
              "object",
              "notAble",
              "theAble",
              "queryable"
            ],
            "what": [
              "object",
              "queryable"
            ],
            "whatAble": [
              "queryable"
            ],
            "whose": [
              "object"
            ],
            "xfx": [
              "queryable"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "a": {
              },
              "articlePOS": {
              },
              "canBeDoQuestion": {
              },
              "canBeQuestion": {
              },
              "concept": {
              },
              "have": {
              },
              "hierarchyAble": {
              },
              "ifAble": {
              },
              "is": {
              },
              "it": {
              },
              "notAble": {
              },
              "object": {
              },
              "orAble": {
              },
              "pronoun": {
              },
              "property": {
              },
              "punctuation": {
              },
              "queryable": {
              },
              "questionMark": {
              },
              "readonly": {
              },
              "reason": {
              },
              "that": {
              },
              "the": {
              },
              "theAble": {
              },
              "this": {
              },
              "thisitthat": {
              },
              "toAble": {
              },
              "unknown": {
              },
              "verby": {
              },
              "what": {
              },
              "whatAble": {
              },
              "whose": {
              },
              "xfx": {
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "stm2": {
          "mentioned": [
          ],
          "variables": {
          }
        }
      },
      "processed": [
        {
          "context": {
            "dead": true,
            "level": 2,
            "marker": "is",
            "number": "one",
            "one": {
              "dead": true,
              "level": 1,
              "marker": "unknown",
              "number": "one",
              "range": {
                "end": 19,
                "start": 0
              },
              "text": "pokemon",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "pokemon",
              "word": "pokemon"
            },
            "range": {
              "end": 19,
              "start": 0
            },
            "text": "pokemon is a concept",
            "topLevel": true,
            "touchedBy": [
              "properties#call2"
            ],
            "two": {
              "concept": true,
              "dead": true,
              "default": true,
              "determiner": {
                "default": true,
                "level": 0,
                "marker": "a",
                "range": {
                  "end": 11,
                  "start": 11
                },
                "text": "a",
                "word": "a"
              },
              "level": 1,
              "marker": "concept",
              "modifiers": [
                "determiner"
              ],
              "number": "one",
              "pullFromContext": false,
              "range": {
                "end": 19,
                "start": 11
              },
              "text": "a concept",
              "types": [
                "concept"
              ],
              "value": "concept",
              "wantsValue": true,
              "word": "concept"
            },
            "word": "is"
          },
          "generatedParenthesized": "",
          "paraphrases": "pokemon is a concept",
          "paraphrasesParenthesized": "((pokemon) is ((a) concept))",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "pokemon is a concept"
    ],
    "paraphrasesParenthesized": [
      "((pokemon) is ((a) concept))"
    ],
    "query": "pokemon is a concept",
    "responses": [
      ""
    ]
  }
]