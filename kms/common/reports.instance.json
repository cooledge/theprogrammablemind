{
  "queries": [
    "price and quantity are properties",
    "worth means price times quantity"
  ],
  "resultss": [
    {
      "hierarchy": [
        [
          "*",
          "hierarchyAble"
        ],
        [
          "*",
          "isEdee"
        ],
        [
          "*",
          "isEder"
        ],
        [
          "*",
          "mathematical_operator"
        ],
        [
          "*",
          "object"
        ],
        [
          "*",
          "property"
        ],
        [
          "*",
          "queryable"
        ],
        [
          "*",
          "theAble"
        ],
        [
          "+",
          "hierarchyAble"
        ],
        [
          "+",
          "isEdee"
        ],
        [
          "+",
          "isEder"
        ],
        [
          "+",
          "mathematical_operator"
        ],
        [
          "+",
          "object"
        ],
        [
          "+",
          "property"
        ],
        [
          "+",
          "queryable"
        ],
        [
          "+",
          "theAble"
        ],
        [
          "-",
          "hierarchyAble"
        ],
        [
          "-",
          "isEdee"
        ],
        [
          "-",
          "isEder"
        ],
        [
          "-",
          "mathematical_operator"
        ],
        [
          "-",
          "object"
        ],
        [
          "-",
          "property"
        ],
        [
          "-",
          "queryable"
        ],
        [
          "-",
          "theAble"
        ],
        [
          "/",
          "hierarchyAble"
        ],
        [
          "/",
          "isEdee"
        ],
        [
          "/",
          "isEder"
        ],
        [
          "/",
          "mathematical_operator"
        ],
        [
          "/",
          "object"
        ],
        [
          "/",
          "property"
        ],
        [
          "/",
          "queryable"
        ],
        [
          "/",
          "theAble"
        ],
        [
          "a",
          "articlePOS"
        ],
        [
          "action",
          "action"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "ascending",
          "ordering"
        ],
        [
          "call",
          "verby"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "changeable",
          "changeable"
        ],
        [
          "changes",
          "event"
        ],
        [
          "changes",
          "verby"
        ],
        [
          "column",
          "toAble"
        ],
        [
          "column",
          "to_after_column_toAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "descending",
          "ordering"
        ],
        [
          "describe",
          "verby"
        ],
        [
          "direction",
          "direction"
        ],
        [
          "divideBy",
          "mathematicalOperator"
        ],
        [
          "divideBy",
          "number"
        ],
        [
          "divideBy",
          "property"
        ],
        [
          "divideBy",
          "queryable"
        ],
        [
          "event",
          "event"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "left",
          "direction"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mathematical",
          "hierarchyAble"
        ],
        [
          "mathematical",
          "isEdee"
        ],
        [
          "mathematical",
          "isEder"
        ],
        [
          "mathematical",
          "object"
        ],
        [
          "mathematical",
          "property"
        ],
        [
          "mathematical",
          "queryable"
        ],
        [
          "mathematical",
          "theAble"
        ],
        [
          "mathematicalExpression",
          "concept"
        ],
        [
          "mathematicalOperator",
          "mathematicalOperator"
        ],
        [
          "mathematical_operator",
          "concept"
        ],
        [
          "mathematical_operator",
          "hierarchyAble"
        ],
        [
          "mathematical_operator",
          "isEdee"
        ],
        [
          "mathematical_operator",
          "isEder"
        ],
        [
          "mathematical_operator",
          "object"
        ],
        [
          "mathematical_operator",
          "property"
        ],
        [
          "mathematical_operator",
          "queryable"
        ],
        [
          "mathematical_operator",
          "theAble"
        ],
        [
          "minus",
          "mathematicalOperator"
        ],
        [
          "minus",
          "number"
        ],
        [
          "minus",
          "property"
        ],
        [
          "minus",
          "queryable"
        ],
        [
          "move",
          "reportAction"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "operator",
          "concept"
        ],
        [
          "operator",
          "hierarchyAble"
        ],
        [
          "operator",
          "isEdee"
        ],
        [
          "operator",
          "isEder"
        ],
        [
          "operator",
          "object"
        ],
        [
          "operator",
          "property"
        ],
        [
          "operator",
          "queryable"
        ],
        [
          "operator",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "ordering",
          "ordering"
        ],
        [
          "plus",
          "mathematicalOperator"
        ],
        [
          "plus",
          "number"
        ],
        [
          "plus",
          "property"
        ],
        [
          "plus",
          "queryable"
        ],
        [
          "price",
          "number"
        ],
        [
          "price",
          "property"
        ],
        [
          "product",
          "the_after_product_property_theAble"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "the_after_product_property_theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "quantity",
          "number"
        ],
        [
          "quantity",
          "property"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "remove",
          "reportAction"
        ],
        [
          "report",
          "changeable"
        ],
        [
          "report",
          "it"
        ],
        [
          "report",
          "theAble"
        ],
        [
          "report",
          "this"
        ],
        [
          "reportAction",
          "reportAction"
        ],
        [
          "right",
          "direction"
        ],
        [
          "show",
          "action"
        ],
        [
          "show",
          "verby"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "the_after_product_property_theAble"
        ],
        [
          "the_after_product_property_theAble",
          "the_after_product_property_theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "times",
          "mathematicalOperator"
        ],
        [
          "times",
          "number"
        ],
        [
          "times",
          "property"
        ],
        [
          "times",
          "queryable"
        ],
        [
          "toAble",
          "to_after_column_toAble"
        ],
        [
          "to_after_column_toAble",
          "to_after_column_toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "price",
                0
              ],
              [
                "property",
                0
              ],
              [
                "quantity",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "price",
                0
              ],
              [
                "property",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "price",
                0
              ],
              [
                "property",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "property",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "property",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "property",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 5
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. price/0  - \"price\"\n                                   default: True\n                                   marker: Operator(price/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: price\n                                   value: price\n                                   word: price\n    1. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 8}\n                                   text: and\n                                   word: and\n    2. quantity/0  - \"quantity\"\n                                   default: True\n                                   marker: Operator(quantity/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 10, 'end': 17}\n                                   text: quantity\n                                   value: quantity\n                                   word: quantity\n    3. is/0  - \"are\"\n                                   marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 19, 'end': 21}\n                                   text: are\n                                   word: are\n    4. property/0  - \"properties\"\n                                   default: True\n                                   marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 23, 'end': 32}\n                                   text: properties\n                                   word: properties\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 8}, text: and, word: and})\n\n>>>>>>>>>>>>> Counter 2\n   *0. list/1  - \"price and quantity\"\n                                   default: True\n                                   marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['property', 'quantifier', 'notAble', 'hierarchyAble', 'queryable', 'unknown', 'theAble', 'quantity', 'number', 'object']}) bridge(bridge))\n                                   range: {'start': 0, 'end': 17}\n                                   text: price and quantity\n                                   types: [\n                                   ]\n                                   value: [\n                                     default: True\n                                     marker: Operator(price/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: price\n                                     value: price\n                                     word: price\n\n                                     default: True\n                                     marker: Operator(quantity/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 17}\n                                     text: quantity\n                                     value: quantity\n                                     word: quantity\n                                   ]\n                                   word: and\n    1. is/0  - \"are\"\n                                   marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 19, 'end': 21}\n                                   text: are\n                                   word: are\n    2. property/0  - \"properties\"\n                                   default: True\n                                   marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 23, 'end': 32}\n                                   text: properties\n                                   word: properties\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['property', 'quantifier', 'notAble', 'hierarchyAble', 'queryable', 'unknown', 'theAble', 'quantity', 'number', 'object']}) bridge(bridge)), range: {'start': 0, 'end': 17}, text: price and quantity, types: [], value: [Context({default: True, marker: Operator(price/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: price, value: price, word: price}), Context({default: True, marker: Operator(quantity/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 10, 'end': 17}, text: quantity, value: quantity, word: quantity})], word: and})Next Op (index=0) is Context({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['property', 'quantifier', 'notAble', 'hierarchyAble', 'queryable', 'unknown', 'theAble', 'quantity', 'number', 'object']}) bridge(bridge)), range: {'start': 0, 'end': 17}, text: price and quantity, types: [], value: [Context({default: True, marker: Operator(price/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: price, value: price, word: price}), Context({default: True, marker: Operator(quantity/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 10, 'end': 17}, text: quantity, value: quantity, word: quantity})], word: and})\n\n>>>>>>>>>>>>> Counter 3\n   *0. list/1  - \"None\"\n                                   marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['property', 'quantifier', 'notAble', 'hierarchyAble', 'queryable', 'unknown', 'theAble', 'quantity', 'number', 'object']}) bridge(bridge))\n                                   range: {'start': 0, 'end': 17}\n                                   value: [\n                                     default: True\n                                     marker: Operator(price/1, None, evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: price\n                                     value: price\n                                     word: price\n\n                                     default: True\n                                     marker: Operator(quantity/1, None, evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 17}\n                                     text: quantity\n                                     value: quantity\n                                     word: quantity\n                                   ]\n    1. is/0  - \"are\"\n                                   marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 19, 'end': 21}\n                                   text: are\n                                   word: are\n    2. property/0  - \"properties\"\n                                   default: True\n                                   marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 23, 'end': 32}\n                                   text: properties\n                                   word: properties\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['property', 'quantifier', 'notAble', 'hierarchyAble', 'queryable', 'unknown', 'theAble', 'quantity', 'number', 'object']}) bridge(bridge)), range: {'start': 0, 'end': 17}, value: [Context({default: True, marker: Operator(price/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: price, value: price, word: price}), Context({default: True, marker: Operator(quantity/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 10, 'end': 17}, text: quantity, value: quantity, word: quantity})]})Next Op (index=2) is Context({default: True, marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: properties, word: properties})\n\n>>>>>>>>>>>>> Counter 4\n    0. list/1  - \"None\"\n                                   marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['property', 'quantifier', 'notAble', 'hierarchyAble', 'queryable', 'unknown', 'theAble', 'quantity', 'number', 'object']}) bridge(bridge))\n                                   range: {'start': 0, 'end': 17}\n                                   value: [\n                                     default: True\n                                     marker: Operator(price/1, None, evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: price\n                                     value: price\n                                     word: price\n\n                                     default: True\n                                     marker: Operator(quantity/1, None, evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 10, 'end': 17}\n                                     text: quantity\n                                     value: quantity\n                                     word: quantity\n                                   ]\n    1. is/0  - \"are\"\n                                   marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 19, 'end': 21}\n                                   text: are\n                                   word: are\n   *2. property/1  - \"properties\"\n                                   default: True\n                                   marker: Operator(property/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 23, 'end': 32}\n                                   text: properties\n                                   word: properties\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['property', 'quantifier', 'notAble', 'hierarchyAble', 'queryable', 'unknown', 'theAble', 'quantity', 'number', 'object']}) bridge(bridge)), range: {'start': 0, 'end': 17}, value: [Context({default: True, marker: Operator(price/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: price, value: price, word: price}), Context({default: True, marker: Operator(quantity/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 10, 'end': 17}, text: quantity, value: quantity, word: quantity})]})Next Op (index=1) is Context({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 21}, text: are, word: are})\n\n>>>>>>>>>>>>> Counter 5\n   *0. is/1  - \" are properties\"\n                                   marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['property', 'quantifier', 'notAble', 'hierarchyAble', 'queryable', 'unknown', 'theAble', 'quantity', 'number', 'object']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 32}, types: ['price'], value: [Context({default: True, marker: Operator(price/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: price, value: price, word: price}), Context({default: True, marker: Operator(quantity/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 10, 'end': 17}, text: quantity, value: quantity, word: quantity})]})\n                                   range: {'start': 0, 'end': 32}\n                                   text:  are properties\n                                   two: Context({default: True, marker: Operator(property/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: properties, types: ['property'], word: properties})\n                                   word: are\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['property', 'quantifier', 'notAble', 'hierarchyAble', 'queryable', 'unknown', 'theAble', 'quantity', 'number', 'object']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 32}, types: ['price'], value: [Context({default: True, marker: Operator(price/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: price, value: price, word: price}), Context({default: True, marker: Operator(quantity/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 10, 'end': 17}, text: quantity, value: quantity, word: quantity})]}), range: {'start': 0, 'end': 32}, text:  are properties, two: Context({default: True, marker: Operator(property/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: properties, types: ['property'], word: properties}), word: are})\n\n>>>>>>>>>>>>> Counter 6\n   *0. is/2  - \" are properties\"\n                                   marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['property', 'quantifier', 'notAble', 'hierarchyAble', 'queryable', 'unknown', 'theAble', 'quantity', 'number', 'object']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 32}, types: ['price'], value: [Context({default: True, marker: Operator(price/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: price, value: price, word: price}), Context({default: True, marker: Operator(quantity/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 10, 'end': 17}, text: quantity, value: quantity, word: quantity})]})\n                                   range: {'start': 0, 'end': 32}\n                                   text:  are properties\n                                   two: Context({default: True, marker: Operator(property/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: properties, types: ['property'], word: properties})\n                                   word: are\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "many",
          "text": " are properties",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 32
          },
          "one": {
            "number": "many",
            "marker": "list",
            "value": [
              {
                "marker": "price",
                "value": "price",
                "default": true,
                "text": "price",
                "word": "price",
                "range": {
                  "start": 0,
                  "end": 4
                },
                "level": 1
              },
              {
                "marker": "quantity",
                "value": "quantity",
                "default": true,
                "text": "quantity",
                "word": "quantity",
                "range": {
                  "start": 10,
                  "end": 17
                },
                "level": 1
              }
            ],
            "range": {
              "start": 0,
              "end": 32
            },
            "types": [
              "list",
              "price"
            ],
            "level": 1
          },
          "two": {
            "marker": "property",
            "default": true,
            "word": "properties",
            "text": "properties",
            "range": {
              "start": 23,
              "end": 32
            },
            "types": [
              "property"
            ],
            "level": 1,
            "concept": true
          },
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "reports#call2"
          ]
        }
      ],
      "generated": [
        "price and quantity are properties"
      ],
      "paraphrases": [
        "price and quantity are properties"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "price",
            0
          ],
          [
            "property",
            0
          ],
          [
            "quantity",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "property",
            0
          ]
        ],
        [
          [
            "price",
            0
          ],
          [
            "quantity",
            0
          ]
        ]
      ],
      "query": "price and quantity are properties",
      "key": {
        "query": "price and quantity are properties"
      }
    },
    {
      "hierarchy": [
        [
          "*",
          "hierarchyAble"
        ],
        [
          "*",
          "isEdee"
        ],
        [
          "*",
          "isEder"
        ],
        [
          "*",
          "mathematical_operator"
        ],
        [
          "*",
          "object"
        ],
        [
          "*",
          "property"
        ],
        [
          "*",
          "queryable"
        ],
        [
          "*",
          "theAble"
        ],
        [
          "+",
          "hierarchyAble"
        ],
        [
          "+",
          "isEdee"
        ],
        [
          "+",
          "isEder"
        ],
        [
          "+",
          "mathematical_operator"
        ],
        [
          "+",
          "object"
        ],
        [
          "+",
          "property"
        ],
        [
          "+",
          "queryable"
        ],
        [
          "+",
          "theAble"
        ],
        [
          "-",
          "hierarchyAble"
        ],
        [
          "-",
          "isEdee"
        ],
        [
          "-",
          "isEder"
        ],
        [
          "-",
          "mathematical_operator"
        ],
        [
          "-",
          "object"
        ],
        [
          "-",
          "property"
        ],
        [
          "-",
          "queryable"
        ],
        [
          "-",
          "theAble"
        ],
        [
          "/",
          "hierarchyAble"
        ],
        [
          "/",
          "isEdee"
        ],
        [
          "/",
          "isEder"
        ],
        [
          "/",
          "mathematical_operator"
        ],
        [
          "/",
          "object"
        ],
        [
          "/",
          "property"
        ],
        [
          "/",
          "queryable"
        ],
        [
          "/",
          "theAble"
        ],
        [
          "a",
          "articlePOS"
        ],
        [
          "action",
          "action"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "ascending",
          "ordering"
        ],
        [
          "call",
          "verby"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "changeable",
          "changeable"
        ],
        [
          "changes",
          "event"
        ],
        [
          "changes",
          "verby"
        ],
        [
          "column",
          "toAble"
        ],
        [
          "column",
          "to_after_column_toAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "descending",
          "ordering"
        ],
        [
          "describe",
          "verby"
        ],
        [
          "direction",
          "direction"
        ],
        [
          "divideBy",
          "mathematicalOperator"
        ],
        [
          "divideBy",
          "number"
        ],
        [
          "divideBy",
          "property"
        ],
        [
          "divideBy",
          "queryable"
        ],
        [
          "event",
          "event"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "left",
          "direction"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mathematical",
          "hierarchyAble"
        ],
        [
          "mathematical",
          "isEdee"
        ],
        [
          "mathematical",
          "isEder"
        ],
        [
          "mathematical",
          "object"
        ],
        [
          "mathematical",
          "property"
        ],
        [
          "mathematical",
          "queryable"
        ],
        [
          "mathematical",
          "theAble"
        ],
        [
          "mathematicalExpression",
          "concept"
        ],
        [
          "mathematicalOperator",
          "mathematicalOperator"
        ],
        [
          "mathematical_operator",
          "concept"
        ],
        [
          "mathematical_operator",
          "hierarchyAble"
        ],
        [
          "mathematical_operator",
          "isEdee"
        ],
        [
          "mathematical_operator",
          "isEder"
        ],
        [
          "mathematical_operator",
          "object"
        ],
        [
          "mathematical_operator",
          "property"
        ],
        [
          "mathematical_operator",
          "queryable"
        ],
        [
          "mathematical_operator",
          "theAble"
        ],
        [
          "minus",
          "mathematicalOperator"
        ],
        [
          "minus",
          "number"
        ],
        [
          "minus",
          "property"
        ],
        [
          "minus",
          "queryable"
        ],
        [
          "move",
          "reportAction"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "operator",
          "concept"
        ],
        [
          "operator",
          "hierarchyAble"
        ],
        [
          "operator",
          "isEdee"
        ],
        [
          "operator",
          "isEder"
        ],
        [
          "operator",
          "object"
        ],
        [
          "operator",
          "property"
        ],
        [
          "operator",
          "queryable"
        ],
        [
          "operator",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "ordering",
          "ordering"
        ],
        [
          "plus",
          "mathematicalOperator"
        ],
        [
          "plus",
          "number"
        ],
        [
          "plus",
          "property"
        ],
        [
          "plus",
          "queryable"
        ],
        [
          "price",
          "number"
        ],
        [
          "price",
          "property"
        ],
        [
          "product",
          "the_after_product_property_theAble"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "the_after_product_property_theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "quantity",
          "number"
        ],
        [
          "quantity",
          "property"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "remove",
          "reportAction"
        ],
        [
          "report",
          "changeable"
        ],
        [
          "report",
          "it"
        ],
        [
          "report",
          "theAble"
        ],
        [
          "report",
          "this"
        ],
        [
          "reportAction",
          "reportAction"
        ],
        [
          "right",
          "direction"
        ],
        [
          "show",
          "action"
        ],
        [
          "show",
          "verby"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "the_after_product_property_theAble"
        ],
        [
          "the_after_product_property_theAble",
          "the_after_product_property_theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "times",
          "mathematicalOperator"
        ],
        [
          "times",
          "number"
        ],
        [
          "times",
          "property"
        ],
        [
          "times",
          "queryable"
        ],
        [
          "toAble",
          "to_after_column_toAble"
        ],
        [
          "to_after_column_toAble",
          "to_after_column_toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "means",
                0
              ],
              [
                "price",
                0
              ],
              [
                "quantity",
                0
              ],
              [
                "times",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "price",
              0
            ],
            "ops": [
              [
                "means",
                0
              ],
              [
                "price",
                0
              ],
              [
                "quantity",
                0
              ],
              [
                "times",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "quantity",
              0
            ],
            "ops": [
              [
                "means",
                0
              ],
              [
                "quantity",
                0
              ],
              [
                "times",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "times",
              0
            ],
            "ops": [
              [
                "means",
                0
              ],
              [
                "times",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "means",
              0
            ],
            "ops": [
              [
                "means",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 5
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"worth\"\n                                   marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: worth\n                                   value: worth\n                                   word: worth\n    1. means/0  - \"means\"\n                                   default: True\n                                   marker: Operator(means/0, None, evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 10}\n                                   text: means\n                                   value: means\n                                   word: means\n    2. price/0  - \"price\"\n                                   default: True\n                                   marker: Operator(price/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 12, 'end': 16}\n                                   text: price\n                                   value: price\n                                   word: price\n    3. times/0  - \"times\"\n                                   default: True\n                                   marker: Operator(times/0, None, evaluator(Bridge('{ ...next(operator), value: null, types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), x: before[0], y: after[0], value: null, number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 18, 'end': 22}\n                                   text: times\n                                   value: times\n                                   word: times\n    4. quantity/0  - \"quantity\"\n                                   default: True\n                                   marker: Operator(quantity/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 24, 'end': 31}\n                                   text: quantity\n                                   value: quantity\n                                   word: quantity\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: worth, value: worth, word: worth})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1  - \"worth\"\n                                   marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: worth\n                                   unknown: True\n                                   value: worth\n                                   word: worth\n    1. means/0  - \"means\"\n                                   default: True\n                                   marker: Operator(means/0, None, evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 10}\n                                   text: means\n                                   value: means\n                                   word: means\n    2. price/0  - \"price\"\n                                   default: True\n                                   marker: Operator(price/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 12, 'end': 16}\n                                   text: price\n                                   value: price\n                                   word: price\n    3. times/0  - \"times\"\n                                   default: True\n                                   marker: Operator(times/0, None, evaluator(Bridge('{ ...next(operator), value: null, types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), x: before[0], y: after[0], value: null, number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 18, 'end': 22}\n                                   text: times\n                                   value: times\n                                   word: times\n    4. quantity/0  - \"quantity\"\n                                   default: True\n                                   marker: Operator(quantity/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 24, 'end': 31}\n                                   text: quantity\n                                   value: quantity\n                                   word: quantity\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, marker: Operator(price/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 16}, text: price, value: price, word: price})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1  - \"worth\"\n                                   marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: worth\n                                   unknown: True\n                                   value: worth\n                                   word: worth\n    1. means/0  - \"means\"\n                                   default: True\n                                   marker: Operator(means/0, None, evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 10}\n                                   text: means\n                                   value: means\n                                   word: means\n   *2. price/1  - \"price\"\n                                   default: True\n                                   marker: Operator(price/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 12, 'end': 16}\n                                   text: price\n                                   value: price\n                                   word: price\n    3. times/0  - \"times\"\n                                   default: True\n                                   marker: Operator(times/0, None, evaluator(Bridge('{ ...next(operator), value: null, types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), x: before[0], y: after[0], value: null, number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 18, 'end': 22}\n                                   text: times\n                                   value: times\n                                   word: times\n    4. quantity/0  - \"quantity\"\n                                   default: True\n                                   marker: Operator(quantity/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 24, 'end': 31}\n                                   text: quantity\n                                   value: quantity\n                                   word: quantity\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({default: True, marker: Operator(quantity/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 31}, text: quantity, value: quantity, word: quantity})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1  - \"worth\"\n                                   marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: worth\n                                   unknown: True\n                                   value: worth\n                                   word: worth\n    1. means/0  - \"means\"\n                                   default: True\n                                   marker: Operator(means/0, None, evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 10}\n                                   text: means\n                                   value: means\n                                   word: means\n    2. price/1  - \"price\"\n                                   default: True\n                                   marker: Operator(price/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 12, 'end': 16}\n                                   text: price\n                                   value: price\n                                   word: price\n    3. times/0  - \"times\"\n                                   default: True\n                                   marker: Operator(times/0, None, evaluator(Bridge('{ ...next(operator), value: null, types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), x: before[0], y: after[0], value: null, number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 18, 'end': 22}\n                                   text: times\n                                   value: times\n                                   word: times\n   *4. quantity/1  - \"quantity\"\n                                   default: True\n                                   marker: Operator(quantity/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 24, 'end': 31}\n                                   text: quantity\n                                   value: quantity\n                                   word: quantity\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({default: True, marker: Operator(times/0, None, evaluator(Bridge('{ ...next(operator), value: null, types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), x: before[0], y: after[0], value: null, number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge)), range: {'start': 18, 'end': 22}, text: times, value: times, word: times})\n\n>>>>>>>>>>>>> Counter 5\n    0. unknown/1  - \"worth\"\n                                   marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: worth\n                                   unknown: True\n                                   value: worth\n                                   word: worth\n    1. means/0  - \"means\"\n                                   default: True\n                                   marker: Operator(means/0, None, evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 10}\n                                   text: means\n                                   value: means\n                                   word: means\n   *2. times/1  - \"price times quantity\"\n                                   default: True\n                                   evaluate: True\n                                   isResponse: True\n                                   marker: Operator(times/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 12, 'end': 31}\n                                   text: price times quantity\n                                   types: [\n                                   'queryable'\n,                                    'theAble'\n                                   ]\n                                   value: None\n                                   word: times\n                                   x: Context({default: True, marker: Operator(price/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 12, 'end': 16}, text: price, types: ['price'], value: price, word: price})\n                                   y: Context({default: True, marker: Operator(quantity/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 24, 'end': 31}, text: quantity, types: ['quantity'], value: quantity, word: quantity})\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({default: True, marker: Operator(means/0, None, evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 10}, text: means, value: means, word: means})\n\n>>>>>>>>>>>>> Counter 6\n   *0. means/1  - \"worth means price times quantity\"\n                                   default: True\n                                   from: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: worth, unknown: True, value: worth, word: worth})\n                                   marker: Operator(means/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 31}\n                                   text: worth means price times quantity\n                                   to: Context({default: True, evaluate: True, isResponse: True, marker: Operator(times/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 12, 'end': 31}, text: price times quantity, types: ['queryable', 'theAble'], value: None, word: times, x: Context({default: True, marker: Operator(price/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 12, 'end': 16}, text: price, types: ['price'], value: price, word: price}), y: Context({default: True, marker: Operator(quantity/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 24, 'end': 31}, text: quantity, types: ['quantity'], value: quantity, word: quantity})})\n                                   value: means\n                                   word: means\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "marker": "means",
          "value": "means",
          "default": true,
          "text": "worth means price times quantity",
          "word": "means",
          "range": {
            "start": 0,
            "end": 31
          },
          "from": {
            "marker": "unknown",
            "range": {
              "start": 0,
              "end": 4
            },
            "word": "worth",
            "text": "worth",
            "value": "worth",
            "unknown": true,
            "level": 1
          },
          "to": {
            "marker": "times",
            "value": null,
            "default": true,
            "text": "price times quantity",
            "word": "times",
            "range": {
              "start": 12,
              "end": 31
            },
            "types": [
              "queryable",
              "theAble",
              "times"
            ],
            "x": {
              "marker": "price",
              "value": "price",
              "default": true,
              "text": "price",
              "word": "price",
              "range": {
                "start": 12,
                "end": 16
              },
              "types": [
                "price"
              ],
              "level": 1
            },
            "y": {
              "marker": "quantity",
              "value": "quantity",
              "default": true,
              "text": "quantity",
              "word": "quantity",
              "range": {
                "start": 24,
                "end": 31
              },
              "types": [
                "quantity"
              ],
              "level": 1
            },
            "number": "one",
            "isResponse": true,
            "evaluate": true,
            "level": 1
          },
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "reports#call2"
          ]
        }
      ],
      "generated": [
        "means"
      ],
      "paraphrases": [
        "worth means price times quantity"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "means",
            0
          ],
          [
            "price",
            0
          ],
          [
            "quantity",
            0
          ],
          [
            "times",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "price",
            0
          ],
          [
            "quantity",
            0
          ],
          [
            "times",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "quantity",
            0
          ],
          [
            "times",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "times",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "means",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "query": "worth means price times quantity",
      "key": {
        "query": "worth means price times quantity"
      }
    }
  ],
  "fragments": [],
  "semantics": [],
  "associations": [
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "price",
        0
      ],
      [
        "property",
        0
      ],
      [
        "quantity",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "property",
        0
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "price",
        0
      ],
      [
        "quantity",
        0
      ],
      [
        "times",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "price",
        0
      ],
      [
        "quantity",
        0
      ],
      [
        "times",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "quantity",
        0
      ],
      [
        "times",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "times",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "means",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "price",
        0
      ],
      [
        "quantity",
        0
      ]
    ]
  ]
}