{
  "queries": [
    "years hours minutes and seconds are units of time",
    "hours = minutes / 60",
    "minutes = hours * 60",
    "seconds = minutes * 60",
    "minutes = seconds / 60",
    "day = hours / 24",
    "hours = days * 24"
  ],
  "resultss": [
    {
      "hierarchy": [
        [
          "*",
          "hierarchyAble"
        ],
        [
          "*",
          "isEdee"
        ],
        [
          "*",
          "isEder"
        ],
        [
          "*",
          "mathematical_operator"
        ],
        [
          "*",
          "object"
        ],
        [
          "*",
          "property"
        ],
        [
          "*",
          "queryable"
        ],
        [
          "*",
          "theAble"
        ],
        [
          "+",
          "hierarchyAble"
        ],
        [
          "+",
          "isEdee"
        ],
        [
          "+",
          "isEder"
        ],
        [
          "+",
          "mathematical_operator"
        ],
        [
          "+",
          "object"
        ],
        [
          "+",
          "property"
        ],
        [
          "+",
          "queryable"
        ],
        [
          "+",
          "theAble"
        ],
        [
          "-",
          "hierarchyAble"
        ],
        [
          "-",
          "isEdee"
        ],
        [
          "-",
          "isEder"
        ],
        [
          "-",
          "mathematical_operator"
        ],
        [
          "-",
          "object"
        ],
        [
          "-",
          "property"
        ],
        [
          "-",
          "queryable"
        ],
        [
          "-",
          "theAble"
        ],
        [
          "/",
          "hierarchyAble"
        ],
        [
          "/",
          "isEdee"
        ],
        [
          "/",
          "isEder"
        ],
        [
          "/",
          "mathematical_operator"
        ],
        [
          "/",
          "object"
        ],
        [
          "/",
          "property"
        ],
        [
          "/",
          "queryable"
        ],
        [
          "/",
          "theAble"
        ],
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "amount",
          "amount"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "calculate",
          "verby"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "convertToUnits",
          "expression"
        ],
        [
          "convertToUnits",
          "queryable"
        ],
        [
          "degree",
          "amount"
        ],
        [
          "dimension",
          "concept"
        ],
        [
          "dimension",
          "hierarchyAble"
        ],
        [
          "dimension",
          "isEdee"
        ],
        [
          "dimension",
          "isEder"
        ],
        [
          "dimension",
          "object"
        ],
        [
          "dimension",
          "property"
        ],
        [
          "dimension",
          "queryable"
        ],
        [
          "dimension",
          "theAble"
        ],
        [
          "divideByExpression",
          "mathematicalExpression"
        ],
        [
          "divideByOperator",
          "mathematicalOperator"
        ],
        [
          "expression",
          "expression"
        ],
        [
          "forVariable",
          "preposition"
        ],
        [
          "formula",
          "concept"
        ],
        [
          "formula",
          "hierarchyAble"
        ],
        [
          "formula",
          "isEdee"
        ],
        [
          "formula",
          "isEder"
        ],
        [
          "formula",
          "object"
        ],
        [
          "formula",
          "property"
        ],
        [
          "formula",
          "queryable"
        ],
        [
          "formula",
          "theAble"
        ],
        [
          "formulaForVariable",
          "preposition"
        ],
        [
          "formulaForVariable",
          "queryable"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mathematical",
          "hierarchyAble"
        ],
        [
          "mathematical",
          "isEdee"
        ],
        [
          "mathematical",
          "isEder"
        ],
        [
          "mathematical",
          "object"
        ],
        [
          "mathematical",
          "property"
        ],
        [
          "mathematical",
          "queryable"
        ],
        [
          "mathematical",
          "theAble"
        ],
        [
          "mathematicalExpression",
          "concept"
        ],
        [
          "mathematicalExpression",
          "expression"
        ],
        [
          "mathematicalExpression",
          "number"
        ],
        [
          "mathematicalOperator",
          "mathematicalOperator"
        ],
        [
          "mathematical_operator",
          "adjective"
        ],
        [
          "mathematical_operator",
          "concept"
        ],
        [
          "mathematical_operator",
          "hierarchyAble"
        ],
        [
          "mathematical_operator",
          "isEdee"
        ],
        [
          "mathematical_operator",
          "isEder"
        ],
        [
          "mathematical_operator",
          "object"
        ],
        [
          "mathematical_operator",
          "property"
        ],
        [
          "mathematical_operator",
          "queryable"
        ],
        [
          "mathematical_operator",
          "theAble"
        ],
        [
          "minusExpression",
          "mathematicalExpression"
        ],
        [
          "minusOperator",
          "mathematicalOperator"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "expression"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "operator",
          "concept"
        ],
        [
          "operator",
          "hierarchyAble"
        ],
        [
          "operator",
          "isEdee"
        ],
        [
          "operator",
          "isEder"
        ],
        [
          "operator",
          "object"
        ],
        [
          "operator",
          "property"
        ],
        [
          "operator",
          "queryable"
        ],
        [
          "operator",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "plusExpression",
          "mathematicalExpression"
        ],
        [
          "plusOperator",
          "mathematicalOperator"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "timesExpression",
          "mathematicalExpression"
        ],
        [
          "timesOperator",
          "mathematicalOperator"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unit",
          "concept"
        ],
        [
          "unit",
          "hierarchyAble"
        ],
        [
          "unit",
          "isEdee"
        ],
        [
          "unit",
          "isEder"
        ],
        [
          "unit",
          "object"
        ],
        [
          "unit",
          "property"
        ],
        [
          "unit",
          "queryable"
        ],
        [
          "unit",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "propertyOf",
                0
              ],
              [
                "unit",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "propertyOf",
                0
              ],
              [
                "unit",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "propertyOf",
                0
              ],
              [
                "unit",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "propertyOf",
                0
              ],
              [
                "unit",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "propertyOf",
                0
              ],
              [
                "unit",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "unit",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "propertyOf",
                0
              ],
              [
                "unit",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 6
          },
          {
            "op": [
              "propertyOf",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "propertyOf",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 7
          },
          {
            "op": [
              "propertyOf",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "propertyOf",
                1
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 8
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 9
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 10
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"years\"\n                                   marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: years\n                                   value: years\n                                   word: years\n    1. unknown/0  - \"hours\"\n                                   marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 10}\n                                   text: hours\n                                   value: hours\n                                   word: hours\n    2. unknown/0  - \"minutes\"\n                                   marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 12, 'end': 18}\n                                   text: minutes\n                                   value: minutes\n                                   word: minutes\n    3. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge))\n                                   range: {'start': 20, 'end': 22}\n                                   text: and\n                                   word: and\n    4. unknown/0  - \"seconds\"\n                                   marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 24, 'end': 30}\n                                   text: seconds\n                                   value: seconds\n                                   word: seconds\n    5. is/0  - \"are\"\n                                   marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 32, 'end': 34}\n                                   text: are\n                                   word: are\n    6. unit/0  - \"units\"\n                                   marker: Operator(unit/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 36, 'end': 40}\n                                   text: units\n                                   value: unit\n                                   word: units\n    7. propertyOf/0  - \"of\"\n                                   default: True\n                                   marker: Operator(propertyOf/0, None, evaluator(Bridge('{ ...next(operator), object: after[0], objects: after }')), variables({}) bridge(bridge))\n                                   range: {'start': 42, 'end': 43}\n                                   text: of\n                                   word: of\n    8. unknown/0  - \"time\"\n                                   marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 45, 'end': 48}\n                                   text: time\n                                   value: time\n                                   word: time\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({'type': ['object', 'notAble', 'hierarchyAble', 'unknown', 'queryable', 'theAble']}) bridge(bridge)), range: {'start': 20, 'end': 22}, text: and, types: [], word: and})\n\n>>>>>>>>>>>>> Counter 2\n    0. unknown/0  - \"years\"\n                                   marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: years\n                                   value: years\n                                   word: years\n    1. unknown/0  - \"hours\"\n                                   marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 10}\n                                   text: hours\n                                   value: hours\n                                   word: hours\n   *2. list/1  - \"minutes and seconds\"\n                                   default: True\n                                   marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['object', 'notAble', 'hierarchyAble', 'unknown', 'queryable', 'theAble']}) bridge(bridge))\n                                   range: {'start': 12, 'end': 30}\n                                   text: minutes and seconds\n                                   types: [\n                                   ]\n                                   value: [\n                                     marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 18}\n                                     text: minutes\n                                     value: minutes\n                                     word: minutes\n\n                                     marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 24, 'end': 30}\n                                     text: seconds\n                                     value: seconds\n                                     word: seconds\n                                   ]\n                                   word: and\n    3. is/0  - \"are\"\n                                   marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 32, 'end': 34}\n                                   text: are\n                                   word: are\n    4. unit/0  - \"units\"\n                                   marker: Operator(unit/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 36, 'end': 40}\n                                   text: units\n                                   value: unit\n                                   word: units\n    5. propertyOf/0  - \"of\"\n                                   default: True\n                                   marker: Operator(propertyOf/0, None, evaluator(Bridge('{ ...next(operator), object: after[0], objects: after }')), variables({}) bridge(bridge))\n                                   range: {'start': 42, 'end': 43}\n                                   text: of\n                                   word: of\n    6. unknown/0  - \"time\"\n                                   marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 45, 'end': 48}\n                                   text: time\n                                   value: time\n                                   word: time\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['object', 'notAble', 'hierarchyAble', 'unknown', 'queryable', 'theAble']}) bridge(bridge)), range: {'start': 12, 'end': 30}, text: minutes and seconds, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 18}, text: minutes, value: minutes, word: minutes}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 30}, text: seconds, value: seconds, word: seconds})], word: and})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/0  - \"years\"\n                                   marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: years\n                                   value: years\n                                   word: years\n   *1. list/1  - \"hours minutes and seconds\"\n                                   default: True\n                                   marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['object', 'notAble', 'hierarchyAble', 'unknown', 'queryable', 'theAble']}) bridge(bridge))\n                                   range: {'start': 6, 'end': 30}\n                                   text: hours minutes and seconds\n                                   types: [\n                                   ]\n                                   value: [\n                                     marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 10}\n                                     text: hours\n                                     value: hours\n                                     word: hours\n\n                                     marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 18}\n                                     text: minutes\n                                     value: minutes\n                                     word: minutes\n\n                                     marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 24, 'end': 30}\n                                     text: seconds\n                                     value: seconds\n                                     word: seconds\n                                   ]\n                                   word: and\n    2. is/0  - \"are\"\n                                   marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 32, 'end': 34}\n                                   text: are\n                                   word: are\n    3. unit/0  - \"units\"\n                                   marker: Operator(unit/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 36, 'end': 40}\n                                   text: units\n                                   value: unit\n                                   word: units\n    4. propertyOf/0  - \"of\"\n                                   default: True\n                                   marker: Operator(propertyOf/0, None, evaluator(Bridge('{ ...next(operator), object: after[0], objects: after }')), variables({}) bridge(bridge))\n                                   range: {'start': 42, 'end': 43}\n                                   text: of\n                                   word: of\n    5. unknown/0  - \"time\"\n                                   marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 45, 'end': 48}\n                                   text: time\n                                   value: time\n                                   word: time\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['object', 'notAble', 'hierarchyAble', 'unknown', 'queryable', 'theAble']}) bridge(bridge)), range: {'start': 6, 'end': 30}, text: hours minutes and seconds, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 10}, text: hours, value: hours, word: hours}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 18}, text: minutes, value: minutes, word: minutes}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 30}, text: seconds, value: seconds, word: seconds})], word: and})\n\n>>>>>>>>>>>>> Counter 4\n   *0. list/1  - \"years hours minutes and seconds\"\n                                   default: True\n                                   marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['object', 'notAble', 'hierarchyAble', 'unknown', 'queryable', 'theAble']}) bridge(bridge))\n                                   range: {'start': 0, 'end': 30}\n                                   text: years hours minutes and seconds\n                                   types: [\n                                   ]\n                                   value: [\n                                     marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: years\n                                     value: years\n                                     word: years\n\n                                     marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 10}\n                                     text: hours\n                                     value: hours\n                                     word: hours\n\n                                     marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 18}\n                                     text: minutes\n                                     value: minutes\n                                     word: minutes\n\n                                     marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 24, 'end': 30}\n                                     text: seconds\n                                     value: seconds\n                                     word: seconds\n                                   ]\n                                   word: and\n    1. is/0  - \"are\"\n                                   marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 32, 'end': 34}\n                                   text: are\n                                   word: are\n    2. unit/0  - \"units\"\n                                   marker: Operator(unit/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 36, 'end': 40}\n                                   text: units\n                                   value: unit\n                                   word: units\n    3. propertyOf/0  - \"of\"\n                                   default: True\n                                   marker: Operator(propertyOf/0, None, evaluator(Bridge('{ ...next(operator), object: after[0], objects: after }')), variables({}) bridge(bridge))\n                                   range: {'start': 42, 'end': 43}\n                                   text: of\n                                   word: of\n    4. unknown/0  - \"time\"\n                                   marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 45, 'end': 48}\n                                   text: time\n                                   value: time\n                                   word: time\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['object', 'notAble', 'hierarchyAble', 'unknown', 'queryable', 'theAble']}) bridge(bridge)), range: {'start': 0, 'end': 30}, text: years hours minutes and seconds, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: years, value: years, word: years}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 10}, text: hours, value: hours, word: hours}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 18}, text: minutes, value: minutes, word: minutes}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 30}, text: seconds, value: seconds, word: seconds})], word: and})\n\n>>>>>>>>>>>>> Counter 5\n   *0. list/1  - \"None\"\n                                   marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['object', 'notAble', 'hierarchyAble', 'unknown', 'queryable', 'theAble']}) bridge(bridge))\n                                   range: {'start': 0, 'end': 30}\n                                   value: [\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: years\n                                     unknown: True\n                                     value: years\n                                     word: years\n\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 10}\n                                     text: hours\n                                     unknown: True\n                                     value: hours\n                                     word: hours\n\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 18}\n                                     text: minutes\n                                     unknown: True\n                                     value: minutes\n                                     word: minutes\n\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 24, 'end': 30}\n                                     text: seconds\n                                     unknown: True\n                                     value: seconds\n                                     word: seconds\n                                   ]\n    1. is/0  - \"are\"\n                                   marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 32, 'end': 34}\n                                   text: are\n                                   word: are\n    2. unit/0  - \"units\"\n                                   marker: Operator(unit/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 36, 'end': 40}\n                                   text: units\n                                   value: unit\n                                   word: units\n    3. propertyOf/0  - \"of\"\n                                   default: True\n                                   marker: Operator(propertyOf/0, None, evaluator(Bridge('{ ...next(operator), object: after[0], objects: after }')), variables({}) bridge(bridge))\n                                   range: {'start': 42, 'end': 43}\n                                   text: of\n                                   word: of\n    4. unknown/0  - \"time\"\n                                   marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 45, 'end': 48}\n                                   text: time\n                                   value: time\n                                   word: time\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 45, 'end': 48}, text: time, value: time, word: time})\n\n>>>>>>>>>>>>> Counter 6\n    0. list/1  - \"None\"\n                                   marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['object', 'notAble', 'hierarchyAble', 'unknown', 'queryable', 'theAble']}) bridge(bridge))\n                                   range: {'start': 0, 'end': 30}\n                                   value: [\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: years\n                                     unknown: True\n                                     value: years\n                                     word: years\n\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 10}\n                                     text: hours\n                                     unknown: True\n                                     value: hours\n                                     word: hours\n\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 18}\n                                     text: minutes\n                                     unknown: True\n                                     value: minutes\n                                     word: minutes\n\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 24, 'end': 30}\n                                     text: seconds\n                                     unknown: True\n                                     value: seconds\n                                     word: seconds\n                                   ]\n    1. is/0  - \"are\"\n                                   marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 32, 'end': 34}\n                                   text: are\n                                   word: are\n    2. unit/0  - \"units\"\n                                   marker: Operator(unit/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 36, 'end': 40}\n                                   text: units\n                                   value: unit\n                                   word: units\n    3. propertyOf/0  - \"of\"\n                                   default: True\n                                   marker: Operator(propertyOf/0, None, evaluator(Bridge('{ ...next(operator), object: after[0], objects: after }')), variables({}) bridge(bridge))\n                                   range: {'start': 42, 'end': 43}\n                                   text: of\n                                   word: of\n   *4. unknown/1 (dead) - \"time\"\n                                   dead: True\n                                   marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 45, 'end': 48}\n                                   text: time\n                                   unknown: True\n                                   value: time\n                                   word: time\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(unit/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 36, 'end': 40}, text: units, value: unit, word: units})\n\n>>>>>>>>>>>>> Counter 7\n    0. list/1  - \"None\"\n                                   marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['object', 'notAble', 'hierarchyAble', 'unknown', 'queryable', 'theAble']}) bridge(bridge))\n                                   range: {'start': 0, 'end': 30}\n                                   value: [\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: years\n                                     unknown: True\n                                     value: years\n                                     word: years\n\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 10}\n                                     text: hours\n                                     unknown: True\n                                     value: hours\n                                     word: hours\n\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 18}\n                                     text: minutes\n                                     unknown: True\n                                     value: minutes\n                                     word: minutes\n\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 24, 'end': 30}\n                                     text: seconds\n                                     unknown: True\n                                     value: seconds\n                                     word: seconds\n                                   ]\n    1. is/0  - \"are\"\n                                   marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 32, 'end': 34}\n                                   text: are\n                                   word: are\n   *2. unit/1 (dead) - \"units\"\n                                   dead: True\n                                   marker: Operator(unit/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 36, 'end': 40}\n                                   text: units\n                                   value: unit\n                                   word: units\n    3. propertyOf/0  - \"of\"\n                                   default: True\n                                   marker: Operator(propertyOf/0, None, evaluator(Bridge('{ ...next(operator), object: after[0], objects: after }')), variables({}) bridge(bridge))\n                                   range: {'start': 42, 'end': 43}\n                                   text: of\n                                   word: of\n    4. unknown/1 (dead) - \"time\"\n                                   dead: True\n                                   marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 45, 'end': 48}\n                                   text: time\n                                   unknown: True\n                                   value: time\n                                   word: time\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({default: True, marker: Operator(propertyOf/0, None, evaluator(Bridge('{ ...next(operator), object: after[0], objects: after }')), variables({}) bridge(bridge)), range: {'start': 42, 'end': 43}, text: of, word: of})\n\n>>>>>>>>>>>>> Counter 8\n    0. list/1  - \"None\"\n                                   marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['object', 'notAble', 'hierarchyAble', 'unknown', 'queryable', 'theAble']}) bridge(bridge))\n                                   range: {'start': 0, 'end': 30}\n                                   value: [\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: years\n                                     unknown: True\n                                     value: years\n                                     word: years\n\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 10}\n                                     text: hours\n                                     unknown: True\n                                     value: hours\n                                     word: hours\n\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 18}\n                                     text: minutes\n                                     unknown: True\n                                     value: minutes\n                                     word: minutes\n\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 24, 'end': 30}\n                                     text: seconds\n                                     unknown: True\n                                     value: seconds\n                                     word: seconds\n                                   ]\n    1. is/0  - \"are\"\n                                   marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 32, 'end': 34}\n                                   text: are\n                                   word: are\n    2. unit/1 (dead) - \"units\"\n                                   dead: True\n                                   marker: Operator(unit/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 36, 'end': 40}\n                                   text: units\n                                   value: unit\n                                   word: units\n   *3. propertyOf/1  - \"of time\"\n                                   default: True\n                                   marker: Operator(propertyOf/1, PASS, None, evaluator(Bridge('{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }')), variables({}) bridge(bridge))\n                                   object: Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 45, 'end': 48}, text: time, types: ['unknown'], unknown: True, value: time, word: time})\n                                   objects: [\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 45, 'end': 48}\n                                     text: time\n                                     types: [\n                                     'unknown'\n                                     ]\n                                     unknown: True\n                                     value: time\n                                     word: time\n                                   ]\n                                   range: {'start': 42, 'end': 48}\n                                   text: of time\n                                   word: of\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({default: True, marker: Operator(propertyOf/1, PASS, None, evaluator(Bridge('{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }')), variables({}) bridge(bridge)), object: Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 45, 'end': 48}, text: time, types: ['unknown'], unknown: True, value: time, word: time}), objects: [Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 45, 'end': 48}, text: time, types: ['unknown'], unknown: True, value: time, word: time})], range: {'start': 42, 'end': 48}, text: of time, word: of})\n\n>>>>>>>>>>>>> Counter 9\n    0. list/1  - \"None\"\n                                   marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['object', 'notAble', 'hierarchyAble', 'unknown', 'queryable', 'theAble']}) bridge(bridge))\n                                   range: {'start': 0, 'end': 30}\n                                   value: [\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: years\n                                     unknown: True\n                                     value: years\n                                     word: years\n\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 10}\n                                     text: hours\n                                     unknown: True\n                                     value: hours\n                                     word: hours\n\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 12, 'end': 18}\n                                     text: minutes\n                                     unknown: True\n                                     value: minutes\n                                     word: minutes\n\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 24, 'end': 30}\n                                     text: seconds\n                                     unknown: True\n                                     value: seconds\n                                     word: seconds\n                                   ]\n    1. is/0  - \"are\"\n                                   marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 32, 'end': 34}\n                                   text: are\n                                   word: are\n   *2. unit/1 (dead) - \"units of time\"\n                                   dead: True\n                                   marker: Operator(unit/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   object: Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 45, 'end': 48}, text: time, types: ['unknown'], unknown: True, value: time, word: time})\n                                   objects: [\n                                     dead: True\n                                     marker: Operator(unit/1, None, evaluator(None), variables({}) bridge(bridge))\n                                     number: many\n                                     range: {'start': 36, 'end': 40}\n                                     text: units\n                                     types: [\n                                     'unit'\n                                     ]\n                                     value: unit\n                                     word: units\n\n                                     dead: True\n                                     marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 45, 'end': 48}\n                                     text: time\n                                     types: [\n                                     'unknown'\n                                     ]\n                                     unknown: True\n                                     value: time\n                                     word: time\n                                   ]\n                                   range: {'start': 36, 'end': 48}\n                                   text: units of time\n                                   types: [\n                                   'unit'\n                                   ]\n                                   value: unit\n                                   word: units\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 32, 'end': 34}, text: are, word: are})\n\n>>>>>>>>>>>>> Counter 10\n   *0. is/1  - \" are units of time\"\n                                   marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['object', 'notAble', 'hierarchyAble', 'unknown', 'queryable', 'theAble']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 48}, types: ['unknown'], value: [Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: years, unknown: True, value: years, word: years}), Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 10}, text: hours, unknown: True, value: hours, word: hours}), Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 18}, text: minutes, unknown: True, value: minutes, word: minutes}), Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 30}, text: seconds, unknown: True, value: seconds, word: seconds})]})\n                                   range: {'start': 0, 'end': 48}\n                                   text:  are units of time\n                                   two: Context({dead: True, marker: Operator(unit/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, object: Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 45, 'end': 48}, text: time, types: ['unknown'], unknown: True, value: time, word: time}), objects: [Context({dead: True, marker: Operator(unit/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 36, 'end': 40}, text: units, types: ['unit'], value: unit, word: units}), Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 45, 'end': 48}, text: time, types: ['unknown'], unknown: True, value: time, word: time})], range: {'start': 36, 'end': 48}, text: units of time, types: ['unit'], value: unit, word: units})\n                                   word: are\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['object', 'notAble', 'hierarchyAble', 'unknown', 'queryable', 'theAble']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 48}, types: ['unknown'], value: [Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: years, unknown: True, value: years, word: years}), Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 10}, text: hours, unknown: True, value: hours, word: hours}), Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 18}, text: minutes, unknown: True, value: minutes, word: minutes}), Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 30}, text: seconds, unknown: True, value: seconds, word: seconds})]}), range: {'start': 0, 'end': 48}, text:  are units of time, two: Context({dead: True, marker: Operator(unit/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, object: Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 45, 'end': 48}, text: time, types: ['unknown'], unknown: True, value: time, word: time}), objects: [Context({dead: True, marker: Operator(unit/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 36, 'end': 40}, text: units, types: ['unit'], value: unit, word: units}), Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 45, 'end': 48}, text: time, types: ['unknown'], unknown: True, value: time, word: time})], range: {'start': 36, 'end': 48}, text: units of time, types: ['unit'], value: unit, word: units}), word: are})\n\n>>>>>>>>>>>>> Counter 11\n   *0. is/2 (dead) - \" are units of time\"\n                                   dead: True\n                                   marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['object', 'notAble', 'hierarchyAble', 'unknown', 'queryable', 'theAble']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 48}, types: ['unknown'], value: [Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: years, unknown: True, value: years, word: years}), Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 10}, text: hours, unknown: True, value: hours, word: hours}), Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 18}, text: minutes, unknown: True, value: minutes, word: minutes}), Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 30}, text: seconds, unknown: True, value: seconds, word: seconds})]})\n                                   range: {'start': 0, 'end': 48}\n                                   text:  are units of time\n                                   two: Context({dead: True, marker: Operator(unit/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, object: Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 45, 'end': 48}, text: time, types: ['unknown'], unknown: True, value: time, word: time}), objects: [Context({dead: True, marker: Operator(unit/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 36, 'end': 40}, text: units, types: ['unit'], value: unit, word: units}), Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 45, 'end': 48}, text: time, types: ['unknown'], unknown: True, value: time, word: time})], range: {'start': 36, 'end': 48}, text: units of time, types: ['unit'], value: unit, word: units})\n                                   word: are\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "many",
          "text": " are units of time",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 48
          },
          "one": {
            "number": "many",
            "marker": "list",
            "value": [
              {
                "marker": "unknown",
                "range": {
                  "start": 0,
                  "end": 4
                },
                "word": "years",
                "text": "years",
                "value": "years",
                "unknown": true,
                "dead": true,
                "level": 1
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 6,
                  "end": 10
                },
                "word": "hours",
                "text": "hours",
                "value": "hours",
                "unknown": true,
                "dead": true,
                "level": 1
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 12,
                  "end": 18
                },
                "word": "minutes",
                "text": "minutes",
                "value": "minutes",
                "unknown": true,
                "dead": true,
                "level": 1
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 24,
                  "end": 30
                },
                "word": "seconds",
                "text": "seconds",
                "value": "seconds",
                "unknown": true,
                "dead": true,
                "level": 1
              }
            ],
            "range": {
              "start": 0,
              "end": 48
            },
            "types": [
              "list",
              "unknown"
            ],
            "level": 1
          },
          "two": {
            "value": "unit",
            "number": "many",
            "text": "units of time",
            "marker": "unit",
            "word": "units",
            "range": {
              "start": 36,
              "end": 48
            },
            "dead": true,
            "types": [
              "unit"
            ],
            "object": {
              "marker": "unknown",
              "range": {
                "start": 45,
                "end": 48
              },
              "word": "time",
              "text": "time",
              "value": "time",
              "unknown": true,
              "dead": true,
              "types": [
                "unknown"
              ],
              "level": 1
            },
            "objects": [
              {
                "value": "unit",
                "number": "many",
                "text": "units",
                "marker": "unit",
                "word": "units",
                "range": {
                  "start": 36,
                  "end": 40
                },
                "dead": true,
                "types": [
                  "unit"
                ],
                "level": 1
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 45,
                  "end": 48
                },
                "word": "time",
                "text": "time",
                "value": "time",
                "unknown": true,
                "dead": true,
                "types": [
                  "unknown"
                ],
                "level": 1
              }
            ],
            "level": 1,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "time_dimension#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "years, hours, minutes and seconds are units of time"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "propertyOf",
            0
          ],
          [
            "unit",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "propertyOf",
            0
          ],
          [
            "unit",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "propertyOf",
            0
          ],
          [
            "unit",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "propertyOf",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "propertyOf",
            1
          ]
        ]
      ],
      "query": "years hours minutes and seconds are units of time",
      "key": {
        "query": "years hours minutes and seconds are units of time"
      }
    },
    {
      "hierarchy": [
        [
          "*",
          "hierarchyAble"
        ],
        [
          "*",
          "isEdee"
        ],
        [
          "*",
          "isEder"
        ],
        [
          "*",
          "mathematical_operator"
        ],
        [
          "*",
          "object"
        ],
        [
          "*",
          "property"
        ],
        [
          "*",
          "queryable"
        ],
        [
          "*",
          "theAble"
        ],
        [
          "+",
          "hierarchyAble"
        ],
        [
          "+",
          "isEdee"
        ],
        [
          "+",
          "isEder"
        ],
        [
          "+",
          "mathematical_operator"
        ],
        [
          "+",
          "object"
        ],
        [
          "+",
          "property"
        ],
        [
          "+",
          "queryable"
        ],
        [
          "+",
          "theAble"
        ],
        [
          "-",
          "hierarchyAble"
        ],
        [
          "-",
          "isEdee"
        ],
        [
          "-",
          "isEder"
        ],
        [
          "-",
          "mathematical_operator"
        ],
        [
          "-",
          "object"
        ],
        [
          "-",
          "property"
        ],
        [
          "-",
          "queryable"
        ],
        [
          "-",
          "theAble"
        ],
        [
          "/",
          "hierarchyAble"
        ],
        [
          "/",
          "isEdee"
        ],
        [
          "/",
          "isEder"
        ],
        [
          "/",
          "mathematical_operator"
        ],
        [
          "/",
          "object"
        ],
        [
          "/",
          "property"
        ],
        [
          "/",
          "queryable"
        ],
        [
          "/",
          "theAble"
        ],
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "amount",
          "amount"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "calculate",
          "verby"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "convertToUnits",
          "expression"
        ],
        [
          "convertToUnits",
          "queryable"
        ],
        [
          "degree",
          "amount"
        ],
        [
          "dimension",
          "concept"
        ],
        [
          "dimension",
          "hierarchyAble"
        ],
        [
          "dimension",
          "isEdee"
        ],
        [
          "dimension",
          "isEder"
        ],
        [
          "dimension",
          "object"
        ],
        [
          "dimension",
          "property"
        ],
        [
          "dimension",
          "queryable"
        ],
        [
          "dimension",
          "theAble"
        ],
        [
          "divideByExpression",
          "mathematicalExpression"
        ],
        [
          "divideByOperator",
          "mathematicalOperator"
        ],
        [
          "expression",
          "expression"
        ],
        [
          "forVariable",
          "preposition"
        ],
        [
          "formula",
          "concept"
        ],
        [
          "formula",
          "hierarchyAble"
        ],
        [
          "formula",
          "isEdee"
        ],
        [
          "formula",
          "isEder"
        ],
        [
          "formula",
          "object"
        ],
        [
          "formula",
          "property"
        ],
        [
          "formula",
          "queryable"
        ],
        [
          "formula",
          "theAble"
        ],
        [
          "formulaForVariable",
          "preposition"
        ],
        [
          "formulaForVariable",
          "queryable"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "hour",
          "hierarchyAble"
        ],
        [
          "hour",
          "isEdee"
        ],
        [
          "hour",
          "isEder"
        ],
        [
          "hour",
          "object"
        ],
        [
          "hour",
          "property"
        ],
        [
          "hour",
          "queryable"
        ],
        [
          "hour",
          "theAble"
        ],
        [
          "hour",
          "unit"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mathematical",
          "hierarchyAble"
        ],
        [
          "mathematical",
          "isEdee"
        ],
        [
          "mathematical",
          "isEder"
        ],
        [
          "mathematical",
          "object"
        ],
        [
          "mathematical",
          "property"
        ],
        [
          "mathematical",
          "queryable"
        ],
        [
          "mathematical",
          "theAble"
        ],
        [
          "mathematicalExpression",
          "concept"
        ],
        [
          "mathematicalExpression",
          "expression"
        ],
        [
          "mathematicalExpression",
          "number"
        ],
        [
          "mathematicalOperator",
          "mathematicalOperator"
        ],
        [
          "mathematical_operator",
          "adjective"
        ],
        [
          "mathematical_operator",
          "concept"
        ],
        [
          "mathematical_operator",
          "hierarchyAble"
        ],
        [
          "mathematical_operator",
          "isEdee"
        ],
        [
          "mathematical_operator",
          "isEder"
        ],
        [
          "mathematical_operator",
          "object"
        ],
        [
          "mathematical_operator",
          "property"
        ],
        [
          "mathematical_operator",
          "queryable"
        ],
        [
          "mathematical_operator",
          "theAble"
        ],
        [
          "minusExpression",
          "mathematicalExpression"
        ],
        [
          "minusOperator",
          "mathematicalOperator"
        ],
        [
          "minute",
          "hierarchyAble"
        ],
        [
          "minute",
          "isEdee"
        ],
        [
          "minute",
          "isEder"
        ],
        [
          "minute",
          "object"
        ],
        [
          "minute",
          "property"
        ],
        [
          "minute",
          "queryable"
        ],
        [
          "minute",
          "theAble"
        ],
        [
          "minute",
          "unit"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "expression"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "operator",
          "concept"
        ],
        [
          "operator",
          "hierarchyAble"
        ],
        [
          "operator",
          "isEdee"
        ],
        [
          "operator",
          "isEder"
        ],
        [
          "operator",
          "object"
        ],
        [
          "operator",
          "property"
        ],
        [
          "operator",
          "queryable"
        ],
        [
          "operator",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "plusExpression",
          "mathematicalExpression"
        ],
        [
          "plusOperator",
          "mathematicalOperator"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "second",
          "hierarchyAble"
        ],
        [
          "second",
          "isEdee"
        ],
        [
          "second",
          "isEder"
        ],
        [
          "second",
          "object"
        ],
        [
          "second",
          "property"
        ],
        [
          "second",
          "queryable"
        ],
        [
          "second",
          "theAble"
        ],
        [
          "second",
          "unit"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "timesExpression",
          "mathematicalExpression"
        ],
        [
          "timesOperator",
          "mathematicalOperator"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unit",
          "concept"
        ],
        [
          "unit",
          "hierarchyAble"
        ],
        [
          "unit",
          "isEdee"
        ],
        [
          "unit",
          "isEder"
        ],
        [
          "unit",
          "object"
        ],
        [
          "unit",
          "property"
        ],
        [
          "unit",
          "queryable"
        ],
        [
          "unit",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ],
        [
          "year",
          "hierarchyAble"
        ],
        [
          "year",
          "isEdee"
        ],
        [
          "year",
          "isEder"
        ],
        [
          "year",
          "object"
        ],
        [
          "year",
          "property"
        ],
        [
          "year",
          "queryable"
        ],
        [
          "year",
          "theAble"
        ],
        [
          "year",
          "unit"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "number",
              0
            ],
            "ops": [
              [
                "divideByOperator",
                0
              ],
              [
                "equals",
                0
              ],
              [
                "hour",
                0
              ],
              [
                "minute",
                0
              ],
              [
                "number",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "divideByOperator",
              0
            ],
            "ops": [
              [
                "divideByOperator",
                0
              ],
              [
                "equals",
                0
              ],
              [
                "hour",
                0
              ],
              [
                "minute",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "hour",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ],
              [
                "hour",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "equals",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ]
            ],
            "counter": 4
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. hour/0  - \"hours\"\n                                   marker: Operator(hour/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 4}\n                                   text: hours\n                                   value: hour\n                                   word: hours\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 6}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. minute/0  - \"minutes\"\n                                   marker: Operator(minute/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 8, 'end': 14}\n                                   text: minutes\n                                   value: minute\n                                   word: minutes\n    3. divideByOperator/0  - \"/\"\n                                   marker: Operator(divideByOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('divideByExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 16, 'end': 16}\n                                   text: /\n                                   value: /\n                                   word: /\n    4. number/0  - \"60\"\n                                   marker: Operator(number/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 18, 'end': 19}\n                                   text: 60\n                                   value: 60\n                                   word: 60\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({marker: Operator(number/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 18, 'end': 19}, text: 60, value: 60, word: 60})\n\n>>>>>>>>>>>>> Counter 2\n    0. hour/0  - \"hours\"\n                                   marker: Operator(hour/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 4}\n                                   text: hours\n                                   value: hour\n                                   word: hours\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 6}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. minute/0  - \"minutes\"\n                                   marker: Operator(minute/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 8, 'end': 14}\n                                   text: minutes\n                                   value: minute\n                                   word: minutes\n    3. divideByOperator/0  - \"/\"\n                                   marker: Operator(divideByOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('divideByExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 16, 'end': 16}\n                                   text: /\n                                   value: /\n                                   word: /\n   *4. number/1 (dead) - \"60\"\n                                   dead: True\n                                   marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 18, 'end': 19}\n                                   text: 60\n                                   value: 60\n                                   word: 60\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({marker: Operator(divideByOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('divideByExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 16}, text: /, value: /, word: /})\n\n>>>>>>>>>>>>> Counter 3\n    0. hour/0  - \"hours\"\n                                   marker: Operator(hour/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 4}\n                                   text: hours\n                                   value: hour\n                                   word: hours\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 6}\n                                   text: =\n                                   value: =\n                                   word: =\n   *2. divideByExpression/1 (dead) - \"minutes / 60\"\n                                   dead: True\n                                   evaluate: True\n                                   isResponse: True\n                                   marker: Operator(divideByExpression/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 19}\n                                   text: minutes / 60\n                                   types: [\n                                   'number'\n                                   ]\n                                   value: None\n                                   word: /\n                                   x: Context({marker: Operator(minute/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 14}, text: minutes, types: ['number'], value: minute, word: minutes})\n                                   y: Context({dead: True, marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 18, 'end': 19}, text: 60, types: ['number'], value: 60, word: 60})\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(hour/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 4}, text: hours, value: hour, word: hours})\n\n>>>>>>>>>>>>> Counter 4\n   *0. hour/1 (dead) - \"hours\"\n                                   dead: True\n                                   marker: Operator(hour/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 4}\n                                   text: hours\n                                   value: hour\n                                   word: hours\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 6}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. divideByExpression/1 (dead) - \"minutes / 60\"\n                                   dead: True\n                                   evaluate: True\n                                   isResponse: True\n                                   marker: Operator(divideByExpression/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 19}\n                                   text: minutes / 60\n                                   types: [\n                                   'number'\n                                   ]\n                                   value: None\n                                   word: /\n                                   x: Context({marker: Operator(minute/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 14}, text: minutes, types: ['number'], value: minute, word: minutes})\n                                   y: Context({dead: True, marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 18, 'end': 19}, text: 60, types: ['number'], value: 60, word: 60})\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 6}, text: =, value: =, word: =})\n\n>>>>>>>>>>>>> Counter 5\n   *0. equals/1 (dead) - \"hours = minutes / 60\"\n                                   dead: True\n                                   left: Context({dead: True, marker: Operator(hour/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 4}, text: hours, types: ['expression'], value: hour, word: hours})\n                                   marker: Operator(equals/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 19}\n                                   right: Context({dead: True, evaluate: True, isResponse: True, marker: Operator(divideByExpression/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 8, 'end': 19}, text: minutes / 60, types: ['number', 'divideByExpression'], value: None, word: /, x: Context({marker: Operator(minute/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 14}, text: minutes, types: ['number'], value: minute, word: minutes}), y: Context({dead: True, marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 18, 'end': 19}, text: 60, types: ['number'], value: 60, word: 60})})\n                                   text: hours = minutes / 60\n                                   value: =\n                                   word: =\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "value": "=",
          "text": "hours = minutes / 60",
          "marker": "equals",
          "word": "=",
          "range": {
            "start": 0,
            "end": 19
          },
          "dead": true,
          "left": {
            "value": "hour",
            "number": "many",
            "text": "hours",
            "marker": "hour",
            "word": "hours",
            "range": {
              "start": 0,
              "end": 4
            },
            "dead": true,
            "types": [
              "expression",
              "hour"
            ],
            "level": 1
          },
          "right": {
            "value": null,
            "text": "minutes / 60",
            "marker": "divideByExpression",
            "word": "/",
            "range": {
              "start": 8,
              "end": 19
            },
            "dead": true,
            "types": [
              "divideByExpression",
              "number"
            ],
            "x": {
              "value": "minute",
              "number": "many",
              "text": "minutes",
              "marker": "minute",
              "word": "minutes",
              "range": {
                "start": 8,
                "end": 14
              },
              "types": [
                "minute",
                "number"
              ],
              "level": 0
            },
            "y": {
              "value": 60,
              "text": "60",
              "marker": "number",
              "word": "60",
              "range": {
                "start": 18,
                "end": 19
              },
              "dead": true,
              "types": [
                "number"
              ],
              "level": 1
            },
            "number": "one",
            "isResponse": true,
            "evaluate": true,
            "level": 1
          },
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "time_dimension#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "hours = minutes / 60"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "divideByOperator",
            0
          ],
          [
            "equals",
            0
          ],
          [
            "hour",
            0
          ],
          [
            "minute",
            0
          ]
        ],
        [
          [
            "divideByOperator",
            0
          ],
          [
            "equals",
            0
          ],
          [
            "hour",
            0
          ],
          [
            "minute",
            0
          ],
          [
            "number",
            0
          ]
        ],
        [
          [
            "equals",
            0
          ],
          [
            "hour",
            0
          ]
        ]
      ],
      "query": "hours = minutes / 60",
      "key": {
        "query": "hours = minutes / 60"
      }
    },
    {
      "hierarchy": [
        [
          "*",
          "hierarchyAble"
        ],
        [
          "*",
          "isEdee"
        ],
        [
          "*",
          "isEder"
        ],
        [
          "*",
          "mathematical_operator"
        ],
        [
          "*",
          "object"
        ],
        [
          "*",
          "property"
        ],
        [
          "*",
          "queryable"
        ],
        [
          "*",
          "theAble"
        ],
        [
          "+",
          "hierarchyAble"
        ],
        [
          "+",
          "isEdee"
        ],
        [
          "+",
          "isEder"
        ],
        [
          "+",
          "mathematical_operator"
        ],
        [
          "+",
          "object"
        ],
        [
          "+",
          "property"
        ],
        [
          "+",
          "queryable"
        ],
        [
          "+",
          "theAble"
        ],
        [
          "-",
          "hierarchyAble"
        ],
        [
          "-",
          "isEdee"
        ],
        [
          "-",
          "isEder"
        ],
        [
          "-",
          "mathematical_operator"
        ],
        [
          "-",
          "object"
        ],
        [
          "-",
          "property"
        ],
        [
          "-",
          "queryable"
        ],
        [
          "-",
          "theAble"
        ],
        [
          "/",
          "hierarchyAble"
        ],
        [
          "/",
          "isEdee"
        ],
        [
          "/",
          "isEder"
        ],
        [
          "/",
          "mathematical_operator"
        ],
        [
          "/",
          "object"
        ],
        [
          "/",
          "property"
        ],
        [
          "/",
          "queryable"
        ],
        [
          "/",
          "theAble"
        ],
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "amount",
          "amount"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "calculate",
          "verby"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "convertToUnits",
          "expression"
        ],
        [
          "convertToUnits",
          "queryable"
        ],
        [
          "degree",
          "amount"
        ],
        [
          "dimension",
          "concept"
        ],
        [
          "dimension",
          "hierarchyAble"
        ],
        [
          "dimension",
          "isEdee"
        ],
        [
          "dimension",
          "isEder"
        ],
        [
          "dimension",
          "object"
        ],
        [
          "dimension",
          "property"
        ],
        [
          "dimension",
          "queryable"
        ],
        [
          "dimension",
          "theAble"
        ],
        [
          "divideByExpression",
          "mathematicalExpression"
        ],
        [
          "divideByOperator",
          "mathematicalOperator"
        ],
        [
          "expression",
          "expression"
        ],
        [
          "forVariable",
          "preposition"
        ],
        [
          "formula",
          "concept"
        ],
        [
          "formula",
          "hierarchyAble"
        ],
        [
          "formula",
          "isEdee"
        ],
        [
          "formula",
          "isEder"
        ],
        [
          "formula",
          "object"
        ],
        [
          "formula",
          "property"
        ],
        [
          "formula",
          "queryable"
        ],
        [
          "formula",
          "theAble"
        ],
        [
          "formulaForVariable",
          "preposition"
        ],
        [
          "formulaForVariable",
          "queryable"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "hour",
          "hierarchyAble"
        ],
        [
          "hour",
          "isEdee"
        ],
        [
          "hour",
          "isEder"
        ],
        [
          "hour",
          "object"
        ],
        [
          "hour",
          "property"
        ],
        [
          "hour",
          "queryable"
        ],
        [
          "hour",
          "theAble"
        ],
        [
          "hour",
          "unit"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mathematical",
          "hierarchyAble"
        ],
        [
          "mathematical",
          "isEdee"
        ],
        [
          "mathematical",
          "isEder"
        ],
        [
          "mathematical",
          "object"
        ],
        [
          "mathematical",
          "property"
        ],
        [
          "mathematical",
          "queryable"
        ],
        [
          "mathematical",
          "theAble"
        ],
        [
          "mathematicalExpression",
          "concept"
        ],
        [
          "mathematicalExpression",
          "expression"
        ],
        [
          "mathematicalExpression",
          "number"
        ],
        [
          "mathematicalOperator",
          "mathematicalOperator"
        ],
        [
          "mathematical_operator",
          "adjective"
        ],
        [
          "mathematical_operator",
          "concept"
        ],
        [
          "mathematical_operator",
          "hierarchyAble"
        ],
        [
          "mathematical_operator",
          "isEdee"
        ],
        [
          "mathematical_operator",
          "isEder"
        ],
        [
          "mathematical_operator",
          "object"
        ],
        [
          "mathematical_operator",
          "property"
        ],
        [
          "mathematical_operator",
          "queryable"
        ],
        [
          "mathematical_operator",
          "theAble"
        ],
        [
          "minusExpression",
          "mathematicalExpression"
        ],
        [
          "minusOperator",
          "mathematicalOperator"
        ],
        [
          "minute",
          "hierarchyAble"
        ],
        [
          "minute",
          "isEdee"
        ],
        [
          "minute",
          "isEder"
        ],
        [
          "minute",
          "object"
        ],
        [
          "minute",
          "property"
        ],
        [
          "minute",
          "queryable"
        ],
        [
          "minute",
          "theAble"
        ],
        [
          "minute",
          "unit"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "expression"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "operator",
          "concept"
        ],
        [
          "operator",
          "hierarchyAble"
        ],
        [
          "operator",
          "isEdee"
        ],
        [
          "operator",
          "isEder"
        ],
        [
          "operator",
          "object"
        ],
        [
          "operator",
          "property"
        ],
        [
          "operator",
          "queryable"
        ],
        [
          "operator",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "plusExpression",
          "mathematicalExpression"
        ],
        [
          "plusOperator",
          "mathematicalOperator"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "second",
          "hierarchyAble"
        ],
        [
          "second",
          "isEdee"
        ],
        [
          "second",
          "isEder"
        ],
        [
          "second",
          "object"
        ],
        [
          "second",
          "property"
        ],
        [
          "second",
          "queryable"
        ],
        [
          "second",
          "theAble"
        ],
        [
          "second",
          "unit"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "timesExpression",
          "mathematicalExpression"
        ],
        [
          "timesOperator",
          "mathematicalOperator"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unit",
          "concept"
        ],
        [
          "unit",
          "hierarchyAble"
        ],
        [
          "unit",
          "isEdee"
        ],
        [
          "unit",
          "isEder"
        ],
        [
          "unit",
          "object"
        ],
        [
          "unit",
          "property"
        ],
        [
          "unit",
          "queryable"
        ],
        [
          "unit",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ],
        [
          "year",
          "hierarchyAble"
        ],
        [
          "year",
          "isEdee"
        ],
        [
          "year",
          "isEder"
        ],
        [
          "year",
          "object"
        ],
        [
          "year",
          "property"
        ],
        [
          "year",
          "queryable"
        ],
        [
          "year",
          "theAble"
        ],
        [
          "year",
          "unit"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "number",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ],
              [
                "hour",
                0
              ],
              [
                "minute",
                0
              ],
              [
                "number",
                0
              ],
              [
                "timesOperator",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "hour",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ],
              [
                "hour",
                0
              ],
              [
                "minute",
                0
              ],
              [
                "timesOperator",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "minute",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ],
              [
                "minute",
                0
              ],
              [
                "timesOperator",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "timesOperator",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ],
              [
                "timesOperator",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "equals",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ]
            ],
            "counter": 5
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. minute/0  - \"minutes\"\n                                   marker: Operator(minute/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 6}\n                                   text: minutes\n                                   value: minute\n                                   word: minutes\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 8}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. hour/0  - \"hours\"\n                                   marker: Operator(hour/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 10, 'end': 14}\n                                   text: hours\n                                   value: hour\n                                   word: hours\n    3. timesOperator/0  - \"*\"\n                                   marker: Operator(timesOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 16, 'end': 16}\n                                   text: *\n                                   value: *\n                                   word: *\n    4. number/0  - \"60\"\n                                   marker: Operator(number/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 18, 'end': 19}\n                                   text: 60\n                                   value: 60\n                                   word: 60\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({marker: Operator(number/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 18, 'end': 19}, text: 60, value: 60, word: 60})\n\n>>>>>>>>>>>>> Counter 2\n    0. minute/0  - \"minutes\"\n                                   marker: Operator(minute/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 6}\n                                   text: minutes\n                                   value: minute\n                                   word: minutes\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 8}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. hour/0  - \"hours\"\n                                   marker: Operator(hour/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 10, 'end': 14}\n                                   text: hours\n                                   value: hour\n                                   word: hours\n    3. timesOperator/0  - \"*\"\n                                   marker: Operator(timesOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 16, 'end': 16}\n                                   text: *\n                                   value: *\n                                   word: *\n   *4. number/1 (dead) - \"60\"\n                                   dead: True\n                                   marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 18, 'end': 19}\n                                   text: 60\n                                   value: 60\n                                   word: 60\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(hour/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 14}, text: hours, value: hour, word: hours})\n\n>>>>>>>>>>>>> Counter 3\n    0. minute/0  - \"minutes\"\n                                   marker: Operator(minute/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 6}\n                                   text: minutes\n                                   value: minute\n                                   word: minutes\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 8}\n                                   text: =\n                                   value: =\n                                   word: =\n   *2. hour/1 (dead) - \"hours\"\n                                   dead: True\n                                   marker: Operator(hour/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 10, 'end': 14}\n                                   text: hours\n                                   value: hour\n                                   word: hours\n    3. timesOperator/0  - \"*\"\n                                   marker: Operator(timesOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 16, 'end': 16}\n                                   text: *\n                                   value: *\n                                   word: *\n    4. number/1 (dead) - \"60\"\n                                   dead: True\n                                   marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 18, 'end': 19}\n                                   text: 60\n                                   value: 60\n                                   word: 60\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(minute/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: minutes, value: minute, word: minutes})\n\n>>>>>>>>>>>>> Counter 4\n   *0. minute/1 (dead) - \"minutes\"\n                                   dead: True\n                                   marker: Operator(minute/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 6}\n                                   text: minutes\n                                   value: minute\n                                   word: minutes\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 8}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. hour/1 (dead) - \"hours\"\n                                   dead: True\n                                   marker: Operator(hour/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 10, 'end': 14}\n                                   text: hours\n                                   value: hour\n                                   word: hours\n    3. timesOperator/0  - \"*\"\n                                   marker: Operator(timesOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 16, 'end': 16}\n                                   text: *\n                                   value: *\n                                   word: *\n    4. number/1 (dead) - \"60\"\n                                   dead: True\n                                   marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 18, 'end': 19}\n                                   text: 60\n                                   value: 60\n                                   word: 60\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({marker: Operator(timesOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 16}, text: *, value: *, word: *})\n\n>>>>>>>>>>>>> Counter 5\n    0. minute/1 (dead) - \"minutes\"\n                                   dead: True\n                                   marker: Operator(minute/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 6}\n                                   text: minutes\n                                   value: minute\n                                   word: minutes\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 8}\n                                   text: =\n                                   value: =\n                                   word: =\n   *2. timesExpression/1 (dead) - \"hours * 60\"\n                                   dead: True\n                                   evaluate: True\n                                   isResponse: True\n                                   marker: Operator(timesExpression/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 10, 'end': 19}\n                                   text: hours * 60\n                                   types: [\n                                   'number'\n                                   ]\n                                   value: None\n                                   word: *\n                                   x: Context({dead: True, marker: Operator(hour/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 14}, text: hours, types: ['number'], value: hour, word: hours})\n                                   y: Context({dead: True, marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 18, 'end': 19}, text: 60, types: ['number'], value: 60, word: 60})\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 8}, text: =, value: =, word: =})\n\n>>>>>>>>>>>>> Counter 6\n   *0. equals/1 (dead) - \"minutes = hours * 60\"\n                                   dead: True\n                                   left: Context({dead: True, marker: Operator(minute/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: minutes, types: ['expression'], value: minute, word: minutes})\n                                   marker: Operator(equals/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 19}\n                                   right: Context({dead: True, evaluate: True, isResponse: True, marker: Operator(timesExpression/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 10, 'end': 19}, text: hours * 60, types: ['number', 'timesExpression'], value: None, word: *, x: Context({dead: True, marker: Operator(hour/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 14}, text: hours, types: ['number'], value: hour, word: hours}), y: Context({dead: True, marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 18, 'end': 19}, text: 60, types: ['number'], value: 60, word: 60})})\n                                   text: minutes = hours * 60\n                                   value: =\n                                   word: =\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "value": "=",
          "text": "minutes = hours * 60",
          "marker": "equals",
          "word": "=",
          "range": {
            "start": 0,
            "end": 19
          },
          "dead": true,
          "left": {
            "value": "minute",
            "number": "many",
            "text": "minutes",
            "marker": "minute",
            "word": "minutes",
            "range": {
              "start": 0,
              "end": 6
            },
            "dead": true,
            "types": [
              "expression",
              "minute"
            ],
            "level": 1
          },
          "right": {
            "value": null,
            "text": "hours * 60",
            "marker": "timesExpression",
            "word": "*",
            "range": {
              "start": 10,
              "end": 19
            },
            "dead": true,
            "types": [
              "number",
              "timesExpression"
            ],
            "x": {
              "value": "hour",
              "number": "many",
              "text": "hours",
              "marker": "hour",
              "word": "hours",
              "range": {
                "start": 10,
                "end": 14
              },
              "dead": true,
              "types": [
                "hour",
                "number"
              ],
              "level": 1
            },
            "y": {
              "value": 60,
              "text": "60",
              "marker": "number",
              "word": "60",
              "range": {
                "start": 18,
                "end": 19
              },
              "dead": true,
              "types": [
                "number"
              ],
              "level": 1
            },
            "number": "one",
            "isResponse": true,
            "evaluate": true,
            "level": 1
          },
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "time_dimension#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "minutes = hours * 60"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "equals",
            0
          ],
          [
            "hour",
            0
          ],
          [
            "minute",
            0
          ],
          [
            "number",
            0
          ],
          [
            "timesOperator",
            0
          ]
        ],
        [
          [
            "equals",
            0
          ],
          [
            "hour",
            0
          ],
          [
            "minute",
            0
          ],
          [
            "timesOperator",
            0
          ]
        ],
        [
          [
            "equals",
            0
          ],
          [
            "minute",
            0
          ],
          [
            "timesOperator",
            0
          ]
        ],
        [
          [
            "equals",
            0
          ],
          [
            "timesOperator",
            0
          ]
        ]
      ],
      "query": "minutes = hours * 60",
      "key": {
        "query": "minutes = hours * 60"
      }
    },
    {
      "hierarchy": [
        [
          "*",
          "hierarchyAble"
        ],
        [
          "*",
          "isEdee"
        ],
        [
          "*",
          "isEder"
        ],
        [
          "*",
          "mathematical_operator"
        ],
        [
          "*",
          "object"
        ],
        [
          "*",
          "property"
        ],
        [
          "*",
          "queryable"
        ],
        [
          "*",
          "theAble"
        ],
        [
          "+",
          "hierarchyAble"
        ],
        [
          "+",
          "isEdee"
        ],
        [
          "+",
          "isEder"
        ],
        [
          "+",
          "mathematical_operator"
        ],
        [
          "+",
          "object"
        ],
        [
          "+",
          "property"
        ],
        [
          "+",
          "queryable"
        ],
        [
          "+",
          "theAble"
        ],
        [
          "-",
          "hierarchyAble"
        ],
        [
          "-",
          "isEdee"
        ],
        [
          "-",
          "isEder"
        ],
        [
          "-",
          "mathematical_operator"
        ],
        [
          "-",
          "object"
        ],
        [
          "-",
          "property"
        ],
        [
          "-",
          "queryable"
        ],
        [
          "-",
          "theAble"
        ],
        [
          "/",
          "hierarchyAble"
        ],
        [
          "/",
          "isEdee"
        ],
        [
          "/",
          "isEder"
        ],
        [
          "/",
          "mathematical_operator"
        ],
        [
          "/",
          "object"
        ],
        [
          "/",
          "property"
        ],
        [
          "/",
          "queryable"
        ],
        [
          "/",
          "theAble"
        ],
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "amount",
          "amount"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "calculate",
          "verby"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "convertToUnits",
          "expression"
        ],
        [
          "convertToUnits",
          "queryable"
        ],
        [
          "degree",
          "amount"
        ],
        [
          "dimension",
          "concept"
        ],
        [
          "dimension",
          "hierarchyAble"
        ],
        [
          "dimension",
          "isEdee"
        ],
        [
          "dimension",
          "isEder"
        ],
        [
          "dimension",
          "object"
        ],
        [
          "dimension",
          "property"
        ],
        [
          "dimension",
          "queryable"
        ],
        [
          "dimension",
          "theAble"
        ],
        [
          "divideByExpression",
          "mathematicalExpression"
        ],
        [
          "divideByOperator",
          "mathematicalOperator"
        ],
        [
          "expression",
          "expression"
        ],
        [
          "forVariable",
          "preposition"
        ],
        [
          "formula",
          "concept"
        ],
        [
          "formula",
          "hierarchyAble"
        ],
        [
          "formula",
          "isEdee"
        ],
        [
          "formula",
          "isEder"
        ],
        [
          "formula",
          "object"
        ],
        [
          "formula",
          "property"
        ],
        [
          "formula",
          "queryable"
        ],
        [
          "formula",
          "theAble"
        ],
        [
          "formulaForVariable",
          "preposition"
        ],
        [
          "formulaForVariable",
          "queryable"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "hour",
          "hierarchyAble"
        ],
        [
          "hour",
          "isEdee"
        ],
        [
          "hour",
          "isEder"
        ],
        [
          "hour",
          "object"
        ],
        [
          "hour",
          "property"
        ],
        [
          "hour",
          "queryable"
        ],
        [
          "hour",
          "theAble"
        ],
        [
          "hour",
          "unit"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mathematical",
          "hierarchyAble"
        ],
        [
          "mathematical",
          "isEdee"
        ],
        [
          "mathematical",
          "isEder"
        ],
        [
          "mathematical",
          "object"
        ],
        [
          "mathematical",
          "property"
        ],
        [
          "mathematical",
          "queryable"
        ],
        [
          "mathematical",
          "theAble"
        ],
        [
          "mathematicalExpression",
          "concept"
        ],
        [
          "mathematicalExpression",
          "expression"
        ],
        [
          "mathematicalExpression",
          "number"
        ],
        [
          "mathematicalOperator",
          "mathematicalOperator"
        ],
        [
          "mathematical_operator",
          "adjective"
        ],
        [
          "mathematical_operator",
          "concept"
        ],
        [
          "mathematical_operator",
          "hierarchyAble"
        ],
        [
          "mathematical_operator",
          "isEdee"
        ],
        [
          "mathematical_operator",
          "isEder"
        ],
        [
          "mathematical_operator",
          "object"
        ],
        [
          "mathematical_operator",
          "property"
        ],
        [
          "mathematical_operator",
          "queryable"
        ],
        [
          "mathematical_operator",
          "theAble"
        ],
        [
          "minusExpression",
          "mathematicalExpression"
        ],
        [
          "minusOperator",
          "mathematicalOperator"
        ],
        [
          "minute",
          "hierarchyAble"
        ],
        [
          "minute",
          "isEdee"
        ],
        [
          "minute",
          "isEder"
        ],
        [
          "minute",
          "object"
        ],
        [
          "minute",
          "property"
        ],
        [
          "minute",
          "queryable"
        ],
        [
          "minute",
          "theAble"
        ],
        [
          "minute",
          "unit"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "expression"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "operator",
          "concept"
        ],
        [
          "operator",
          "hierarchyAble"
        ],
        [
          "operator",
          "isEdee"
        ],
        [
          "operator",
          "isEder"
        ],
        [
          "operator",
          "object"
        ],
        [
          "operator",
          "property"
        ],
        [
          "operator",
          "queryable"
        ],
        [
          "operator",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "plusExpression",
          "mathematicalExpression"
        ],
        [
          "plusOperator",
          "mathematicalOperator"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "second",
          "hierarchyAble"
        ],
        [
          "second",
          "isEdee"
        ],
        [
          "second",
          "isEder"
        ],
        [
          "second",
          "object"
        ],
        [
          "second",
          "property"
        ],
        [
          "second",
          "queryable"
        ],
        [
          "second",
          "theAble"
        ],
        [
          "second",
          "unit"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "timesExpression",
          "mathematicalExpression"
        ],
        [
          "timesOperator",
          "mathematicalOperator"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unit",
          "concept"
        ],
        [
          "unit",
          "hierarchyAble"
        ],
        [
          "unit",
          "isEdee"
        ],
        [
          "unit",
          "isEder"
        ],
        [
          "unit",
          "object"
        ],
        [
          "unit",
          "property"
        ],
        [
          "unit",
          "queryable"
        ],
        [
          "unit",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ],
        [
          "year",
          "hierarchyAble"
        ],
        [
          "year",
          "isEdee"
        ],
        [
          "year",
          "isEder"
        ],
        [
          "year",
          "object"
        ],
        [
          "year",
          "property"
        ],
        [
          "year",
          "queryable"
        ],
        [
          "year",
          "theAble"
        ],
        [
          "year",
          "unit"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "number",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ],
              [
                "minute",
                0
              ],
              [
                "number",
                0
              ],
              [
                "second",
                0
              ],
              [
                "timesOperator",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "minute",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ],
              [
                "minute",
                0
              ],
              [
                "second",
                0
              ],
              [
                "timesOperator",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "second",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ],
              [
                "second",
                0
              ],
              [
                "timesOperator",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "timesOperator",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ],
              [
                "timesOperator",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "equals",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ]
            ],
            "counter": 5
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. second/0  - \"seconds\"\n                                   marker: Operator(second/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 6}\n                                   text: seconds\n                                   value: second\n                                   word: seconds\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 8}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. minute/0  - \"minutes\"\n                                   marker: Operator(minute/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 10, 'end': 16}\n                                   text: minutes\n                                   value: minute\n                                   word: minutes\n    3. timesOperator/0  - \"*\"\n                                   marker: Operator(timesOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 18, 'end': 18}\n                                   text: *\n                                   value: *\n                                   word: *\n    4. number/0  - \"60\"\n                                   marker: Operator(number/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 20, 'end': 21}\n                                   text: 60\n                                   value: 60\n                                   word: 60\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({marker: Operator(number/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 21}, text: 60, value: 60, word: 60})\n\n>>>>>>>>>>>>> Counter 2\n    0. second/0  - \"seconds\"\n                                   marker: Operator(second/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 6}\n                                   text: seconds\n                                   value: second\n                                   word: seconds\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 8}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. minute/0  - \"minutes\"\n                                   marker: Operator(minute/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 10, 'end': 16}\n                                   text: minutes\n                                   value: minute\n                                   word: minutes\n    3. timesOperator/0  - \"*\"\n                                   marker: Operator(timesOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 18, 'end': 18}\n                                   text: *\n                                   value: *\n                                   word: *\n   *4. number/1 (dead) - \"60\"\n                                   dead: True\n                                   marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 20, 'end': 21}\n                                   text: 60\n                                   value: 60\n                                   word: 60\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(minute/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 16}, text: minutes, value: minute, word: minutes})\n\n>>>>>>>>>>>>> Counter 3\n    0. second/0  - \"seconds\"\n                                   marker: Operator(second/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 6}\n                                   text: seconds\n                                   value: second\n                                   word: seconds\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 8}\n                                   text: =\n                                   value: =\n                                   word: =\n   *2. minute/1 (dead) - \"minutes\"\n                                   dead: True\n                                   marker: Operator(minute/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 10, 'end': 16}\n                                   text: minutes\n                                   value: minute\n                                   word: minutes\n    3. timesOperator/0  - \"*\"\n                                   marker: Operator(timesOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 18, 'end': 18}\n                                   text: *\n                                   value: *\n                                   word: *\n    4. number/1 (dead) - \"60\"\n                                   dead: True\n                                   marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 20, 'end': 21}\n                                   text: 60\n                                   value: 60\n                                   word: 60\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(second/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: seconds, value: second, word: seconds})\n\n>>>>>>>>>>>>> Counter 4\n   *0. second/1 (dead) - \"seconds\"\n                                   dead: True\n                                   marker: Operator(second/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 6}\n                                   text: seconds\n                                   value: second\n                                   word: seconds\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 8}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. minute/1 (dead) - \"minutes\"\n                                   dead: True\n                                   marker: Operator(minute/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 10, 'end': 16}\n                                   text: minutes\n                                   value: minute\n                                   word: minutes\n    3. timesOperator/0  - \"*\"\n                                   marker: Operator(timesOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 18, 'end': 18}\n                                   text: *\n                                   value: *\n                                   word: *\n    4. number/1 (dead) - \"60\"\n                                   dead: True\n                                   marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 20, 'end': 21}\n                                   text: 60\n                                   value: 60\n                                   word: 60\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({marker: Operator(timesOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge)), range: {'start': 18, 'end': 18}, text: *, value: *, word: *})\n\n>>>>>>>>>>>>> Counter 5\n    0. second/1 (dead) - \"seconds\"\n                                   dead: True\n                                   marker: Operator(second/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 6}\n                                   text: seconds\n                                   value: second\n                                   word: seconds\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 8}\n                                   text: =\n                                   value: =\n                                   word: =\n   *2. timesExpression/1 (dead) - \"minutes * 60\"\n                                   dead: True\n                                   evaluate: True\n                                   isResponse: True\n                                   marker: Operator(timesExpression/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 10, 'end': 21}\n                                   text: minutes * 60\n                                   types: [\n                                   'number'\n                                   ]\n                                   value: None\n                                   word: *\n                                   x: Context({dead: True, marker: Operator(minute/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 16}, text: minutes, types: ['number'], value: minute, word: minutes})\n                                   y: Context({dead: True, marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 20, 'end': 21}, text: 60, types: ['number'], value: 60, word: 60})\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 8}, text: =, value: =, word: =})\n\n>>>>>>>>>>>>> Counter 6\n   *0. equals/1 (dead) - \"seconds = minutes * 60\"\n                                   dead: True\n                                   left: Context({dead: True, marker: Operator(second/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: seconds, types: ['expression'], value: second, word: seconds})\n                                   marker: Operator(equals/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 21}\n                                   right: Context({dead: True, evaluate: True, isResponse: True, marker: Operator(timesExpression/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 10, 'end': 21}, text: minutes * 60, types: ['number', 'timesExpression'], value: None, word: *, x: Context({dead: True, marker: Operator(minute/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 16}, text: minutes, types: ['number'], value: minute, word: minutes}), y: Context({dead: True, marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 20, 'end': 21}, text: 60, types: ['number'], value: 60, word: 60})})\n                                   text: seconds = minutes * 60\n                                   value: =\n                                   word: =\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "value": "=",
          "text": "seconds = minutes * 60",
          "marker": "equals",
          "word": "=",
          "range": {
            "start": 0,
            "end": 21
          },
          "dead": true,
          "left": {
            "value": "second",
            "number": "many",
            "text": "seconds",
            "marker": "second",
            "word": "seconds",
            "range": {
              "start": 0,
              "end": 6
            },
            "dead": true,
            "types": [
              "expression",
              "second"
            ],
            "level": 1
          },
          "right": {
            "value": null,
            "text": "minutes * 60",
            "marker": "timesExpression",
            "word": "*",
            "range": {
              "start": 10,
              "end": 21
            },
            "dead": true,
            "types": [
              "number",
              "timesExpression"
            ],
            "x": {
              "value": "minute",
              "number": "many",
              "text": "minutes",
              "marker": "minute",
              "word": "minutes",
              "range": {
                "start": 10,
                "end": 16
              },
              "dead": true,
              "types": [
                "minute",
                "number"
              ],
              "level": 1
            },
            "y": {
              "value": 60,
              "text": "60",
              "marker": "number",
              "word": "60",
              "range": {
                "start": 20,
                "end": 21
              },
              "dead": true,
              "types": [
                "number"
              ],
              "level": 1
            },
            "number": "one",
            "isResponse": true,
            "evaluate": true,
            "level": 1
          },
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "time_dimension#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "seconds = minutes * 60"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "equals",
            0
          ],
          [
            "minute",
            0
          ],
          [
            "number",
            0
          ],
          [
            "second",
            0
          ],
          [
            "timesOperator",
            0
          ]
        ],
        [
          [
            "equals",
            0
          ],
          [
            "minute",
            0
          ],
          [
            "second",
            0
          ],
          [
            "timesOperator",
            0
          ]
        ],
        [
          [
            "equals",
            0
          ],
          [
            "second",
            0
          ],
          [
            "timesOperator",
            0
          ]
        ],
        [
          [
            "equals",
            0
          ],
          [
            "timesOperator",
            0
          ]
        ]
      ],
      "query": "seconds = minutes * 60",
      "key": {
        "query": "seconds = minutes * 60"
      }
    },
    {
      "hierarchy": [
        [
          "*",
          "hierarchyAble"
        ],
        [
          "*",
          "isEdee"
        ],
        [
          "*",
          "isEder"
        ],
        [
          "*",
          "mathematical_operator"
        ],
        [
          "*",
          "object"
        ],
        [
          "*",
          "property"
        ],
        [
          "*",
          "queryable"
        ],
        [
          "*",
          "theAble"
        ],
        [
          "+",
          "hierarchyAble"
        ],
        [
          "+",
          "isEdee"
        ],
        [
          "+",
          "isEder"
        ],
        [
          "+",
          "mathematical_operator"
        ],
        [
          "+",
          "object"
        ],
        [
          "+",
          "property"
        ],
        [
          "+",
          "queryable"
        ],
        [
          "+",
          "theAble"
        ],
        [
          "-",
          "hierarchyAble"
        ],
        [
          "-",
          "isEdee"
        ],
        [
          "-",
          "isEder"
        ],
        [
          "-",
          "mathematical_operator"
        ],
        [
          "-",
          "object"
        ],
        [
          "-",
          "property"
        ],
        [
          "-",
          "queryable"
        ],
        [
          "-",
          "theAble"
        ],
        [
          "/",
          "hierarchyAble"
        ],
        [
          "/",
          "isEdee"
        ],
        [
          "/",
          "isEder"
        ],
        [
          "/",
          "mathematical_operator"
        ],
        [
          "/",
          "object"
        ],
        [
          "/",
          "property"
        ],
        [
          "/",
          "queryable"
        ],
        [
          "/",
          "theAble"
        ],
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "amount",
          "amount"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "calculate",
          "verby"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "convertToUnits",
          "expression"
        ],
        [
          "convertToUnits",
          "queryable"
        ],
        [
          "degree",
          "amount"
        ],
        [
          "dimension",
          "concept"
        ],
        [
          "dimension",
          "hierarchyAble"
        ],
        [
          "dimension",
          "isEdee"
        ],
        [
          "dimension",
          "isEder"
        ],
        [
          "dimension",
          "object"
        ],
        [
          "dimension",
          "property"
        ],
        [
          "dimension",
          "queryable"
        ],
        [
          "dimension",
          "theAble"
        ],
        [
          "divideByExpression",
          "mathematicalExpression"
        ],
        [
          "divideByOperator",
          "mathematicalOperator"
        ],
        [
          "expression",
          "expression"
        ],
        [
          "forVariable",
          "preposition"
        ],
        [
          "formula",
          "concept"
        ],
        [
          "formula",
          "hierarchyAble"
        ],
        [
          "formula",
          "isEdee"
        ],
        [
          "formula",
          "isEder"
        ],
        [
          "formula",
          "object"
        ],
        [
          "formula",
          "property"
        ],
        [
          "formula",
          "queryable"
        ],
        [
          "formula",
          "theAble"
        ],
        [
          "formulaForVariable",
          "preposition"
        ],
        [
          "formulaForVariable",
          "queryable"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "hour",
          "hierarchyAble"
        ],
        [
          "hour",
          "isEdee"
        ],
        [
          "hour",
          "isEder"
        ],
        [
          "hour",
          "object"
        ],
        [
          "hour",
          "property"
        ],
        [
          "hour",
          "queryable"
        ],
        [
          "hour",
          "theAble"
        ],
        [
          "hour",
          "unit"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mathematical",
          "hierarchyAble"
        ],
        [
          "mathematical",
          "isEdee"
        ],
        [
          "mathematical",
          "isEder"
        ],
        [
          "mathematical",
          "object"
        ],
        [
          "mathematical",
          "property"
        ],
        [
          "mathematical",
          "queryable"
        ],
        [
          "mathematical",
          "theAble"
        ],
        [
          "mathematicalExpression",
          "concept"
        ],
        [
          "mathematicalExpression",
          "expression"
        ],
        [
          "mathematicalExpression",
          "number"
        ],
        [
          "mathematicalOperator",
          "mathematicalOperator"
        ],
        [
          "mathematical_operator",
          "adjective"
        ],
        [
          "mathematical_operator",
          "concept"
        ],
        [
          "mathematical_operator",
          "hierarchyAble"
        ],
        [
          "mathematical_operator",
          "isEdee"
        ],
        [
          "mathematical_operator",
          "isEder"
        ],
        [
          "mathematical_operator",
          "object"
        ],
        [
          "mathematical_operator",
          "property"
        ],
        [
          "mathematical_operator",
          "queryable"
        ],
        [
          "mathematical_operator",
          "theAble"
        ],
        [
          "minusExpression",
          "mathematicalExpression"
        ],
        [
          "minusOperator",
          "mathematicalOperator"
        ],
        [
          "minute",
          "hierarchyAble"
        ],
        [
          "minute",
          "isEdee"
        ],
        [
          "minute",
          "isEder"
        ],
        [
          "minute",
          "object"
        ],
        [
          "minute",
          "property"
        ],
        [
          "minute",
          "queryable"
        ],
        [
          "minute",
          "theAble"
        ],
        [
          "minute",
          "unit"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "expression"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "operator",
          "concept"
        ],
        [
          "operator",
          "hierarchyAble"
        ],
        [
          "operator",
          "isEdee"
        ],
        [
          "operator",
          "isEder"
        ],
        [
          "operator",
          "object"
        ],
        [
          "operator",
          "property"
        ],
        [
          "operator",
          "queryable"
        ],
        [
          "operator",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "plusExpression",
          "mathematicalExpression"
        ],
        [
          "plusOperator",
          "mathematicalOperator"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "second",
          "hierarchyAble"
        ],
        [
          "second",
          "isEdee"
        ],
        [
          "second",
          "isEder"
        ],
        [
          "second",
          "object"
        ],
        [
          "second",
          "property"
        ],
        [
          "second",
          "queryable"
        ],
        [
          "second",
          "theAble"
        ],
        [
          "second",
          "unit"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "timesExpression",
          "mathematicalExpression"
        ],
        [
          "timesOperator",
          "mathematicalOperator"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unit",
          "concept"
        ],
        [
          "unit",
          "hierarchyAble"
        ],
        [
          "unit",
          "isEdee"
        ],
        [
          "unit",
          "isEder"
        ],
        [
          "unit",
          "object"
        ],
        [
          "unit",
          "property"
        ],
        [
          "unit",
          "queryable"
        ],
        [
          "unit",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ],
        [
          "year",
          "hierarchyAble"
        ],
        [
          "year",
          "isEdee"
        ],
        [
          "year",
          "isEder"
        ],
        [
          "year",
          "object"
        ],
        [
          "year",
          "property"
        ],
        [
          "year",
          "queryable"
        ],
        [
          "year",
          "theAble"
        ],
        [
          "year",
          "unit"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "number",
              0
            ],
            "ops": [
              [
                "divideByOperator",
                0
              ],
              [
                "equals",
                0
              ],
              [
                "minute",
                0
              ],
              [
                "number",
                0
              ],
              [
                "second",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "divideByOperator",
              0
            ],
            "ops": [
              [
                "divideByOperator",
                0
              ],
              [
                "equals",
                0
              ],
              [
                "minute",
                0
              ],
              [
                "second",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "minute",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ],
              [
                "minute",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "equals",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ]
            ],
            "counter": 4
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. minute/0  - \"minutes\"\n                                   marker: Operator(minute/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 6}\n                                   text: minutes\n                                   value: minute\n                                   word: minutes\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 8}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. second/0  - \"seconds\"\n                                   marker: Operator(second/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 10, 'end': 16}\n                                   text: seconds\n                                   value: second\n                                   word: seconds\n    3. divideByOperator/0  - \"/\"\n                                   marker: Operator(divideByOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('divideByExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 18, 'end': 18}\n                                   text: /\n                                   value: /\n                                   word: /\n    4. number/0  - \"60\"\n                                   marker: Operator(number/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 20, 'end': 21}\n                                   text: 60\n                                   value: 60\n                                   word: 60\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({marker: Operator(number/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 21}, text: 60, value: 60, word: 60})\n\n>>>>>>>>>>>>> Counter 2\n    0. minute/0  - \"minutes\"\n                                   marker: Operator(minute/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 6}\n                                   text: minutes\n                                   value: minute\n                                   word: minutes\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 8}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. second/0  - \"seconds\"\n                                   marker: Operator(second/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 10, 'end': 16}\n                                   text: seconds\n                                   value: second\n                                   word: seconds\n    3. divideByOperator/0  - \"/\"\n                                   marker: Operator(divideByOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('divideByExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 18, 'end': 18}\n                                   text: /\n                                   value: /\n                                   word: /\n   *4. number/1 (dead) - \"60\"\n                                   dead: True\n                                   marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 20, 'end': 21}\n                                   text: 60\n                                   value: 60\n                                   word: 60\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({marker: Operator(divideByOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('divideByExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge)), range: {'start': 18, 'end': 18}, text: /, value: /, word: /})\n\n>>>>>>>>>>>>> Counter 3\n    0. minute/0  - \"minutes\"\n                                   marker: Operator(minute/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 6}\n                                   text: minutes\n                                   value: minute\n                                   word: minutes\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 8}\n                                   text: =\n                                   value: =\n                                   word: =\n   *2. divideByExpression/1 (dead) - \"seconds / 60\"\n                                   dead: True\n                                   evaluate: True\n                                   isResponse: True\n                                   marker: Operator(divideByExpression/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 10, 'end': 21}\n                                   text: seconds / 60\n                                   types: [\n                                   'number'\n                                   ]\n                                   value: None\n                                   word: /\n                                   x: Context({marker: Operator(second/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 16}, text: seconds, types: ['number'], value: second, word: seconds})\n                                   y: Context({dead: True, marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 20, 'end': 21}, text: 60, types: ['number'], value: 60, word: 60})\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(minute/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: minutes, value: minute, word: minutes})\n\n>>>>>>>>>>>>> Counter 4\n   *0. minute/1 (dead) - \"minutes\"\n                                   dead: True\n                                   marker: Operator(minute/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 6}\n                                   text: minutes\n                                   value: minute\n                                   word: minutes\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 8}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. divideByExpression/1 (dead) - \"seconds / 60\"\n                                   dead: True\n                                   evaluate: True\n                                   isResponse: True\n                                   marker: Operator(divideByExpression/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 10, 'end': 21}\n                                   text: seconds / 60\n                                   types: [\n                                   'number'\n                                   ]\n                                   value: None\n                                   word: /\n                                   x: Context({marker: Operator(second/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 16}, text: seconds, types: ['number'], value: second, word: seconds})\n                                   y: Context({dead: True, marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 20, 'end': 21}, text: 60, types: ['number'], value: 60, word: 60})\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 8}, text: =, value: =, word: =})\n\n>>>>>>>>>>>>> Counter 5\n   *0. equals/1 (dead) - \"minutes = seconds / 60\"\n                                   dead: True\n                                   left: Context({dead: True, marker: Operator(minute/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: minutes, types: ['expression'], value: minute, word: minutes})\n                                   marker: Operator(equals/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 21}\n                                   right: Context({dead: True, evaluate: True, isResponse: True, marker: Operator(divideByExpression/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 10, 'end': 21}, text: seconds / 60, types: ['number', 'divideByExpression'], value: None, word: /, x: Context({marker: Operator(second/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 16}, text: seconds, types: ['number'], value: second, word: seconds}), y: Context({dead: True, marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 20, 'end': 21}, text: 60, types: ['number'], value: 60, word: 60})})\n                                   text: minutes = seconds / 60\n                                   value: =\n                                   word: =\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "value": "=",
          "text": "minutes = seconds / 60",
          "marker": "equals",
          "word": "=",
          "range": {
            "start": 0,
            "end": 21
          },
          "dead": true,
          "left": {
            "value": "minute",
            "number": "many",
            "text": "minutes",
            "marker": "minute",
            "word": "minutes",
            "range": {
              "start": 0,
              "end": 6
            },
            "dead": true,
            "types": [
              "expression",
              "minute"
            ],
            "level": 1
          },
          "right": {
            "value": null,
            "text": "seconds / 60",
            "marker": "divideByExpression",
            "word": "/",
            "range": {
              "start": 10,
              "end": 21
            },
            "dead": true,
            "types": [
              "divideByExpression",
              "number"
            ],
            "x": {
              "value": "second",
              "number": "many",
              "text": "seconds",
              "marker": "second",
              "word": "seconds",
              "range": {
                "start": 10,
                "end": 16
              },
              "types": [
                "number",
                "second"
              ],
              "level": 0
            },
            "y": {
              "value": 60,
              "text": "60",
              "marker": "number",
              "word": "60",
              "range": {
                "start": 20,
                "end": 21
              },
              "dead": true,
              "types": [
                "number"
              ],
              "level": 1
            },
            "number": "one",
            "isResponse": true,
            "evaluate": true,
            "level": 1
          },
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "time_dimension#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "minutes = seconds / 60"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "divideByOperator",
            0
          ],
          [
            "equals",
            0
          ],
          [
            "minute",
            0
          ],
          [
            "number",
            0
          ],
          [
            "second",
            0
          ]
        ],
        [
          [
            "divideByOperator",
            0
          ],
          [
            "equals",
            0
          ],
          [
            "minute",
            0
          ],
          [
            "second",
            0
          ]
        ],
        [
          [
            "equals",
            0
          ],
          [
            "minute",
            0
          ]
        ]
      ],
      "query": "minutes = seconds / 60",
      "key": {
        "query": "minutes = seconds / 60"
      }
    },
    {
      "hierarchy": [
        [
          "*",
          "hierarchyAble"
        ],
        [
          "*",
          "isEdee"
        ],
        [
          "*",
          "isEder"
        ],
        [
          "*",
          "mathematical_operator"
        ],
        [
          "*",
          "object"
        ],
        [
          "*",
          "property"
        ],
        [
          "*",
          "queryable"
        ],
        [
          "*",
          "theAble"
        ],
        [
          "+",
          "hierarchyAble"
        ],
        [
          "+",
          "isEdee"
        ],
        [
          "+",
          "isEder"
        ],
        [
          "+",
          "mathematical_operator"
        ],
        [
          "+",
          "object"
        ],
        [
          "+",
          "property"
        ],
        [
          "+",
          "queryable"
        ],
        [
          "+",
          "theAble"
        ],
        [
          "-",
          "hierarchyAble"
        ],
        [
          "-",
          "isEdee"
        ],
        [
          "-",
          "isEder"
        ],
        [
          "-",
          "mathematical_operator"
        ],
        [
          "-",
          "object"
        ],
        [
          "-",
          "property"
        ],
        [
          "-",
          "queryable"
        ],
        [
          "-",
          "theAble"
        ],
        [
          "/",
          "hierarchyAble"
        ],
        [
          "/",
          "isEdee"
        ],
        [
          "/",
          "isEder"
        ],
        [
          "/",
          "mathematical_operator"
        ],
        [
          "/",
          "object"
        ],
        [
          "/",
          "property"
        ],
        [
          "/",
          "queryable"
        ],
        [
          "/",
          "theAble"
        ],
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "amount",
          "amount"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "calculate",
          "verby"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "convertToUnits",
          "expression"
        ],
        [
          "convertToUnits",
          "queryable"
        ],
        [
          "degree",
          "amount"
        ],
        [
          "dimension",
          "concept"
        ],
        [
          "dimension",
          "hierarchyAble"
        ],
        [
          "dimension",
          "isEdee"
        ],
        [
          "dimension",
          "isEder"
        ],
        [
          "dimension",
          "object"
        ],
        [
          "dimension",
          "property"
        ],
        [
          "dimension",
          "queryable"
        ],
        [
          "dimension",
          "theAble"
        ],
        [
          "divideByExpression",
          "mathematicalExpression"
        ],
        [
          "divideByOperator",
          "mathematicalOperator"
        ],
        [
          "expression",
          "expression"
        ],
        [
          "forVariable",
          "preposition"
        ],
        [
          "formula",
          "concept"
        ],
        [
          "formula",
          "hierarchyAble"
        ],
        [
          "formula",
          "isEdee"
        ],
        [
          "formula",
          "isEder"
        ],
        [
          "formula",
          "object"
        ],
        [
          "formula",
          "property"
        ],
        [
          "formula",
          "queryable"
        ],
        [
          "formula",
          "theAble"
        ],
        [
          "formulaForVariable",
          "preposition"
        ],
        [
          "formulaForVariable",
          "queryable"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "hour",
          "hierarchyAble"
        ],
        [
          "hour",
          "isEdee"
        ],
        [
          "hour",
          "isEder"
        ],
        [
          "hour",
          "object"
        ],
        [
          "hour",
          "property"
        ],
        [
          "hour",
          "queryable"
        ],
        [
          "hour",
          "theAble"
        ],
        [
          "hour",
          "unit"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mathematical",
          "hierarchyAble"
        ],
        [
          "mathematical",
          "isEdee"
        ],
        [
          "mathematical",
          "isEder"
        ],
        [
          "mathematical",
          "object"
        ],
        [
          "mathematical",
          "property"
        ],
        [
          "mathematical",
          "queryable"
        ],
        [
          "mathematical",
          "theAble"
        ],
        [
          "mathematicalExpression",
          "concept"
        ],
        [
          "mathematicalExpression",
          "expression"
        ],
        [
          "mathematicalExpression",
          "number"
        ],
        [
          "mathematicalOperator",
          "mathematicalOperator"
        ],
        [
          "mathematical_operator",
          "adjective"
        ],
        [
          "mathematical_operator",
          "concept"
        ],
        [
          "mathematical_operator",
          "hierarchyAble"
        ],
        [
          "mathematical_operator",
          "isEdee"
        ],
        [
          "mathematical_operator",
          "isEder"
        ],
        [
          "mathematical_operator",
          "object"
        ],
        [
          "mathematical_operator",
          "property"
        ],
        [
          "mathematical_operator",
          "queryable"
        ],
        [
          "mathematical_operator",
          "theAble"
        ],
        [
          "minusExpression",
          "mathematicalExpression"
        ],
        [
          "minusOperator",
          "mathematicalOperator"
        ],
        [
          "minute",
          "hierarchyAble"
        ],
        [
          "minute",
          "isEdee"
        ],
        [
          "minute",
          "isEder"
        ],
        [
          "minute",
          "object"
        ],
        [
          "minute",
          "property"
        ],
        [
          "minute",
          "queryable"
        ],
        [
          "minute",
          "theAble"
        ],
        [
          "minute",
          "unit"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "expression"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "operator",
          "concept"
        ],
        [
          "operator",
          "hierarchyAble"
        ],
        [
          "operator",
          "isEdee"
        ],
        [
          "operator",
          "isEder"
        ],
        [
          "operator",
          "object"
        ],
        [
          "operator",
          "property"
        ],
        [
          "operator",
          "queryable"
        ],
        [
          "operator",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "plusExpression",
          "mathematicalExpression"
        ],
        [
          "plusOperator",
          "mathematicalOperator"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "second",
          "hierarchyAble"
        ],
        [
          "second",
          "isEdee"
        ],
        [
          "second",
          "isEder"
        ],
        [
          "second",
          "object"
        ],
        [
          "second",
          "property"
        ],
        [
          "second",
          "queryable"
        ],
        [
          "second",
          "theAble"
        ],
        [
          "second",
          "unit"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "timesExpression",
          "mathematicalExpression"
        ],
        [
          "timesOperator",
          "mathematicalOperator"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unit",
          "concept"
        ],
        [
          "unit",
          "hierarchyAble"
        ],
        [
          "unit",
          "isEdee"
        ],
        [
          "unit",
          "isEder"
        ],
        [
          "unit",
          "object"
        ],
        [
          "unit",
          "property"
        ],
        [
          "unit",
          "queryable"
        ],
        [
          "unit",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ],
        [
          "year",
          "hierarchyAble"
        ],
        [
          "year",
          "isEdee"
        ],
        [
          "year",
          "isEder"
        ],
        [
          "year",
          "object"
        ],
        [
          "year",
          "property"
        ],
        [
          "year",
          "queryable"
        ],
        [
          "year",
          "theAble"
        ],
        [
          "year",
          "unit"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "divideByOperator",
                0
              ],
              [
                "equals",
                0
              ],
              [
                "hour",
                0
              ],
              [
                "number",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "number",
              0
            ],
            "ops": [
              [
                "divideByOperator",
                0
              ],
              [
                "equals",
                0
              ],
              [
                "hour",
                0
              ],
              [
                "number",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "divideByOperator",
              0
            ],
            "ops": [
              [
                "divideByOperator",
                0
              ],
              [
                "equals",
                0
              ],
              [
                "hour",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "equals",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ]
            ],
            "counter": 4
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"day\"\n                                   marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 2}\n                                   text: day\n                                   value: day\n                                   word: day\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 4, 'end': 4}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. hour/0  - \"hours\"\n                                   marker: Operator(hour/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 6, 'end': 10}\n                                   text: hours\n                                   value: hour\n                                   word: hours\n    3. divideByOperator/0  - \"/\"\n                                   marker: Operator(divideByOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('divideByExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 12, 'end': 12}\n                                   text: /\n                                   value: /\n                                   word: /\n    4. number/0  - \"24\"\n                                   marker: Operator(number/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 14, 'end': 15}\n                                   text: 24\n                                   value: 24\n                                   word: 24\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 2}, text: day, value: day, word: day})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) - \"day\"\n                                   dead: True\n                                   marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 2}\n                                   text: day\n                                   unknown: True\n                                   value: day\n                                   word: day\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 4, 'end': 4}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. hour/0  - \"hours\"\n                                   marker: Operator(hour/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 6, 'end': 10}\n                                   text: hours\n                                   value: hour\n                                   word: hours\n    3. divideByOperator/0  - \"/\"\n                                   marker: Operator(divideByOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('divideByExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 12, 'end': 12}\n                                   text: /\n                                   value: /\n                                   word: /\n    4. number/0  - \"24\"\n                                   marker: Operator(number/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 14, 'end': 15}\n                                   text: 24\n                                   value: 24\n                                   word: 24\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({marker: Operator(number/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 15}, text: 24, value: 24, word: 24})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) - \"day\"\n                                   dead: True\n                                   marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 2}\n                                   text: day\n                                   unknown: True\n                                   value: day\n                                   word: day\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 4, 'end': 4}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. hour/0  - \"hours\"\n                                   marker: Operator(hour/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 6, 'end': 10}\n                                   text: hours\n                                   value: hour\n                                   word: hours\n    3. divideByOperator/0  - \"/\"\n                                   marker: Operator(divideByOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('divideByExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 12, 'end': 12}\n                                   text: /\n                                   value: /\n                                   word: /\n   *4. number/1 (dead) - \"24\"\n                                   dead: True\n                                   marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 14, 'end': 15}\n                                   text: 24\n                                   value: 24\n                                   word: 24\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({marker: Operator(divideByOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('divideByExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 12}, text: /, value: /, word: /})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1 (dead) - \"day\"\n                                   dead: True\n                                   marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 2}\n                                   text: day\n                                   unknown: True\n                                   value: day\n                                   word: day\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 4, 'end': 4}\n                                   text: =\n                                   value: =\n                                   word: =\n   *2. divideByExpression/1 (dead) - \"hours / 24\"\n                                   dead: True\n                                   evaluate: True\n                                   isResponse: True\n                                   marker: Operator(divideByExpression/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 6, 'end': 15}\n                                   text: hours / 24\n                                   types: [\n                                   'number'\n                                   ]\n                                   value: None\n                                   word: /\n                                   x: Context({marker: Operator(hour/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 6, 'end': 10}, text: hours, types: ['number'], value: hour, word: hours})\n                                   y: Context({dead: True, marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 14, 'end': 15}, text: 24, types: ['number'], value: 24, word: 24})\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge)), range: {'start': 4, 'end': 4}, text: =, value: =, word: =})\n\n>>>>>>>>>>>>> Counter 5\n   *0. equals/1 (dead) - \"day = hours / 24\"\n                                   dead: True\n                                   left: Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 2}, text: day, types: ['expression'], unknown: True, value: day, word: day})\n                                   marker: Operator(equals/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 15}\n                                   right: Context({dead: True, evaluate: True, isResponse: True, marker: Operator(divideByExpression/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 6, 'end': 15}, text: hours / 24, types: ['number', 'divideByExpression'], value: None, word: /, x: Context({marker: Operator(hour/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 6, 'end': 10}, text: hours, types: ['number'], value: hour, word: hours}), y: Context({dead: True, marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 14, 'end': 15}, text: 24, types: ['number'], value: 24, word: 24})})\n                                   text: day = hours / 24\n                                   value: =\n                                   word: =\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "value": "=",
          "text": "day = hours / 24",
          "marker": "equals",
          "word": "=",
          "range": {
            "start": 0,
            "end": 15
          },
          "dead": true,
          "left": {
            "marker": "unknown",
            "range": {
              "start": 0,
              "end": 2
            },
            "word": "day",
            "text": "day",
            "value": "day",
            "unknown": true,
            "dead": true,
            "types": [
              "expression",
              "unknown"
            ],
            "level": 1
          },
          "right": {
            "value": null,
            "text": "hours / 24",
            "marker": "divideByExpression",
            "word": "/",
            "range": {
              "start": 6,
              "end": 15
            },
            "dead": true,
            "types": [
              "divideByExpression",
              "number"
            ],
            "x": {
              "value": "hour",
              "number": "many",
              "text": "hours",
              "marker": "hour",
              "word": "hours",
              "range": {
                "start": 6,
                "end": 10
              },
              "types": [
                "hour",
                "number"
              ],
              "level": 0
            },
            "y": {
              "value": 24,
              "text": "24",
              "marker": "number",
              "word": "24",
              "range": {
                "start": 14,
                "end": 15
              },
              "dead": true,
              "types": [
                "number"
              ],
              "level": 1
            },
            "number": "one",
            "isResponse": true,
            "evaluate": true,
            "level": 1
          },
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "time_dimension#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "day = hours / 24"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "/",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "divideByOperator",
            0
          ],
          [
            "equals",
            0
          ],
          [
            "hour",
            0
          ],
          [
            "number",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "divideByOperator",
            0
          ],
          [
            "equals",
            0
          ],
          [
            "hour",
            0
          ],
          [
            "number",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "divideByOperator",
            0
          ],
          [
            "equals",
            0
          ],
          [
            "hour",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "equals",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "query": "day = hours / 24",
      "key": {
        "query": "day = hours / 24"
      }
    },
    {
      "hierarchy": [
        [
          "*",
          "hierarchyAble"
        ],
        [
          "*",
          "isEdee"
        ],
        [
          "*",
          "isEder"
        ],
        [
          "*",
          "mathematical_operator"
        ],
        [
          "*",
          "object"
        ],
        [
          "*",
          "property"
        ],
        [
          "*",
          "queryable"
        ],
        [
          "*",
          "theAble"
        ],
        [
          "+",
          "hierarchyAble"
        ],
        [
          "+",
          "isEdee"
        ],
        [
          "+",
          "isEder"
        ],
        [
          "+",
          "mathematical_operator"
        ],
        [
          "+",
          "object"
        ],
        [
          "+",
          "property"
        ],
        [
          "+",
          "queryable"
        ],
        [
          "+",
          "theAble"
        ],
        [
          "-",
          "hierarchyAble"
        ],
        [
          "-",
          "isEdee"
        ],
        [
          "-",
          "isEder"
        ],
        [
          "-",
          "mathematical_operator"
        ],
        [
          "-",
          "object"
        ],
        [
          "-",
          "property"
        ],
        [
          "-",
          "queryable"
        ],
        [
          "-",
          "theAble"
        ],
        [
          "/",
          "hierarchyAble"
        ],
        [
          "/",
          "isEdee"
        ],
        [
          "/",
          "isEder"
        ],
        [
          "/",
          "mathematical_operator"
        ],
        [
          "/",
          "object"
        ],
        [
          "/",
          "property"
        ],
        [
          "/",
          "queryable"
        ],
        [
          "/",
          "theAble"
        ],
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "amount",
          "amount"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "calculate",
          "verby"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "convertToUnits",
          "expression"
        ],
        [
          "convertToUnits",
          "queryable"
        ],
        [
          "degree",
          "amount"
        ],
        [
          "dimension",
          "concept"
        ],
        [
          "dimension",
          "hierarchyAble"
        ],
        [
          "dimension",
          "isEdee"
        ],
        [
          "dimension",
          "isEder"
        ],
        [
          "dimension",
          "object"
        ],
        [
          "dimension",
          "property"
        ],
        [
          "dimension",
          "queryable"
        ],
        [
          "dimension",
          "theAble"
        ],
        [
          "divideByExpression",
          "mathematicalExpression"
        ],
        [
          "divideByOperator",
          "mathematicalOperator"
        ],
        [
          "expression",
          "expression"
        ],
        [
          "forVariable",
          "preposition"
        ],
        [
          "formula",
          "concept"
        ],
        [
          "formula",
          "hierarchyAble"
        ],
        [
          "formula",
          "isEdee"
        ],
        [
          "formula",
          "isEder"
        ],
        [
          "formula",
          "object"
        ],
        [
          "formula",
          "property"
        ],
        [
          "formula",
          "queryable"
        ],
        [
          "formula",
          "theAble"
        ],
        [
          "formulaForVariable",
          "preposition"
        ],
        [
          "formulaForVariable",
          "queryable"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "hour",
          "hierarchyAble"
        ],
        [
          "hour",
          "isEdee"
        ],
        [
          "hour",
          "isEder"
        ],
        [
          "hour",
          "object"
        ],
        [
          "hour",
          "property"
        ],
        [
          "hour",
          "queryable"
        ],
        [
          "hour",
          "theAble"
        ],
        [
          "hour",
          "unit"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mathematical",
          "hierarchyAble"
        ],
        [
          "mathematical",
          "isEdee"
        ],
        [
          "mathematical",
          "isEder"
        ],
        [
          "mathematical",
          "object"
        ],
        [
          "mathematical",
          "property"
        ],
        [
          "mathematical",
          "queryable"
        ],
        [
          "mathematical",
          "theAble"
        ],
        [
          "mathematicalExpression",
          "concept"
        ],
        [
          "mathematicalExpression",
          "expression"
        ],
        [
          "mathematicalExpression",
          "number"
        ],
        [
          "mathematicalOperator",
          "mathematicalOperator"
        ],
        [
          "mathematical_operator",
          "adjective"
        ],
        [
          "mathematical_operator",
          "concept"
        ],
        [
          "mathematical_operator",
          "hierarchyAble"
        ],
        [
          "mathematical_operator",
          "isEdee"
        ],
        [
          "mathematical_operator",
          "isEder"
        ],
        [
          "mathematical_operator",
          "object"
        ],
        [
          "mathematical_operator",
          "property"
        ],
        [
          "mathematical_operator",
          "queryable"
        ],
        [
          "mathematical_operator",
          "theAble"
        ],
        [
          "minusExpression",
          "mathematicalExpression"
        ],
        [
          "minusOperator",
          "mathematicalOperator"
        ],
        [
          "minute",
          "hierarchyAble"
        ],
        [
          "minute",
          "isEdee"
        ],
        [
          "minute",
          "isEder"
        ],
        [
          "minute",
          "object"
        ],
        [
          "minute",
          "property"
        ],
        [
          "minute",
          "queryable"
        ],
        [
          "minute",
          "theAble"
        ],
        [
          "minute",
          "unit"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "expression"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "operator",
          "concept"
        ],
        [
          "operator",
          "hierarchyAble"
        ],
        [
          "operator",
          "isEdee"
        ],
        [
          "operator",
          "isEder"
        ],
        [
          "operator",
          "object"
        ],
        [
          "operator",
          "property"
        ],
        [
          "operator",
          "queryable"
        ],
        [
          "operator",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "plusExpression",
          "mathematicalExpression"
        ],
        [
          "plusOperator",
          "mathematicalOperator"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "second",
          "hierarchyAble"
        ],
        [
          "second",
          "isEdee"
        ],
        [
          "second",
          "isEder"
        ],
        [
          "second",
          "object"
        ],
        [
          "second",
          "property"
        ],
        [
          "second",
          "queryable"
        ],
        [
          "second",
          "theAble"
        ],
        [
          "second",
          "unit"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "timesExpression",
          "mathematicalExpression"
        ],
        [
          "timesOperator",
          "mathematicalOperator"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unit",
          "concept"
        ],
        [
          "unit",
          "hierarchyAble"
        ],
        [
          "unit",
          "isEdee"
        ],
        [
          "unit",
          "isEder"
        ],
        [
          "unit",
          "object"
        ],
        [
          "unit",
          "property"
        ],
        [
          "unit",
          "queryable"
        ],
        [
          "unit",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ],
        [
          "year",
          "hierarchyAble"
        ],
        [
          "year",
          "isEdee"
        ],
        [
          "year",
          "isEder"
        ],
        [
          "year",
          "object"
        ],
        [
          "year",
          "property"
        ],
        [
          "year",
          "queryable"
        ],
        [
          "year",
          "theAble"
        ],
        [
          "year",
          "unit"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ],
              [
                "hour",
                0
              ],
              [
                "number",
                0
              ],
              [
                "timesOperator",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "number",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ],
              [
                "hour",
                0
              ],
              [
                "number",
                0
              ],
              [
                "timesOperator",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "hour",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ],
              [
                "hour",
                0
              ],
              [
                "timesOperator",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "timesOperator",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ],
              [
                "timesOperator",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "equals",
              0
            ],
            "ops": [
              [
                "equals",
                0
              ]
            ],
            "counter": 5
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. hour/0  - \"hours\"\n                                   marker: Operator(hour/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 4}\n                                   text: hours\n                                   value: hour\n                                   word: hours\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 6}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. unknown/0  - \"days\"\n                                   marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 11}\n                                   text: days\n                                   value: days\n                                   word: days\n    3. timesOperator/0  - \"*\"\n                                   marker: Operator(timesOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 13, 'end': 13}\n                                   text: *\n                                   value: *\n                                   word: *\n    4. number/0  - \"24\"\n                                   marker: Operator(number/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 15, 'end': 16}\n                                   text: 24\n                                   value: 24\n                                   word: 24\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 11}, text: days, value: days, word: days})\n\n>>>>>>>>>>>>> Counter 2\n    0. hour/0  - \"hours\"\n                                   marker: Operator(hour/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 4}\n                                   text: hours\n                                   value: hour\n                                   word: hours\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 6}\n                                   text: =\n                                   value: =\n                                   word: =\n   *2. unknown/1 (dead) - \"days\"\n                                   dead: True\n                                   marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 11}\n                                   text: days\n                                   unknown: True\n                                   value: days\n                                   word: days\n    3. timesOperator/0  - \"*\"\n                                   marker: Operator(timesOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 13, 'end': 13}\n                                   text: *\n                                   value: *\n                                   word: *\n    4. number/0  - \"24\"\n                                   marker: Operator(number/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 15, 'end': 16}\n                                   text: 24\n                                   value: 24\n                                   word: 24\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({marker: Operator(number/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 16}, text: 24, value: 24, word: 24})\n\n>>>>>>>>>>>>> Counter 3\n    0. hour/0  - \"hours\"\n                                   marker: Operator(hour/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 4}\n                                   text: hours\n                                   value: hour\n                                   word: hours\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 6}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. unknown/1 (dead) - \"days\"\n                                   dead: True\n                                   marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 11}\n                                   text: days\n                                   unknown: True\n                                   value: days\n                                   word: days\n    3. timesOperator/0  - \"*\"\n                                   marker: Operator(timesOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 13, 'end': 13}\n                                   text: *\n                                   value: *\n                                   word: *\n   *4. number/1 (dead) - \"24\"\n                                   dead: True\n                                   marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 15, 'end': 16}\n                                   text: 24\n                                   value: 24\n                                   word: 24\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(hour/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 4}, text: hours, value: hour, word: hours})\n\n>>>>>>>>>>>>> Counter 4\n   *0. hour/1 (dead) - \"hours\"\n                                   dead: True\n                                   marker: Operator(hour/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 4}\n                                   text: hours\n                                   value: hour\n                                   word: hours\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 6}\n                                   text: =\n                                   value: =\n                                   word: =\n    2. unknown/1 (dead) - \"days\"\n                                   dead: True\n                                   marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 11}\n                                   text: days\n                                   unknown: True\n                                   value: days\n                                   word: days\n    3. timesOperator/0  - \"*\"\n                                   marker: Operator(timesOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 13, 'end': 13}\n                                   text: *\n                                   value: *\n                                   word: *\n    4. number/1 (dead) - \"24\"\n                                   dead: True\n                                   marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 15, 'end': 16}\n                                   text: 24\n                                   value: 24\n                                   word: 24\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({marker: Operator(timesOperator/0, None, evaluator(Bridge('{ ...next(operator), marker: next(operator('timesExpression')), types: lub(append(['mathematicalExpression'], operator.types, before[0].types, after[0].types)), value: null, x: before[0], y: after[0], number: 'one', isResponse: true, evaluate: true }')), variables({}) bridge(bridge)), range: {'start': 13, 'end': 13}, text: *, value: *, word: *})\n\n>>>>>>>>>>>>> Counter 5\n    0. hour/1 (dead) - \"hours\"\n                                   dead: True\n                                   marker: Operator(hour/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 0, 'end': 4}\n                                   text: hours\n                                   value: hour\n                                   word: hours\n    1. equals/0  - \"=\"\n                                   marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 6}\n                                   text: =\n                                   value: =\n                                   word: =\n   *2. timesExpression/1 (dead) - \"days * 24\"\n                                   dead: True\n                                   evaluate: True\n                                   isResponse: True\n                                   marker: Operator(timesExpression/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 16}\n                                   text: days * 24\n                                   types: [\n                                   'number'\n                                   ]\n                                   value: None\n                                   word: *\n                                   x: Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 11}, text: days, types: ['number'], unknown: True, value: days, word: days})\n                                   y: Context({dead: True, marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 15, 'end': 16}, text: 24, types: ['number'], value: 24, word: 24})\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(equals/0, None, evaluator(Bridge('{ ...next(operator), left: before[0], right: after[0] }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 6}, text: =, value: =, word: =})\n\n>>>>>>>>>>>>> Counter 6\n   *0. equals/1 (dead) - \"hours = days * 24\"\n                                   dead: True\n                                   left: Context({dead: True, marker: Operator(hour/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 4}, text: hours, types: ['expression'], value: hour, word: hours})\n                                   marker: Operator(equals/1, None, evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 16}\n                                   right: Context({dead: True, evaluate: True, isResponse: True, marker: Operator(timesExpression/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 8, 'end': 16}, text: days * 24, types: ['number', 'timesExpression'], value: None, word: *, x: Context({dead: True, marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 11}, text: days, types: ['number'], unknown: True, value: days, word: days}), y: Context({dead: True, marker: Operator(number/1, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 15, 'end': 16}, text: 24, types: ['number'], value: 24, word: 24})})\n                                   text: hours = days * 24\n                                   value: =\n                                   word: =\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "value": "=",
          "text": "hours = days * 24",
          "marker": "equals",
          "word": "=",
          "range": {
            "start": 0,
            "end": 16
          },
          "dead": true,
          "left": {
            "value": "hour",
            "number": "many",
            "text": "hours",
            "marker": "hour",
            "word": "hours",
            "range": {
              "start": 0,
              "end": 4
            },
            "dead": true,
            "types": [
              "expression",
              "hour"
            ],
            "level": 1
          },
          "right": {
            "value": null,
            "text": "days * 24",
            "marker": "timesExpression",
            "word": "*",
            "range": {
              "start": 8,
              "end": 16
            },
            "dead": true,
            "types": [
              "number",
              "timesExpression"
            ],
            "x": {
              "marker": "unknown",
              "range": {
                "start": 8,
                "end": 11
              },
              "word": "days",
              "text": "days",
              "value": "days",
              "unknown": true,
              "dead": true,
              "types": [
                "number",
                "unknown"
              ],
              "level": 1
            },
            "y": {
              "value": 24,
              "text": "24",
              "marker": "number",
              "word": "24",
              "range": {
                "start": 15,
                "end": 16
              },
              "dead": true,
              "types": [
                "number"
              ],
              "level": 1
            },
            "number": "one",
            "isResponse": true,
            "evaluate": true,
            "level": 1
          },
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "time_dimension#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "hours = days * 24"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "*",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "equals",
            0
          ],
          [
            "hour",
            0
          ],
          [
            "number",
            0
          ],
          [
            "timesOperator",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "equals",
            0
          ],
          [
            "hour",
            0
          ],
          [
            "number",
            0
          ],
          [
            "timesOperator",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "equals",
            0
          ],
          [
            "hour",
            0
          ],
          [
            "timesOperator",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "equals",
            0
          ],
          [
            "timesOperator",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "query": "hours = days * 24",
      "key": {
        "query": "hours = days * 24"
      }
    }
  ],
  "fragments": [],
  "semantics": [],
  "associations": [
    [
      [
        "*",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "/",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "divideByOperator",
        0
      ],
      [
        "equals",
        0
      ],
      [
        "hour",
        0
      ],
      [
        "minute",
        0
      ]
    ],
    [
      [
        "divideByOperator",
        0
      ],
      [
        "equals",
        0
      ],
      [
        "hour",
        0
      ],
      [
        "minute",
        0
      ],
      [
        "number",
        0
      ]
    ],
    [
      [
        "divideByOperator",
        0
      ],
      [
        "equals",
        0
      ],
      [
        "hour",
        0
      ],
      [
        "number",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "divideByOperator",
        0
      ],
      [
        "equals",
        0
      ],
      [
        "hour",
        0
      ],
      [
        "number",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "divideByOperator",
        0
      ],
      [
        "equals",
        0
      ],
      [
        "hour",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "divideByOperator",
        0
      ],
      [
        "equals",
        0
      ],
      [
        "minute",
        0
      ],
      [
        "number",
        0
      ],
      [
        "second",
        0
      ]
    ],
    [
      [
        "divideByOperator",
        0
      ],
      [
        "equals",
        0
      ],
      [
        "minute",
        0
      ],
      [
        "second",
        0
      ]
    ],
    [
      [
        "equals",
        0
      ],
      [
        "hour",
        0
      ]
    ],
    [
      [
        "equals",
        0
      ],
      [
        "hour",
        0
      ],
      [
        "minute",
        0
      ],
      [
        "number",
        0
      ],
      [
        "timesOperator",
        0
      ]
    ],
    [
      [
        "equals",
        0
      ],
      [
        "hour",
        0
      ],
      [
        "minute",
        0
      ],
      [
        "timesOperator",
        0
      ]
    ],
    [
      [
        "equals",
        0
      ],
      [
        "hour",
        0
      ],
      [
        "number",
        0
      ],
      [
        "timesOperator",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "equals",
        0
      ],
      [
        "hour",
        0
      ],
      [
        "number",
        0
      ],
      [
        "timesOperator",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "equals",
        0
      ],
      [
        "hour",
        0
      ],
      [
        "timesOperator",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "equals",
        0
      ],
      [
        "minute",
        0
      ]
    ],
    [
      [
        "equals",
        0
      ],
      [
        "minute",
        0
      ],
      [
        "number",
        0
      ],
      [
        "second",
        0
      ],
      [
        "timesOperator",
        0
      ]
    ],
    [
      [
        "equals",
        0
      ],
      [
        "minute",
        0
      ],
      [
        "second",
        0
      ],
      [
        "timesOperator",
        0
      ]
    ],
    [
      [
        "equals",
        0
      ],
      [
        "minute",
        0
      ],
      [
        "timesOperator",
        0
      ]
    ],
    [
      [
        "equals",
        0
      ],
      [
        "second",
        0
      ],
      [
        "timesOperator",
        0
      ]
    ],
    [
      [
        "equals",
        0
      ],
      [
        "timesOperator",
        0
      ]
    ],
    [
      [
        "equals",
        0
      ],
      [
        "timesOperator",
        0
      ]
    ],
    [
      [
        "equals",
        0
      ],
      [
        "timesOperator",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "equals",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "propertyOf",
        0
      ],
      [
        "unit",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "propertyOf",
        0
      ],
      [
        "unit",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "propertyOf",
        0
      ],
      [
        "unit",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "propertyOf",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "propertyOf",
        1
      ]
    ]
  ]
}