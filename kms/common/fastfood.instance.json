{
  "queries": [
    "food is countable",
    "bacon modifies deluxe",
    {
      "priorities": [
        [
          [
            "bacon_deluxe",
            0
          ],
          [
            "list",
            0
          ]
        ]
      ]
    },
    "chicken modifies sandwich",
    {
      "priorities": [
        [
          [
            "chicken_sandwich",
            0
          ],
          [
            "list",
            0
          ]
        ]
      ]
    },
    "premium modifies cod",
    {
      "priorities": [
        [
          [
            "premium_cod",
            0
          ],
          [
            "list",
            0
          ]
        ]
      ]
    },
    "ultimate chicken modifies grill",
    {
      "priorities": [
        [
          [
            "ultimate_chicken_grill",
            0
          ],
          [
            "list",
            0
          ]
        ]
      ]
    },
    "asiago ranch chicken modifies club",
    {
      "priorities": [
        [
          [
            "asiago_ranch_chicken_club",
            0
          ],
          [
            "list",
            0
          ]
        ]
      ]
    },
    "single double triple baconater and bacon deluxe are hamburgers",
    "spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod are sandwiches",
    "a meals is food",
    "a combo is a meal",
    "single double triple baconater bacon deluxe spicy homestyle and premium cod are meals",
    {
      "where": "/home/dev/code/theprogrammablemind/kms/common/fastfood.js:58",
      "operators": [
        "((meal/* && context.comboNumber == undefined) [comboMeal] (combo/*))",
        "((combo/*) [comboNumber] (number/* || numberNumberCombo/*))",
        "((numberNumberCombo/1) [numberNumberCombo_combo|] (combo/0))",
        "((number/0,1 && context.instance == undefined) [numberNumberCombo] (number/0,1))"
      ],
      "priorities": [
        [
          [
            "number",
            0
          ],
          [
            "numberNumberCombo",
            0
          ]
        ],
        [
          [
            "list",
            0
          ],
          [
            "numberNumberCombo",
            0
          ]
        ],
        [
          [
            "list",
            0
          ],
          [
            "comboNumber",
            0
          ]
        ]
      ],
      "generators": [
        {
          "where": "/home/dev/code/theprogrammablemind/kms/common/fastfood.js:86",
          "match": "({context}) => false && context.marker == 'combo' && context.comboNumber",
          "apply": "({context, g}) => g(context.comboNumber)"
        }
      ],
      "bridges": [
        {
          "id": "numberNumberCombo_combo",
          "convolution": true,
          "isA": [
            "food"
          ],
          "before": [
            "combo",
            "counting"
          ],
          "bridge": "{ ...next(operator), modifiers: append(before[0].modifiers, ['comboNumber']), comboNumber: before[0], word: 'combo', flatten: true }"
        },
        {
          "id": "comboMeal",
          "convolution": true,
          "before": [
            "meal",
            "combo",
            "counting"
          ],
          "bridge": "{ ...next(after[0]), modifiers: append(before[0].modifiers, ['type']), type: before[0], flatten: true }"
        },
        {
          "id": "comboNumber",
          "convolution": true,
          "before": [
            "combo"
          ],
          "bridge": "{ ...next(before[0]), postModifiers: append(before[0].modifiers, ['comboNumber']), comboNumber: after[0], instance: true, flatten: true }",
          "nncBridge": "{ ...next(before[0]), postModifiers: append(before[0].modifiers, ['comboNumber']), comboNumber: after[0].comboNumber, flatten: true }"
        },
        {
          "id": "numberNumberCombo",
          "convolution": true,
          "isA": [
            "food"
          ],
          "before": [
            "combo",
            "comboNumber"
          ],
          "bridge": "{ ...next(operator), word: 'number', combo: true, postModifiers: append(before[0].postModifiers, ['comboNumber']), comboNumber: after[0], flatten: true }"
        }
      ]
    }
  ],
  "resultss": [
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "apple",
          "fruit"
        ],
        [
          "apple",
          "hierarchyAble"
        ],
        [
          "apple",
          "isEdee"
        ],
        [
          "apple",
          "isEder"
        ],
        [
          "apple",
          "object"
        ],
        [
          "apple",
          "property"
        ],
        [
          "apple",
          "queryable"
        ],
        [
          "apple",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "banana",
          "fruit"
        ],
        [
          "banana",
          "hierarchyAble"
        ],
        [
          "banana",
          "isEdee"
        ],
        [
          "banana",
          "isEder"
        ],
        [
          "banana",
          "object"
        ],
        [
          "banana",
          "property"
        ],
        [
          "banana",
          "queryable"
        ],
        [
          "banana",
          "theAble"
        ],
        [
          "between",
          "preposition"
        ],
        [
          "brocoli",
          "hierarchyAble"
        ],
        [
          "brocoli",
          "isEdee"
        ],
        [
          "brocoli",
          "isEder"
        ],
        [
          "brocoli",
          "object"
        ],
        [
          "brocoli",
          "property"
        ],
        [
          "brocoli",
          "queryable"
        ],
        [
          "brocoli",
          "theAble"
        ],
        [
          "brocoli",
          "vegetable"
        ],
        [
          "cabbage",
          "hierarchyAble"
        ],
        [
          "cabbage",
          "isEdee"
        ],
        [
          "cabbage",
          "isEder"
        ],
        [
          "cabbage",
          "object"
        ],
        [
          "cabbage",
          "property"
        ],
        [
          "cabbage",
          "queryable"
        ],
        [
          "cabbage",
          "theAble"
        ],
        [
          "cabbage",
          "vegetable"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "carrot",
          "hierarchyAble"
        ],
        [
          "carrot",
          "isEdee"
        ],
        [
          "carrot",
          "isEder"
        ],
        [
          "carrot",
          "object"
        ],
        [
          "carrot",
          "property"
        ],
        [
          "carrot",
          "queryable"
        ],
        [
          "carrot",
          "theAble"
        ],
        [
          "carrot",
          "vegetable"
        ],
        [
          "changes",
          "event"
        ],
        [
          "changes",
          "verby"
        ],
        [
          "chicken",
          "hierarchyAble"
        ],
        [
          "chicken",
          "isEdee"
        ],
        [
          "chicken",
          "isEder"
        ],
        [
          "chicken",
          "object"
        ],
        [
          "chicken",
          "property"
        ],
        [
          "chicken",
          "queryable"
        ],
        [
          "chicken",
          "theAble"
        ],
        [
          "chicken_strip",
          "adjective"
        ],
        [
          "chicken_strip",
          "concept"
        ],
        [
          "chicken_strip",
          "food"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "isEdee"
        ],
        [
          "chicken_strip",
          "isEder"
        ],
        [
          "chicken_strip",
          "object"
        ],
        [
          "chicken_strip",
          "property"
        ],
        [
          "chicken_strip",
          "queryable"
        ],
        [
          "chicken_strip",
          "theAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "countable",
          "hierarchyAble"
        ],
        [
          "dog",
          "concept"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "dog",
          "isEdee"
        ],
        [
          "dog",
          "isEder"
        ],
        [
          "dog",
          "object"
        ],
        [
          "dog",
          "property"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "event",
          "event"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "french",
          "hierarchyAble"
        ],
        [
          "french",
          "isEdee"
        ],
        [
          "french",
          "isEder"
        ],
        [
          "french",
          "object"
        ],
        [
          "french",
          "property"
        ],
        [
          "french",
          "queryable"
        ],
        [
          "french",
          "theAble"
        ],
        [
          "french_fry",
          "adjective"
        ],
        [
          "french_fry",
          "concept"
        ],
        [
          "french_fry",
          "food"
        ],
        [
          "french_fry",
          "hierarchyAble"
        ],
        [
          "french_fry",
          "isEdee"
        ],
        [
          "french_fry",
          "isEder"
        ],
        [
          "french_fry",
          "object"
        ],
        [
          "french_fry",
          "property"
        ],
        [
          "french_fry",
          "queryable"
        ],
        [
          "french_fry",
          "theAble"
        ],
        [
          "fruit",
          "food"
        ],
        [
          "fruit",
          "hierarchyAble"
        ],
        [
          "fruit",
          "isEdee"
        ],
        [
          "fruit",
          "isEder"
        ],
        [
          "fruit",
          "object"
        ],
        [
          "fruit",
          "property"
        ],
        [
          "fruit",
          "queryable"
        ],
        [
          "fruit",
          "theAble"
        ],
        [
          "fry",
          "concept"
        ],
        [
          "fry",
          "hierarchyAble"
        ],
        [
          "fry",
          "isEdee"
        ],
        [
          "fry",
          "isEder"
        ],
        [
          "fry",
          "object"
        ],
        [
          "fry",
          "property"
        ],
        [
          "fry",
          "queryable"
        ],
        [
          "fry",
          "theAble"
        ],
        [
          "hamburger",
          "hierarchyAble"
        ],
        [
          "hamburger",
          "isEdee"
        ],
        [
          "hamburger",
          "isEder"
        ],
        [
          "hamburger",
          "object"
        ],
        [
          "hamburger",
          "property"
        ],
        [
          "hamburger",
          "queryable"
        ],
        [
          "hamburger",
          "sandwich"
        ],
        [
          "hamburger",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "hot",
          "hierarchyAble"
        ],
        [
          "hot",
          "isEdee"
        ],
        [
          "hot",
          "isEder"
        ],
        [
          "hot",
          "object"
        ],
        [
          "hot",
          "property"
        ],
        [
          "hot",
          "queryable"
        ],
        [
          "hot",
          "theAble"
        ],
        [
          "hot_dog",
          "adjective"
        ],
        [
          "hot_dog",
          "concept"
        ],
        [
          "hot_dog",
          "hierarchyAble"
        ],
        [
          "hot_dog",
          "isEdee"
        ],
        [
          "hot_dog",
          "isEder"
        ],
        [
          "hot_dog",
          "object"
        ],
        [
          "hot_dog",
          "property"
        ],
        [
          "hot_dog",
          "queryable"
        ],
        [
          "hot_dog",
          "sausage"
        ],
        [
          "hot_dog",
          "theAble"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "meat",
          "food"
        ],
        [
          "meat",
          "hierarchyAble"
        ],
        [
          "meat",
          "isEdee"
        ],
        [
          "meat",
          "isEder"
        ],
        [
          "meat",
          "object"
        ],
        [
          "meat",
          "property"
        ],
        [
          "meat",
          "queryable"
        ],
        [
          "meat",
          "theAble"
        ],
        [
          "modifies",
          "verby"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "noun",
          "theAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "orange",
          "fruit"
        ],
        [
          "orange",
          "hierarchyAble"
        ],
        [
          "orange",
          "isEdee"
        ],
        [
          "orange",
          "isEder"
        ],
        [
          "orange",
          "object"
        ],
        [
          "orange",
          "property"
        ],
        [
          "orange",
          "queryable"
        ],
        [
          "orange",
          "theAble"
        ],
        [
          "orderNoun",
          "noun"
        ],
        [
          "orderNoun",
          "queryable"
        ],
        [
          "pea",
          "hierarchyAble"
        ],
        [
          "pea",
          "isEdee"
        ],
        [
          "pea",
          "isEder"
        ],
        [
          "pea",
          "object"
        ],
        [
          "pea",
          "property"
        ],
        [
          "pea",
          "queryable"
        ],
        [
          "pea",
          "theAble"
        ],
        [
          "pea",
          "vegetable"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "sandwich",
          "food"
        ],
        [
          "sandwich",
          "hierarchyAble"
        ],
        [
          "sandwich",
          "isEdee"
        ],
        [
          "sandwich",
          "isEder"
        ],
        [
          "sandwich",
          "object"
        ],
        [
          "sandwich",
          "property"
        ],
        [
          "sandwich",
          "queryable"
        ],
        [
          "sandwich",
          "theAble"
        ],
        [
          "sausage",
          "hierarchyAble"
        ],
        [
          "sausage",
          "isEdee"
        ],
        [
          "sausage",
          "isEder"
        ],
        [
          "sausage",
          "meat"
        ],
        [
          "sausage",
          "object"
        ],
        [
          "sausage",
          "property"
        ],
        [
          "sausage",
          "queryable"
        ],
        [
          "sausage",
          "theAble"
        ],
        [
          "showOrder",
          "verby"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "strip",
          "isEdee"
        ],
        [
          "strip",
          "isEder"
        ],
        [
          "strip",
          "object"
        ],
        [
          "strip",
          "property"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "sushi",
          "food"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "sushi",
          "isEdee"
        ],
        [
          "sushi",
          "isEder"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "sushi",
          "property"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "vegetable",
          "food"
        ],
        [
          "vegetable",
          "hierarchyAble"
        ],
        [
          "vegetable",
          "isEdee"
        ],
        [
          "vegetable",
          "isEder"
        ],
        [
          "vegetable",
          "object"
        ],
        [
          "vegetable",
          "property"
        ],
        [
          "vegetable",
          "queryable"
        ],
        [
          "vegetable",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "food",
              0
            ],
            "ops": [
              [
                "food",
                0
              ],
              [
                "is",
                0
              ],
              [
                "countable",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "countable",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "countable",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 4
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. food/0  - \"food\"\n                                   marker: Operator(food/0, [\"Selector(Bridge('{ ...next(operator), value: 'food' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'food' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 3}\n                                   text: food\n                                   value: food\n                                   word: food\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 5, 'end': 6}\n                                   text: is\n                                   word: is\n    2. countable/0  - \"countable\"\n                                   default: True\n                                   marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 16}\n                                   text: countable\n                                   value: countable\n                                   word: countable\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(food/0, [\"Selector(Bridge('{ ...next(operator), value: 'food' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'food' }')), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 3}, text: food, value: food, word: food})\n\n>>>>>>>>>>>>> Counter 2\n   *0. food/1 (dead) - \"food\"\n                                   dead: True\n                                   marker: Operator(food/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 3}\n                                   text: food\n                                   value: food\n                                   word: food\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 5, 'end': 6}\n                                   text: is\n                                   word: is\n    2. countable/0  - \"countable\"\n                                   default: True\n                                   marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 16}\n                                   text: countable\n                                   value: countable\n                                   word: countable\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, marker: Operator(countable/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 16}, text: countable, value: countable, word: countable})\n\n>>>>>>>>>>>>> Counter 3\n    0. food/1 (dead) - \"food\"\n                                   dead: True\n                                   marker: Operator(food/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 3}\n                                   text: food\n                                   value: food\n                                   word: food\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 5, 'end': 6}\n                                   text: is\n                                   word: is\n   *2. countable/1 (dead) - \"countable\"\n                                   dead: True\n                                   default: True\n                                   marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 8, 'end': 16}\n                                   text: countable\n                                   value: countable\n                                   word: countable\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 5, 'end': 6}, text: is, word: is})\n\n>>>>>>>>>>>>> Counter 4\n   *0. is/1  - \"food is countable\"\n                                   marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: one\n                                   one: Context({dead: True, marker: Operator(food/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 16}, text: food, types: ['food'], value: food, word: food})\n                                   range: {'start': 0, 'end': 16}\n                                   text: food is countable\n                                   two: Context({dead: True, default: True, marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 8, 'end': 16}, text: countable, types: ['countable'], value: countable, word: countable})\n                                   word: is\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, one: Context({dead: True, marker: Operator(food/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 16}, text: food, types: ['food'], value: food, word: food}), range: {'start': 0, 'end': 16}, text: food is countable, two: Context({dead: True, default: True, marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 8, 'end': 16}, text: countable, types: ['countable'], value: countable, word: countable}), word: is})\n\n>>>>>>>>>>>>> Counter 5\n   *0. is/2 (dead) - \"food is countable\"\n                                   dead: True\n                                   marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   one: Context({dead: True, marker: Operator(food/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 16}, text: food, types: ['food'], value: food, word: food})\n                                   range: {'start': 0, 'end': 16}\n                                   text: food is countable\n                                   two: Context({dead: True, default: True, marker: Operator(countable/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 8, 'end': 16}, text: countable, types: ['countable'], value: countable, word: countable})\n                                   word: is\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "one",
          "text": "food is countable",
          "marker": "is",
          "word": "is",
          "range": {
            "start": 0,
            "end": 16
          },
          "one": {
            "number": "one",
            "value": "food",
            "text": "food",
            "marker": "food",
            "word": "food",
            "range": {
              "start": 0,
              "end": 16
            },
            "dead": true,
            "types": [
              "food"
            ],
            "level": 1
          },
          "two": {
            "marker": "countable",
            "value": "countable",
            "default": true,
            "text": "countable",
            "word": "countable",
            "range": {
              "start": 8,
              "end": 16
            },
            "dead": true,
            "types": [
              "countable"
            ],
            "level": 1,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "fastfood#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "food is countable"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "countable",
            0
          ],
          [
            "food",
            0
          ],
          [
            "is",
            0
          ]
        ],
        [
          [
            "countable",
            0
          ],
          [
            "is",
            0
          ]
        ]
      ],
      "query": "food is countable",
      "key": {
        "query": "food is countable"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "apple",
          "fruit"
        ],
        [
          "apple",
          "hierarchyAble"
        ],
        [
          "apple",
          "isEdee"
        ],
        [
          "apple",
          "isEder"
        ],
        [
          "apple",
          "object"
        ],
        [
          "apple",
          "property"
        ],
        [
          "apple",
          "queryable"
        ],
        [
          "apple",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "banana",
          "fruit"
        ],
        [
          "banana",
          "hierarchyAble"
        ],
        [
          "banana",
          "isEdee"
        ],
        [
          "banana",
          "isEder"
        ],
        [
          "banana",
          "object"
        ],
        [
          "banana",
          "property"
        ],
        [
          "banana",
          "queryable"
        ],
        [
          "banana",
          "theAble"
        ],
        [
          "between",
          "preposition"
        ],
        [
          "brocoli",
          "hierarchyAble"
        ],
        [
          "brocoli",
          "isEdee"
        ],
        [
          "brocoli",
          "isEder"
        ],
        [
          "brocoli",
          "object"
        ],
        [
          "brocoli",
          "property"
        ],
        [
          "brocoli",
          "queryable"
        ],
        [
          "brocoli",
          "theAble"
        ],
        [
          "brocoli",
          "vegetable"
        ],
        [
          "cabbage",
          "hierarchyAble"
        ],
        [
          "cabbage",
          "isEdee"
        ],
        [
          "cabbage",
          "isEder"
        ],
        [
          "cabbage",
          "object"
        ],
        [
          "cabbage",
          "property"
        ],
        [
          "cabbage",
          "queryable"
        ],
        [
          "cabbage",
          "theAble"
        ],
        [
          "cabbage",
          "vegetable"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "carrot",
          "hierarchyAble"
        ],
        [
          "carrot",
          "isEdee"
        ],
        [
          "carrot",
          "isEder"
        ],
        [
          "carrot",
          "object"
        ],
        [
          "carrot",
          "property"
        ],
        [
          "carrot",
          "queryable"
        ],
        [
          "carrot",
          "theAble"
        ],
        [
          "carrot",
          "vegetable"
        ],
        [
          "changes",
          "event"
        ],
        [
          "changes",
          "verby"
        ],
        [
          "chicken",
          "hierarchyAble"
        ],
        [
          "chicken",
          "isEdee"
        ],
        [
          "chicken",
          "isEder"
        ],
        [
          "chicken",
          "object"
        ],
        [
          "chicken",
          "property"
        ],
        [
          "chicken",
          "queryable"
        ],
        [
          "chicken",
          "theAble"
        ],
        [
          "chicken_strip",
          "adjective"
        ],
        [
          "chicken_strip",
          "concept"
        ],
        [
          "chicken_strip",
          "food"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "isEdee"
        ],
        [
          "chicken_strip",
          "isEder"
        ],
        [
          "chicken_strip",
          "object"
        ],
        [
          "chicken_strip",
          "property"
        ],
        [
          "chicken_strip",
          "queryable"
        ],
        [
          "chicken_strip",
          "theAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "countable",
          "hierarchyAble"
        ],
        [
          "dog",
          "concept"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "dog",
          "isEdee"
        ],
        [
          "dog",
          "isEder"
        ],
        [
          "dog",
          "object"
        ],
        [
          "dog",
          "property"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "event",
          "event"
        ],
        [
          "food",
          "countable"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "french",
          "hierarchyAble"
        ],
        [
          "french",
          "isEdee"
        ],
        [
          "french",
          "isEder"
        ],
        [
          "french",
          "object"
        ],
        [
          "french",
          "property"
        ],
        [
          "french",
          "queryable"
        ],
        [
          "french",
          "theAble"
        ],
        [
          "french_fry",
          "adjective"
        ],
        [
          "french_fry",
          "concept"
        ],
        [
          "french_fry",
          "food"
        ],
        [
          "french_fry",
          "hierarchyAble"
        ],
        [
          "french_fry",
          "isEdee"
        ],
        [
          "french_fry",
          "isEder"
        ],
        [
          "french_fry",
          "object"
        ],
        [
          "french_fry",
          "property"
        ],
        [
          "french_fry",
          "queryable"
        ],
        [
          "french_fry",
          "theAble"
        ],
        [
          "fruit",
          "food"
        ],
        [
          "fruit",
          "hierarchyAble"
        ],
        [
          "fruit",
          "isEdee"
        ],
        [
          "fruit",
          "isEder"
        ],
        [
          "fruit",
          "object"
        ],
        [
          "fruit",
          "property"
        ],
        [
          "fruit",
          "queryable"
        ],
        [
          "fruit",
          "theAble"
        ],
        [
          "fry",
          "concept"
        ],
        [
          "fry",
          "hierarchyAble"
        ],
        [
          "fry",
          "isEdee"
        ],
        [
          "fry",
          "isEder"
        ],
        [
          "fry",
          "object"
        ],
        [
          "fry",
          "property"
        ],
        [
          "fry",
          "queryable"
        ],
        [
          "fry",
          "theAble"
        ],
        [
          "hamburger",
          "hierarchyAble"
        ],
        [
          "hamburger",
          "isEdee"
        ],
        [
          "hamburger",
          "isEder"
        ],
        [
          "hamburger",
          "object"
        ],
        [
          "hamburger",
          "property"
        ],
        [
          "hamburger",
          "queryable"
        ],
        [
          "hamburger",
          "sandwich"
        ],
        [
          "hamburger",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "hot",
          "hierarchyAble"
        ],
        [
          "hot",
          "isEdee"
        ],
        [
          "hot",
          "isEder"
        ],
        [
          "hot",
          "object"
        ],
        [
          "hot",
          "property"
        ],
        [
          "hot",
          "queryable"
        ],
        [
          "hot",
          "theAble"
        ],
        [
          "hot_dog",
          "adjective"
        ],
        [
          "hot_dog",
          "concept"
        ],
        [
          "hot_dog",
          "hierarchyAble"
        ],
        [
          "hot_dog",
          "isEdee"
        ],
        [
          "hot_dog",
          "isEder"
        ],
        [
          "hot_dog",
          "object"
        ],
        [
          "hot_dog",
          "property"
        ],
        [
          "hot_dog",
          "queryable"
        ],
        [
          "hot_dog",
          "sausage"
        ],
        [
          "hot_dog",
          "theAble"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "meat",
          "food"
        ],
        [
          "meat",
          "hierarchyAble"
        ],
        [
          "meat",
          "isEdee"
        ],
        [
          "meat",
          "isEder"
        ],
        [
          "meat",
          "object"
        ],
        [
          "meat",
          "property"
        ],
        [
          "meat",
          "queryable"
        ],
        [
          "meat",
          "theAble"
        ],
        [
          "modifies",
          "verby"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "noun",
          "theAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "orange",
          "fruit"
        ],
        [
          "orange",
          "hierarchyAble"
        ],
        [
          "orange",
          "isEdee"
        ],
        [
          "orange",
          "isEder"
        ],
        [
          "orange",
          "object"
        ],
        [
          "orange",
          "property"
        ],
        [
          "orange",
          "queryable"
        ],
        [
          "orange",
          "theAble"
        ],
        [
          "orderNoun",
          "noun"
        ],
        [
          "orderNoun",
          "queryable"
        ],
        [
          "pea",
          "hierarchyAble"
        ],
        [
          "pea",
          "isEdee"
        ],
        [
          "pea",
          "isEder"
        ],
        [
          "pea",
          "object"
        ],
        [
          "pea",
          "property"
        ],
        [
          "pea",
          "queryable"
        ],
        [
          "pea",
          "theAble"
        ],
        [
          "pea",
          "vegetable"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "sandwich",
          "food"
        ],
        [
          "sandwich",
          "hierarchyAble"
        ],
        [
          "sandwich",
          "isEdee"
        ],
        [
          "sandwich",
          "isEder"
        ],
        [
          "sandwich",
          "object"
        ],
        [
          "sandwich",
          "property"
        ],
        [
          "sandwich",
          "queryable"
        ],
        [
          "sandwich",
          "theAble"
        ],
        [
          "sausage",
          "hierarchyAble"
        ],
        [
          "sausage",
          "isEdee"
        ],
        [
          "sausage",
          "isEder"
        ],
        [
          "sausage",
          "meat"
        ],
        [
          "sausage",
          "object"
        ],
        [
          "sausage",
          "property"
        ],
        [
          "sausage",
          "queryable"
        ],
        [
          "sausage",
          "theAble"
        ],
        [
          "showOrder",
          "verby"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "strip",
          "isEdee"
        ],
        [
          "strip",
          "isEder"
        ],
        [
          "strip",
          "object"
        ],
        [
          "strip",
          "property"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "sushi",
          "food"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "sushi",
          "isEdee"
        ],
        [
          "sushi",
          "isEder"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "sushi",
          "property"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "vegetable",
          "food"
        ],
        [
          "vegetable",
          "hierarchyAble"
        ],
        [
          "vegetable",
          "isEdee"
        ],
        [
          "vegetable",
          "isEder"
        ],
        [
          "vegetable",
          "object"
        ],
        [
          "vegetable",
          "property"
        ],
        [
          "vegetable",
          "queryable"
        ],
        [
          "vegetable",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "unknown",
                0
              ],
              [
                "modifies",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "modifies",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "modifies",
              0
            ],
            "ops": [
              [
                "modifies",
                0
              ]
            ],
            "counter": 3
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"bacon\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: bacon\n                                   value: bacon\n                                   word: bacon\n    1. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 6, 'end': 13}\n                                   text: modifies\n                                   word: modifies\n    2. unknown/0  - \"deluxe\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 15, 'end': 20}\n                                   text: deluxe\n                                   value: deluxe\n                                   word: deluxe\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: bacon, value: bacon, word: bacon})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) - \"bacon\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: bacon\n                                   unknown: True\n                                   value: bacon\n                                   word: bacon\n    1. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 6, 'end': 13}\n                                   text: modifies\n                                   word: modifies\n    2. unknown/0  - \"deluxe\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 15, 'end': 20}\n                                   text: deluxe\n                                   value: deluxe\n                                   word: deluxe\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 20}, text: deluxe, value: deluxe, word: deluxe})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) - \"bacon\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: bacon\n                                   unknown: True\n                                   value: bacon\n                                   word: bacon\n    1. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 6, 'end': 13}\n                                   text: modifies\n                                   word: modifies\n   *2. unknown/1 (dead) - \"deluxe\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 15, 'end': 20}\n                                   text: deluxe\n                                   unknown: True\n                                   value: deluxe\n                                   word: deluxe\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge)), number: one, range: {'start': 6, 'end': 13}, text: modifies, word: modifies})\n\n>>>>>>>>>>>>> Counter 4\n   *0. modifies/1 (dead) - \"bacon modifies deluxe\"\n                                   concept: Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 20}, text: deluxe, unknown: True, value: deluxe, word: deluxe})\n                                   dead: True\n                                   flatten: True\n                                   marker: Operator(modifies/1, ['Selector(None, , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   modifiers: [\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: bacon\n                                     unknown: True\n                                     value: bacon\n                                     word: bacon\n                                   ]\n                                   number: one\n                                   range: {'start': 0, 'end': 20}\n                                   text: bacon modifies deluxe\n                                   word: modifies\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "word": "modifies",
          "number": "one",
          "text": "bacon modifies deluxe",
          "marker": "modifies",
          "range": {
            "start": 0,
            "end": 20
          },
          "dead": true,
          "modifiers": [
            {
              "marker": "unknown",
              "range": {
                "start": 0,
                "end": 4
              },
              "word": "bacon",
              "text": "bacon",
              "value": "bacon",
              "unknown": true,
              "dead": true,
              "level": 1
            }
          ],
          "concept": {
            "marker": "unknown",
            "range": {
              "start": 15,
              "end": 20
            },
            "word": "deluxe",
            "text": "deluxe",
            "value": "deluxe",
            "unknown": true,
            "dead": true,
            "level": 1
          },
          "flatten": true,
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "fastfood#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "bacon modifies deluxe"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "modifies",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "modifies",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "modifies",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "query": "bacon modifies deluxe",
      "key": {
        "query": "bacon modifies deluxe"
      }
    },
    {
      "extraConfig": true,
      "priorities": [
        [
          [
            "bacon_deluxe",
            0
          ],
          [
            "list",
            0
          ]
        ]
      ]
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "apple",
          "fruit"
        ],
        [
          "apple",
          "hierarchyAble"
        ],
        [
          "apple",
          "isEdee"
        ],
        [
          "apple",
          "isEder"
        ],
        [
          "apple",
          "object"
        ],
        [
          "apple",
          "property"
        ],
        [
          "apple",
          "queryable"
        ],
        [
          "apple",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "bacon",
          "hierarchyAble"
        ],
        [
          "bacon",
          "isEdee"
        ],
        [
          "bacon",
          "isEder"
        ],
        [
          "bacon",
          "object"
        ],
        [
          "bacon",
          "property"
        ],
        [
          "bacon",
          "queryable"
        ],
        [
          "bacon",
          "theAble"
        ],
        [
          "bacon_deluxe",
          "adjective"
        ],
        [
          "bacon_deluxe",
          "concept"
        ],
        [
          "bacon_deluxe",
          "hierarchyAble"
        ],
        [
          "bacon_deluxe",
          "isEdee"
        ],
        [
          "bacon_deluxe",
          "isEder"
        ],
        [
          "bacon_deluxe",
          "object"
        ],
        [
          "bacon_deluxe",
          "property"
        ],
        [
          "bacon_deluxe",
          "queryable"
        ],
        [
          "bacon_deluxe",
          "theAble"
        ],
        [
          "banana",
          "fruit"
        ],
        [
          "banana",
          "hierarchyAble"
        ],
        [
          "banana",
          "isEdee"
        ],
        [
          "banana",
          "isEder"
        ],
        [
          "banana",
          "object"
        ],
        [
          "banana",
          "property"
        ],
        [
          "banana",
          "queryable"
        ],
        [
          "banana",
          "theAble"
        ],
        [
          "between",
          "preposition"
        ],
        [
          "brocoli",
          "hierarchyAble"
        ],
        [
          "brocoli",
          "isEdee"
        ],
        [
          "brocoli",
          "isEder"
        ],
        [
          "brocoli",
          "object"
        ],
        [
          "brocoli",
          "property"
        ],
        [
          "brocoli",
          "queryable"
        ],
        [
          "brocoli",
          "theAble"
        ],
        [
          "brocoli",
          "vegetable"
        ],
        [
          "cabbage",
          "hierarchyAble"
        ],
        [
          "cabbage",
          "isEdee"
        ],
        [
          "cabbage",
          "isEder"
        ],
        [
          "cabbage",
          "object"
        ],
        [
          "cabbage",
          "property"
        ],
        [
          "cabbage",
          "queryable"
        ],
        [
          "cabbage",
          "theAble"
        ],
        [
          "cabbage",
          "vegetable"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "carrot",
          "hierarchyAble"
        ],
        [
          "carrot",
          "isEdee"
        ],
        [
          "carrot",
          "isEder"
        ],
        [
          "carrot",
          "object"
        ],
        [
          "carrot",
          "property"
        ],
        [
          "carrot",
          "queryable"
        ],
        [
          "carrot",
          "theAble"
        ],
        [
          "carrot",
          "vegetable"
        ],
        [
          "changes",
          "event"
        ],
        [
          "changes",
          "verby"
        ],
        [
          "chicken",
          "hierarchyAble"
        ],
        [
          "chicken",
          "isEdee"
        ],
        [
          "chicken",
          "isEder"
        ],
        [
          "chicken",
          "object"
        ],
        [
          "chicken",
          "property"
        ],
        [
          "chicken",
          "queryable"
        ],
        [
          "chicken",
          "theAble"
        ],
        [
          "chicken_strip",
          "adjective"
        ],
        [
          "chicken_strip",
          "concept"
        ],
        [
          "chicken_strip",
          "food"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "isEdee"
        ],
        [
          "chicken_strip",
          "isEder"
        ],
        [
          "chicken_strip",
          "object"
        ],
        [
          "chicken_strip",
          "property"
        ],
        [
          "chicken_strip",
          "queryable"
        ],
        [
          "chicken_strip",
          "theAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "countable",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "concept"
        ],
        [
          "deluxe",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "isEdee"
        ],
        [
          "deluxe",
          "isEder"
        ],
        [
          "deluxe",
          "object"
        ],
        [
          "deluxe",
          "property"
        ],
        [
          "deluxe",
          "queryable"
        ],
        [
          "deluxe",
          "theAble"
        ],
        [
          "dog",
          "concept"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "dog",
          "isEdee"
        ],
        [
          "dog",
          "isEder"
        ],
        [
          "dog",
          "object"
        ],
        [
          "dog",
          "property"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "event",
          "event"
        ],
        [
          "food",
          "countable"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "french",
          "hierarchyAble"
        ],
        [
          "french",
          "isEdee"
        ],
        [
          "french",
          "isEder"
        ],
        [
          "french",
          "object"
        ],
        [
          "french",
          "property"
        ],
        [
          "french",
          "queryable"
        ],
        [
          "french",
          "theAble"
        ],
        [
          "french_fry",
          "adjective"
        ],
        [
          "french_fry",
          "concept"
        ],
        [
          "french_fry",
          "food"
        ],
        [
          "french_fry",
          "hierarchyAble"
        ],
        [
          "french_fry",
          "isEdee"
        ],
        [
          "french_fry",
          "isEder"
        ],
        [
          "french_fry",
          "object"
        ],
        [
          "french_fry",
          "property"
        ],
        [
          "french_fry",
          "queryable"
        ],
        [
          "french_fry",
          "theAble"
        ],
        [
          "fruit",
          "food"
        ],
        [
          "fruit",
          "hierarchyAble"
        ],
        [
          "fruit",
          "isEdee"
        ],
        [
          "fruit",
          "isEder"
        ],
        [
          "fruit",
          "object"
        ],
        [
          "fruit",
          "property"
        ],
        [
          "fruit",
          "queryable"
        ],
        [
          "fruit",
          "theAble"
        ],
        [
          "fry",
          "concept"
        ],
        [
          "fry",
          "hierarchyAble"
        ],
        [
          "fry",
          "isEdee"
        ],
        [
          "fry",
          "isEder"
        ],
        [
          "fry",
          "object"
        ],
        [
          "fry",
          "property"
        ],
        [
          "fry",
          "queryable"
        ],
        [
          "fry",
          "theAble"
        ],
        [
          "hamburger",
          "hierarchyAble"
        ],
        [
          "hamburger",
          "isEdee"
        ],
        [
          "hamburger",
          "isEder"
        ],
        [
          "hamburger",
          "object"
        ],
        [
          "hamburger",
          "property"
        ],
        [
          "hamburger",
          "queryable"
        ],
        [
          "hamburger",
          "sandwich"
        ],
        [
          "hamburger",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "hot",
          "hierarchyAble"
        ],
        [
          "hot",
          "isEdee"
        ],
        [
          "hot",
          "isEder"
        ],
        [
          "hot",
          "object"
        ],
        [
          "hot",
          "property"
        ],
        [
          "hot",
          "queryable"
        ],
        [
          "hot",
          "theAble"
        ],
        [
          "hot_dog",
          "adjective"
        ],
        [
          "hot_dog",
          "concept"
        ],
        [
          "hot_dog",
          "hierarchyAble"
        ],
        [
          "hot_dog",
          "isEdee"
        ],
        [
          "hot_dog",
          "isEder"
        ],
        [
          "hot_dog",
          "object"
        ],
        [
          "hot_dog",
          "property"
        ],
        [
          "hot_dog",
          "queryable"
        ],
        [
          "hot_dog",
          "sausage"
        ],
        [
          "hot_dog",
          "theAble"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "meat",
          "food"
        ],
        [
          "meat",
          "hierarchyAble"
        ],
        [
          "meat",
          "isEdee"
        ],
        [
          "meat",
          "isEder"
        ],
        [
          "meat",
          "object"
        ],
        [
          "meat",
          "property"
        ],
        [
          "meat",
          "queryable"
        ],
        [
          "meat",
          "theAble"
        ],
        [
          "modifies",
          "verby"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "noun",
          "theAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "orange",
          "fruit"
        ],
        [
          "orange",
          "hierarchyAble"
        ],
        [
          "orange",
          "isEdee"
        ],
        [
          "orange",
          "isEder"
        ],
        [
          "orange",
          "object"
        ],
        [
          "orange",
          "property"
        ],
        [
          "orange",
          "queryable"
        ],
        [
          "orange",
          "theAble"
        ],
        [
          "orderNoun",
          "noun"
        ],
        [
          "orderNoun",
          "queryable"
        ],
        [
          "pea",
          "hierarchyAble"
        ],
        [
          "pea",
          "isEdee"
        ],
        [
          "pea",
          "isEder"
        ],
        [
          "pea",
          "object"
        ],
        [
          "pea",
          "property"
        ],
        [
          "pea",
          "queryable"
        ],
        [
          "pea",
          "theAble"
        ],
        [
          "pea",
          "vegetable"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "sandwich",
          "food"
        ],
        [
          "sandwich",
          "hierarchyAble"
        ],
        [
          "sandwich",
          "isEdee"
        ],
        [
          "sandwich",
          "isEder"
        ],
        [
          "sandwich",
          "object"
        ],
        [
          "sandwich",
          "property"
        ],
        [
          "sandwich",
          "queryable"
        ],
        [
          "sandwich",
          "theAble"
        ],
        [
          "sausage",
          "hierarchyAble"
        ],
        [
          "sausage",
          "isEdee"
        ],
        [
          "sausage",
          "isEder"
        ],
        [
          "sausage",
          "meat"
        ],
        [
          "sausage",
          "object"
        ],
        [
          "sausage",
          "property"
        ],
        [
          "sausage",
          "queryable"
        ],
        [
          "sausage",
          "theAble"
        ],
        [
          "showOrder",
          "verby"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "strip",
          "isEdee"
        ],
        [
          "strip",
          "isEder"
        ],
        [
          "strip",
          "object"
        ],
        [
          "strip",
          "property"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "sushi",
          "food"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "sushi",
          "isEdee"
        ],
        [
          "sushi",
          "isEder"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "sushi",
          "property"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "vegetable",
          "food"
        ],
        [
          "vegetable",
          "hierarchyAble"
        ],
        [
          "vegetable",
          "isEdee"
        ],
        [
          "vegetable",
          "isEder"
        ],
        [
          "vegetable",
          "object"
        ],
        [
          "vegetable",
          "property"
        ],
        [
          "vegetable",
          "queryable"
        ],
        [
          "vegetable",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "chicken",
              0
            ],
            "ops": [
              [
                "chicken",
                0
              ],
              [
                "modifies",
                0
              ],
              [
                "sandwich",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "sandwich",
              0
            ],
            "ops": [
              [
                "modifies",
                0
              ],
              [
                "sandwich",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "modifies",
              0
            ],
            "ops": [
              [
                "modifies",
                0
              ]
            ],
            "counter": 3
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 6}\n                                   text: chicken\n                                   value: chicken\n                                   word: chicken\n    1. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 15}\n                                   text: modifies\n                                   word: modifies\n    2. sandwich/0  - \"sandwich\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 17, 'end': 24}\n                                   text: sandwich\n                                   value: sandwich\n                                   word: sandwich\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: chicken, value: chicken, word: chicken})\n\n>>>>>>>>>>>>> Counter 2\n   *0. chicken/1 (dead) - \"chicken\"\n                                   dead: True\n                                   marker: Operator(chicken/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 6}\n                                   text: chicken\n                                   value: chicken\n                                   word: chicken\n    1. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 15}\n                                   text: modifies\n                                   word: modifies\n    2. sandwich/0  - \"sandwich\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 17, 'end': 24}\n                                   text: sandwich\n                                   value: sandwich\n                                   word: sandwich\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge)), number: one, range: {'start': 17, 'end': 24}, text: sandwich, value: sandwich, word: sandwich})\n\n>>>>>>>>>>>>> Counter 3\n    0. chicken/1 (dead) - \"chicken\"\n                                   dead: True\n                                   marker: Operator(chicken/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 6}\n                                   text: chicken\n                                   value: chicken\n                                   word: chicken\n    1. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 15}\n                                   text: modifies\n                                   word: modifies\n   *2. sandwich/1 (dead) - \"sandwich\"\n                                   dead: True\n                                   marker: Operator(sandwich/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 17, 'end': 24}\n                                   text: sandwich\n                                   value: sandwich\n                                   word: sandwich\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge)), number: one, range: {'start': 8, 'end': 15}, text: modifies, word: modifies})\n\n>>>>>>>>>>>>> Counter 4\n   *0. modifies/1 (dead) - \"chicken modifies sandwich\"\n                                   concept: Context({dead: True, marker: Operator(sandwich/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 17, 'end': 24}, text: sandwich, value: sandwich, word: sandwich})\n                                   dead: True\n                                   flatten: True\n                                   marker: Operator(modifies/1, ['Selector(None, , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   modifiers: [\n                                     dead: True\n                                     marker: Operator(chicken/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 6}\n                                     text: chicken\n                                     value: chicken\n                                     word: chicken\n                                   ]\n                                   number: one\n                                   range: {'start': 0, 'end': 24}\n                                   text: chicken modifies sandwich\n                                   word: modifies\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "word": "modifies",
          "number": "one",
          "text": "chicken modifies sandwich",
          "marker": "modifies",
          "range": {
            "start": 0,
            "end": 24
          },
          "dead": true,
          "modifiers": [
            {
              "value": "chicken",
              "text": "chicken",
              "marker": "chicken",
              "word": "chicken",
              "range": {
                "start": 0,
                "end": 6
              },
              "dead": true,
              "level": 1
            }
          ],
          "concept": {
            "value": "sandwich",
            "number": "one",
            "text": "sandwich",
            "marker": "sandwich",
            "word": "sandwich",
            "range": {
              "start": 17,
              "end": 24
            },
            "dead": true,
            "level": 1
          },
          "flatten": true,
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "fastfood#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "chicken modifies sandwich"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "chicken",
            0
          ],
          [
            "modifies",
            0
          ],
          [
            "sandwich",
            0
          ]
        ],
        [
          [
            "modifies",
            0
          ],
          [
            "sandwich",
            0
          ]
        ]
      ],
      "query": "chicken modifies sandwich",
      "key": {
        "query": "chicken modifies sandwich"
      }
    },
    {
      "extraConfig": true,
      "priorities": [
        [
          [
            "chicken_sandwich",
            0
          ],
          [
            "list",
            0
          ]
        ]
      ]
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "apple",
          "fruit"
        ],
        [
          "apple",
          "hierarchyAble"
        ],
        [
          "apple",
          "isEdee"
        ],
        [
          "apple",
          "isEder"
        ],
        [
          "apple",
          "object"
        ],
        [
          "apple",
          "property"
        ],
        [
          "apple",
          "queryable"
        ],
        [
          "apple",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "bacon",
          "hierarchyAble"
        ],
        [
          "bacon",
          "isEdee"
        ],
        [
          "bacon",
          "isEder"
        ],
        [
          "bacon",
          "object"
        ],
        [
          "bacon",
          "property"
        ],
        [
          "bacon",
          "queryable"
        ],
        [
          "bacon",
          "theAble"
        ],
        [
          "bacon_deluxe",
          "adjective"
        ],
        [
          "bacon_deluxe",
          "concept"
        ],
        [
          "bacon_deluxe",
          "hierarchyAble"
        ],
        [
          "bacon_deluxe",
          "isEdee"
        ],
        [
          "bacon_deluxe",
          "isEder"
        ],
        [
          "bacon_deluxe",
          "object"
        ],
        [
          "bacon_deluxe",
          "property"
        ],
        [
          "bacon_deluxe",
          "queryable"
        ],
        [
          "bacon_deluxe",
          "theAble"
        ],
        [
          "banana",
          "fruit"
        ],
        [
          "banana",
          "hierarchyAble"
        ],
        [
          "banana",
          "isEdee"
        ],
        [
          "banana",
          "isEder"
        ],
        [
          "banana",
          "object"
        ],
        [
          "banana",
          "property"
        ],
        [
          "banana",
          "queryable"
        ],
        [
          "banana",
          "theAble"
        ],
        [
          "between",
          "preposition"
        ],
        [
          "brocoli",
          "hierarchyAble"
        ],
        [
          "brocoli",
          "isEdee"
        ],
        [
          "brocoli",
          "isEder"
        ],
        [
          "brocoli",
          "object"
        ],
        [
          "brocoli",
          "property"
        ],
        [
          "brocoli",
          "queryable"
        ],
        [
          "brocoli",
          "theAble"
        ],
        [
          "brocoli",
          "vegetable"
        ],
        [
          "cabbage",
          "hierarchyAble"
        ],
        [
          "cabbage",
          "isEdee"
        ],
        [
          "cabbage",
          "isEder"
        ],
        [
          "cabbage",
          "object"
        ],
        [
          "cabbage",
          "property"
        ],
        [
          "cabbage",
          "queryable"
        ],
        [
          "cabbage",
          "theAble"
        ],
        [
          "cabbage",
          "vegetable"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "carrot",
          "hierarchyAble"
        ],
        [
          "carrot",
          "isEdee"
        ],
        [
          "carrot",
          "isEder"
        ],
        [
          "carrot",
          "object"
        ],
        [
          "carrot",
          "property"
        ],
        [
          "carrot",
          "queryable"
        ],
        [
          "carrot",
          "theAble"
        ],
        [
          "carrot",
          "vegetable"
        ],
        [
          "changes",
          "event"
        ],
        [
          "changes",
          "verby"
        ],
        [
          "chicken",
          "hierarchyAble"
        ],
        [
          "chicken",
          "isEdee"
        ],
        [
          "chicken",
          "isEder"
        ],
        [
          "chicken",
          "object"
        ],
        [
          "chicken",
          "property"
        ],
        [
          "chicken",
          "queryable"
        ],
        [
          "chicken",
          "theAble"
        ],
        [
          "chicken_sandwich",
          "adjective"
        ],
        [
          "chicken_sandwich",
          "concept"
        ],
        [
          "chicken_sandwich",
          "hierarchyAble"
        ],
        [
          "chicken_sandwich",
          "isEdee"
        ],
        [
          "chicken_sandwich",
          "isEder"
        ],
        [
          "chicken_sandwich",
          "object"
        ],
        [
          "chicken_sandwich",
          "property"
        ],
        [
          "chicken_sandwich",
          "queryable"
        ],
        [
          "chicken_sandwich",
          "theAble"
        ],
        [
          "chicken_strip",
          "adjective"
        ],
        [
          "chicken_strip",
          "concept"
        ],
        [
          "chicken_strip",
          "food"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "isEdee"
        ],
        [
          "chicken_strip",
          "isEder"
        ],
        [
          "chicken_strip",
          "object"
        ],
        [
          "chicken_strip",
          "property"
        ],
        [
          "chicken_strip",
          "queryable"
        ],
        [
          "chicken_strip",
          "theAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "countable",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "concept"
        ],
        [
          "deluxe",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "isEdee"
        ],
        [
          "deluxe",
          "isEder"
        ],
        [
          "deluxe",
          "object"
        ],
        [
          "deluxe",
          "property"
        ],
        [
          "deluxe",
          "queryable"
        ],
        [
          "deluxe",
          "theAble"
        ],
        [
          "dog",
          "concept"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "dog",
          "isEdee"
        ],
        [
          "dog",
          "isEder"
        ],
        [
          "dog",
          "object"
        ],
        [
          "dog",
          "property"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "event",
          "event"
        ],
        [
          "food",
          "countable"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "french",
          "hierarchyAble"
        ],
        [
          "french",
          "isEdee"
        ],
        [
          "french",
          "isEder"
        ],
        [
          "french",
          "object"
        ],
        [
          "french",
          "property"
        ],
        [
          "french",
          "queryable"
        ],
        [
          "french",
          "theAble"
        ],
        [
          "french_fry",
          "adjective"
        ],
        [
          "french_fry",
          "concept"
        ],
        [
          "french_fry",
          "food"
        ],
        [
          "french_fry",
          "hierarchyAble"
        ],
        [
          "french_fry",
          "isEdee"
        ],
        [
          "french_fry",
          "isEder"
        ],
        [
          "french_fry",
          "object"
        ],
        [
          "french_fry",
          "property"
        ],
        [
          "french_fry",
          "queryable"
        ],
        [
          "french_fry",
          "theAble"
        ],
        [
          "fruit",
          "food"
        ],
        [
          "fruit",
          "hierarchyAble"
        ],
        [
          "fruit",
          "isEdee"
        ],
        [
          "fruit",
          "isEder"
        ],
        [
          "fruit",
          "object"
        ],
        [
          "fruit",
          "property"
        ],
        [
          "fruit",
          "queryable"
        ],
        [
          "fruit",
          "theAble"
        ],
        [
          "fry",
          "concept"
        ],
        [
          "fry",
          "hierarchyAble"
        ],
        [
          "fry",
          "isEdee"
        ],
        [
          "fry",
          "isEder"
        ],
        [
          "fry",
          "object"
        ],
        [
          "fry",
          "property"
        ],
        [
          "fry",
          "queryable"
        ],
        [
          "fry",
          "theAble"
        ],
        [
          "hamburger",
          "hierarchyAble"
        ],
        [
          "hamburger",
          "isEdee"
        ],
        [
          "hamburger",
          "isEder"
        ],
        [
          "hamburger",
          "object"
        ],
        [
          "hamburger",
          "property"
        ],
        [
          "hamburger",
          "queryable"
        ],
        [
          "hamburger",
          "sandwich"
        ],
        [
          "hamburger",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "hot",
          "hierarchyAble"
        ],
        [
          "hot",
          "isEdee"
        ],
        [
          "hot",
          "isEder"
        ],
        [
          "hot",
          "object"
        ],
        [
          "hot",
          "property"
        ],
        [
          "hot",
          "queryable"
        ],
        [
          "hot",
          "theAble"
        ],
        [
          "hot_dog",
          "adjective"
        ],
        [
          "hot_dog",
          "concept"
        ],
        [
          "hot_dog",
          "hierarchyAble"
        ],
        [
          "hot_dog",
          "isEdee"
        ],
        [
          "hot_dog",
          "isEder"
        ],
        [
          "hot_dog",
          "object"
        ],
        [
          "hot_dog",
          "property"
        ],
        [
          "hot_dog",
          "queryable"
        ],
        [
          "hot_dog",
          "sausage"
        ],
        [
          "hot_dog",
          "theAble"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "meat",
          "food"
        ],
        [
          "meat",
          "hierarchyAble"
        ],
        [
          "meat",
          "isEdee"
        ],
        [
          "meat",
          "isEder"
        ],
        [
          "meat",
          "object"
        ],
        [
          "meat",
          "property"
        ],
        [
          "meat",
          "queryable"
        ],
        [
          "meat",
          "theAble"
        ],
        [
          "modifies",
          "verby"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "noun",
          "theAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "orange",
          "fruit"
        ],
        [
          "orange",
          "hierarchyAble"
        ],
        [
          "orange",
          "isEdee"
        ],
        [
          "orange",
          "isEder"
        ],
        [
          "orange",
          "object"
        ],
        [
          "orange",
          "property"
        ],
        [
          "orange",
          "queryable"
        ],
        [
          "orange",
          "theAble"
        ],
        [
          "orderNoun",
          "noun"
        ],
        [
          "orderNoun",
          "queryable"
        ],
        [
          "pea",
          "hierarchyAble"
        ],
        [
          "pea",
          "isEdee"
        ],
        [
          "pea",
          "isEder"
        ],
        [
          "pea",
          "object"
        ],
        [
          "pea",
          "property"
        ],
        [
          "pea",
          "queryable"
        ],
        [
          "pea",
          "theAble"
        ],
        [
          "pea",
          "vegetable"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "sandwich",
          "concept"
        ],
        [
          "sandwich",
          "food"
        ],
        [
          "sandwich",
          "hierarchyAble"
        ],
        [
          "sandwich",
          "isEdee"
        ],
        [
          "sandwich",
          "isEder"
        ],
        [
          "sandwich",
          "object"
        ],
        [
          "sandwich",
          "property"
        ],
        [
          "sandwich",
          "queryable"
        ],
        [
          "sandwich",
          "theAble"
        ],
        [
          "sausage",
          "hierarchyAble"
        ],
        [
          "sausage",
          "isEdee"
        ],
        [
          "sausage",
          "isEder"
        ],
        [
          "sausage",
          "meat"
        ],
        [
          "sausage",
          "object"
        ],
        [
          "sausage",
          "property"
        ],
        [
          "sausage",
          "queryable"
        ],
        [
          "sausage",
          "theAble"
        ],
        [
          "showOrder",
          "verby"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "strip",
          "isEdee"
        ],
        [
          "strip",
          "isEder"
        ],
        [
          "strip",
          "object"
        ],
        [
          "strip",
          "property"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "sushi",
          "food"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "sushi",
          "isEdee"
        ],
        [
          "sushi",
          "isEder"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "sushi",
          "property"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "vegetable",
          "food"
        ],
        [
          "vegetable",
          "hierarchyAble"
        ],
        [
          "vegetable",
          "isEdee"
        ],
        [
          "vegetable",
          "isEder"
        ],
        [
          "vegetable",
          "object"
        ],
        [
          "vegetable",
          "property"
        ],
        [
          "vegetable",
          "queryable"
        ],
        [
          "vegetable",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "unknown",
                0
              ],
              [
                "modifies",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "modifies",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "modifies",
              0
            ],
            "ops": [
              [
                "modifies",
                0
              ]
            ],
            "counter": 3
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"premium\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 6}\n                                   text: premium\n                                   value: premium\n                                   word: premium\n    1. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 15}\n                                   text: modifies\n                                   word: modifies\n    2. unknown/0  - \"cod\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 17, 'end': 19}\n                                   text: cod\n                                   value: cod\n                                   word: cod\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: premium, value: premium, word: premium})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) - \"premium\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 6}\n                                   text: premium\n                                   unknown: True\n                                   value: premium\n                                   word: premium\n    1. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 15}\n                                   text: modifies\n                                   word: modifies\n    2. unknown/0  - \"cod\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 17, 'end': 19}\n                                   text: cod\n                                   value: cod\n                                   word: cod\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 17, 'end': 19}, text: cod, value: cod, word: cod})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) - \"premium\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 6}\n                                   text: premium\n                                   unknown: True\n                                   value: premium\n                                   word: premium\n    1. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 15}\n                                   text: modifies\n                                   word: modifies\n   *2. unknown/1 (dead) - \"cod\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 17, 'end': 19}\n                                   text: cod\n                                   unknown: True\n                                   value: cod\n                                   word: cod\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge)), number: one, range: {'start': 8, 'end': 15}, text: modifies, word: modifies})\n\n>>>>>>>>>>>>> Counter 4\n   *0. modifies/1 (dead) - \"premium modifies cod\"\n                                   concept: Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 17, 'end': 19}, text: cod, unknown: True, value: cod, word: cod})\n                                   dead: True\n                                   flatten: True\n                                   marker: Operator(modifies/1, ['Selector(None, , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   modifiers: [\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 6}\n                                     text: premium\n                                     unknown: True\n                                     value: premium\n                                     word: premium\n                                   ]\n                                   number: one\n                                   range: {'start': 0, 'end': 19}\n                                   text: premium modifies cod\n                                   word: modifies\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "word": "modifies",
          "number": "one",
          "text": "premium modifies cod",
          "marker": "modifies",
          "range": {
            "start": 0,
            "end": 19
          },
          "dead": true,
          "modifiers": [
            {
              "marker": "unknown",
              "range": {
                "start": 0,
                "end": 6
              },
              "word": "premium",
              "text": "premium",
              "value": "premium",
              "unknown": true,
              "dead": true,
              "level": 1
            }
          ],
          "concept": {
            "marker": "unknown",
            "range": {
              "start": 17,
              "end": 19
            },
            "word": "cod",
            "text": "cod",
            "value": "cod",
            "unknown": true,
            "dead": true,
            "level": 1
          },
          "flatten": true,
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "fastfood#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "premium modifies cod"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "modifies",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "modifies",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "modifies",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "query": "premium modifies cod",
      "key": {
        "query": "premium modifies cod"
      }
    },
    {
      "extraConfig": true,
      "priorities": [
        [
          [
            "premium_cod",
            0
          ],
          [
            "list",
            0
          ]
        ]
      ]
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "apple",
          "fruit"
        ],
        [
          "apple",
          "hierarchyAble"
        ],
        [
          "apple",
          "isEdee"
        ],
        [
          "apple",
          "isEder"
        ],
        [
          "apple",
          "object"
        ],
        [
          "apple",
          "property"
        ],
        [
          "apple",
          "queryable"
        ],
        [
          "apple",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "bacon",
          "hierarchyAble"
        ],
        [
          "bacon",
          "isEdee"
        ],
        [
          "bacon",
          "isEder"
        ],
        [
          "bacon",
          "object"
        ],
        [
          "bacon",
          "property"
        ],
        [
          "bacon",
          "queryable"
        ],
        [
          "bacon",
          "theAble"
        ],
        [
          "bacon_deluxe",
          "adjective"
        ],
        [
          "bacon_deluxe",
          "concept"
        ],
        [
          "bacon_deluxe",
          "hierarchyAble"
        ],
        [
          "bacon_deluxe",
          "isEdee"
        ],
        [
          "bacon_deluxe",
          "isEder"
        ],
        [
          "bacon_deluxe",
          "object"
        ],
        [
          "bacon_deluxe",
          "property"
        ],
        [
          "bacon_deluxe",
          "queryable"
        ],
        [
          "bacon_deluxe",
          "theAble"
        ],
        [
          "banana",
          "fruit"
        ],
        [
          "banana",
          "hierarchyAble"
        ],
        [
          "banana",
          "isEdee"
        ],
        [
          "banana",
          "isEder"
        ],
        [
          "banana",
          "object"
        ],
        [
          "banana",
          "property"
        ],
        [
          "banana",
          "queryable"
        ],
        [
          "banana",
          "theAble"
        ],
        [
          "between",
          "preposition"
        ],
        [
          "brocoli",
          "hierarchyAble"
        ],
        [
          "brocoli",
          "isEdee"
        ],
        [
          "brocoli",
          "isEder"
        ],
        [
          "brocoli",
          "object"
        ],
        [
          "brocoli",
          "property"
        ],
        [
          "brocoli",
          "queryable"
        ],
        [
          "brocoli",
          "theAble"
        ],
        [
          "brocoli",
          "vegetable"
        ],
        [
          "cabbage",
          "hierarchyAble"
        ],
        [
          "cabbage",
          "isEdee"
        ],
        [
          "cabbage",
          "isEder"
        ],
        [
          "cabbage",
          "object"
        ],
        [
          "cabbage",
          "property"
        ],
        [
          "cabbage",
          "queryable"
        ],
        [
          "cabbage",
          "theAble"
        ],
        [
          "cabbage",
          "vegetable"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "carrot",
          "hierarchyAble"
        ],
        [
          "carrot",
          "isEdee"
        ],
        [
          "carrot",
          "isEder"
        ],
        [
          "carrot",
          "object"
        ],
        [
          "carrot",
          "property"
        ],
        [
          "carrot",
          "queryable"
        ],
        [
          "carrot",
          "theAble"
        ],
        [
          "carrot",
          "vegetable"
        ],
        [
          "changes",
          "event"
        ],
        [
          "changes",
          "verby"
        ],
        [
          "chicken",
          "hierarchyAble"
        ],
        [
          "chicken",
          "isEdee"
        ],
        [
          "chicken",
          "isEder"
        ],
        [
          "chicken",
          "object"
        ],
        [
          "chicken",
          "property"
        ],
        [
          "chicken",
          "queryable"
        ],
        [
          "chicken",
          "theAble"
        ],
        [
          "chicken_sandwich",
          "adjective"
        ],
        [
          "chicken_sandwich",
          "concept"
        ],
        [
          "chicken_sandwich",
          "hierarchyAble"
        ],
        [
          "chicken_sandwich",
          "isEdee"
        ],
        [
          "chicken_sandwich",
          "isEder"
        ],
        [
          "chicken_sandwich",
          "object"
        ],
        [
          "chicken_sandwich",
          "property"
        ],
        [
          "chicken_sandwich",
          "queryable"
        ],
        [
          "chicken_sandwich",
          "theAble"
        ],
        [
          "chicken_strip",
          "adjective"
        ],
        [
          "chicken_strip",
          "concept"
        ],
        [
          "chicken_strip",
          "food"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "isEdee"
        ],
        [
          "chicken_strip",
          "isEder"
        ],
        [
          "chicken_strip",
          "object"
        ],
        [
          "chicken_strip",
          "property"
        ],
        [
          "chicken_strip",
          "queryable"
        ],
        [
          "chicken_strip",
          "theAble"
        ],
        [
          "cod",
          "concept"
        ],
        [
          "cod",
          "hierarchyAble"
        ],
        [
          "cod",
          "isEdee"
        ],
        [
          "cod",
          "isEder"
        ],
        [
          "cod",
          "object"
        ],
        [
          "cod",
          "property"
        ],
        [
          "cod",
          "queryable"
        ],
        [
          "cod",
          "theAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "countable",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "concept"
        ],
        [
          "deluxe",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "isEdee"
        ],
        [
          "deluxe",
          "isEder"
        ],
        [
          "deluxe",
          "object"
        ],
        [
          "deluxe",
          "property"
        ],
        [
          "deluxe",
          "queryable"
        ],
        [
          "deluxe",
          "theAble"
        ],
        [
          "dog",
          "concept"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "dog",
          "isEdee"
        ],
        [
          "dog",
          "isEder"
        ],
        [
          "dog",
          "object"
        ],
        [
          "dog",
          "property"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "event",
          "event"
        ],
        [
          "food",
          "countable"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "french",
          "hierarchyAble"
        ],
        [
          "french",
          "isEdee"
        ],
        [
          "french",
          "isEder"
        ],
        [
          "french",
          "object"
        ],
        [
          "french",
          "property"
        ],
        [
          "french",
          "queryable"
        ],
        [
          "french",
          "theAble"
        ],
        [
          "french_fry",
          "adjective"
        ],
        [
          "french_fry",
          "concept"
        ],
        [
          "french_fry",
          "food"
        ],
        [
          "french_fry",
          "hierarchyAble"
        ],
        [
          "french_fry",
          "isEdee"
        ],
        [
          "french_fry",
          "isEder"
        ],
        [
          "french_fry",
          "object"
        ],
        [
          "french_fry",
          "property"
        ],
        [
          "french_fry",
          "queryable"
        ],
        [
          "french_fry",
          "theAble"
        ],
        [
          "fruit",
          "food"
        ],
        [
          "fruit",
          "hierarchyAble"
        ],
        [
          "fruit",
          "isEdee"
        ],
        [
          "fruit",
          "isEder"
        ],
        [
          "fruit",
          "object"
        ],
        [
          "fruit",
          "property"
        ],
        [
          "fruit",
          "queryable"
        ],
        [
          "fruit",
          "theAble"
        ],
        [
          "fry",
          "concept"
        ],
        [
          "fry",
          "hierarchyAble"
        ],
        [
          "fry",
          "isEdee"
        ],
        [
          "fry",
          "isEder"
        ],
        [
          "fry",
          "object"
        ],
        [
          "fry",
          "property"
        ],
        [
          "fry",
          "queryable"
        ],
        [
          "fry",
          "theAble"
        ],
        [
          "hamburger",
          "hierarchyAble"
        ],
        [
          "hamburger",
          "isEdee"
        ],
        [
          "hamburger",
          "isEder"
        ],
        [
          "hamburger",
          "object"
        ],
        [
          "hamburger",
          "property"
        ],
        [
          "hamburger",
          "queryable"
        ],
        [
          "hamburger",
          "sandwich"
        ],
        [
          "hamburger",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "hot",
          "hierarchyAble"
        ],
        [
          "hot",
          "isEdee"
        ],
        [
          "hot",
          "isEder"
        ],
        [
          "hot",
          "object"
        ],
        [
          "hot",
          "property"
        ],
        [
          "hot",
          "queryable"
        ],
        [
          "hot",
          "theAble"
        ],
        [
          "hot_dog",
          "adjective"
        ],
        [
          "hot_dog",
          "concept"
        ],
        [
          "hot_dog",
          "hierarchyAble"
        ],
        [
          "hot_dog",
          "isEdee"
        ],
        [
          "hot_dog",
          "isEder"
        ],
        [
          "hot_dog",
          "object"
        ],
        [
          "hot_dog",
          "property"
        ],
        [
          "hot_dog",
          "queryable"
        ],
        [
          "hot_dog",
          "sausage"
        ],
        [
          "hot_dog",
          "theAble"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "meat",
          "food"
        ],
        [
          "meat",
          "hierarchyAble"
        ],
        [
          "meat",
          "isEdee"
        ],
        [
          "meat",
          "isEder"
        ],
        [
          "meat",
          "object"
        ],
        [
          "meat",
          "property"
        ],
        [
          "meat",
          "queryable"
        ],
        [
          "meat",
          "theAble"
        ],
        [
          "modifies",
          "verby"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "noun",
          "theAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "orange",
          "fruit"
        ],
        [
          "orange",
          "hierarchyAble"
        ],
        [
          "orange",
          "isEdee"
        ],
        [
          "orange",
          "isEder"
        ],
        [
          "orange",
          "object"
        ],
        [
          "orange",
          "property"
        ],
        [
          "orange",
          "queryable"
        ],
        [
          "orange",
          "theAble"
        ],
        [
          "orderNoun",
          "noun"
        ],
        [
          "orderNoun",
          "queryable"
        ],
        [
          "pea",
          "hierarchyAble"
        ],
        [
          "pea",
          "isEdee"
        ],
        [
          "pea",
          "isEder"
        ],
        [
          "pea",
          "object"
        ],
        [
          "pea",
          "property"
        ],
        [
          "pea",
          "queryable"
        ],
        [
          "pea",
          "theAble"
        ],
        [
          "pea",
          "vegetable"
        ],
        [
          "premium",
          "hierarchyAble"
        ],
        [
          "premium",
          "isEdee"
        ],
        [
          "premium",
          "isEder"
        ],
        [
          "premium",
          "object"
        ],
        [
          "premium",
          "property"
        ],
        [
          "premium",
          "queryable"
        ],
        [
          "premium",
          "theAble"
        ],
        [
          "premium_cod",
          "adjective"
        ],
        [
          "premium_cod",
          "concept"
        ],
        [
          "premium_cod",
          "hierarchyAble"
        ],
        [
          "premium_cod",
          "isEdee"
        ],
        [
          "premium_cod",
          "isEder"
        ],
        [
          "premium_cod",
          "object"
        ],
        [
          "premium_cod",
          "property"
        ],
        [
          "premium_cod",
          "queryable"
        ],
        [
          "premium_cod",
          "theAble"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "sandwich",
          "concept"
        ],
        [
          "sandwich",
          "food"
        ],
        [
          "sandwich",
          "hierarchyAble"
        ],
        [
          "sandwich",
          "isEdee"
        ],
        [
          "sandwich",
          "isEder"
        ],
        [
          "sandwich",
          "object"
        ],
        [
          "sandwich",
          "property"
        ],
        [
          "sandwich",
          "queryable"
        ],
        [
          "sandwich",
          "theAble"
        ],
        [
          "sausage",
          "hierarchyAble"
        ],
        [
          "sausage",
          "isEdee"
        ],
        [
          "sausage",
          "isEder"
        ],
        [
          "sausage",
          "meat"
        ],
        [
          "sausage",
          "object"
        ],
        [
          "sausage",
          "property"
        ],
        [
          "sausage",
          "queryable"
        ],
        [
          "sausage",
          "theAble"
        ],
        [
          "showOrder",
          "verby"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "strip",
          "isEdee"
        ],
        [
          "strip",
          "isEder"
        ],
        [
          "strip",
          "object"
        ],
        [
          "strip",
          "property"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "sushi",
          "food"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "sushi",
          "isEdee"
        ],
        [
          "sushi",
          "isEder"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "sushi",
          "property"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "vegetable",
          "food"
        ],
        [
          "vegetable",
          "hierarchyAble"
        ],
        [
          "vegetable",
          "isEdee"
        ],
        [
          "vegetable",
          "isEder"
        ],
        [
          "vegetable",
          "object"
        ],
        [
          "vegetable",
          "property"
        ],
        [
          "vegetable",
          "queryable"
        ],
        [
          "vegetable",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "unknown",
                0
              ],
              [
                "chicken",
                0
              ],
              [
                "modifies",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "chicken",
                0
              ],
              [
                "modifies",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "chicken",
              0
            ],
            "ops": [
              [
                "chicken",
                0
              ],
              [
                "modifies",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "modifies",
              0
            ],
            "ops": [
              [
                "modifies",
                0
              ]
            ],
            "counter": 4
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"ultimate\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 7}\n                                   text: ultimate\n                                   value: ultimate\n                                   word: ultimate\n    1. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 9, 'end': 15}\n                                   text: chicken\n                                   value: chicken\n                                   word: chicken\n    2. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 17, 'end': 24}\n                                   text: modifies\n                                   word: modifies\n    3. unknown/0  - \"grill\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 26, 'end': 30}\n                                   text: grill\n                                   value: grill\n                                   word: grill\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 7}, text: ultimate, value: ultimate, word: ultimate})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) - \"ultimate\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 7}\n                                   text: ultimate\n                                   unknown: True\n                                   value: ultimate\n                                   word: ultimate\n    1. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 9, 'end': 15}\n                                   text: chicken\n                                   value: chicken\n                                   word: chicken\n    2. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 17, 'end': 24}\n                                   text: modifies\n                                   word: modifies\n    3. unknown/0  - \"grill\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 26, 'end': 30}\n                                   text: grill\n                                   value: grill\n                                   word: grill\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 30}, text: grill, value: grill, word: grill})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) - \"ultimate\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 7}\n                                   text: ultimate\n                                   unknown: True\n                                   value: ultimate\n                                   word: ultimate\n    1. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 9, 'end': 15}\n                                   text: chicken\n                                   value: chicken\n                                   word: chicken\n    2. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 17, 'end': 24}\n                                   text: modifies\n                                   word: modifies\n   *3. unknown/1 (dead) - \"grill\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 26, 'end': 30}\n                                   text: grill\n                                   unknown: True\n                                   value: grill\n                                   word: grill\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 9, 'end': 15}, text: chicken, value: chicken, word: chicken})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1 (dead) - \"ultimate\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 7}\n                                   text: ultimate\n                                   unknown: True\n                                   value: ultimate\n                                   word: ultimate\n   *1. chicken/1 (dead) - \"chicken\"\n                                   dead: True\n                                   marker: Operator(chicken/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 9, 'end': 15}\n                                   text: chicken\n                                   value: chicken\n                                   word: chicken\n    2. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 17, 'end': 24}\n                                   text: modifies\n                                   word: modifies\n    3. unknown/1 (dead) - \"grill\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 26, 'end': 30}\n                                   text: grill\n                                   unknown: True\n                                   value: grill\n                                   word: grill\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge)), number: one, range: {'start': 17, 'end': 24}, text: modifies, word: modifies})\n\n>>>>>>>>>>>>> Counter 5\n   *0. modifies/1 (dead) - \"ultimate chicken modifies grill\"\n                                   concept: Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 30}, text: grill, unknown: True, value: grill, word: grill})\n                                   dead: True\n                                   flatten: True\n                                   marker: Operator(modifies/1, ['Selector(None, , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   modifiers: [\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 7}\n                                     text: ultimate\n                                     unknown: True\n                                     value: ultimate\n                                     word: ultimate\n\n                                     dead: True\n                                     marker: Operator(chicken/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 9, 'end': 15}\n                                     text: chicken\n                                     value: chicken\n                                     word: chicken\n                                   ]\n                                   number: one\n                                   range: {'start': 0, 'end': 30}\n                                   text: ultimate chicken modifies grill\n                                   word: modifies\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "word": "modifies",
          "number": "one",
          "text": "ultimate chicken modifies grill",
          "marker": "modifies",
          "range": {
            "start": 0,
            "end": 30
          },
          "dead": true,
          "modifiers": [
            {
              "marker": "unknown",
              "range": {
                "start": 0,
                "end": 7
              },
              "word": "ultimate",
              "text": "ultimate",
              "value": "ultimate",
              "unknown": true,
              "dead": true,
              "level": 1
            },
            {
              "value": "chicken",
              "text": "chicken",
              "marker": "chicken",
              "word": "chicken",
              "range": {
                "start": 9,
                "end": 15
              },
              "dead": true,
              "level": 1
            }
          ],
          "concept": {
            "marker": "unknown",
            "range": {
              "start": 26,
              "end": 30
            },
            "word": "grill",
            "text": "grill",
            "value": "grill",
            "unknown": true,
            "dead": true,
            "level": 1
          },
          "flatten": true,
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "fastfood#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "ultimate chicken modifies grill"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "chicken",
            0
          ],
          [
            "modifies",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "chicken",
            0
          ],
          [
            "modifies",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "chicken",
            0
          ],
          [
            "modifies",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "modifies",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "query": "ultimate chicken modifies grill",
      "key": {
        "query": "ultimate chicken modifies grill"
      }
    },
    {
      "extraConfig": true,
      "priorities": [
        [
          [
            "ultimate_chicken_grill",
            0
          ],
          [
            "list",
            0
          ]
        ]
      ]
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "apple",
          "fruit"
        ],
        [
          "apple",
          "hierarchyAble"
        ],
        [
          "apple",
          "isEdee"
        ],
        [
          "apple",
          "isEder"
        ],
        [
          "apple",
          "object"
        ],
        [
          "apple",
          "property"
        ],
        [
          "apple",
          "queryable"
        ],
        [
          "apple",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "bacon",
          "hierarchyAble"
        ],
        [
          "bacon",
          "isEdee"
        ],
        [
          "bacon",
          "isEder"
        ],
        [
          "bacon",
          "object"
        ],
        [
          "bacon",
          "property"
        ],
        [
          "bacon",
          "queryable"
        ],
        [
          "bacon",
          "theAble"
        ],
        [
          "bacon_deluxe",
          "adjective"
        ],
        [
          "bacon_deluxe",
          "concept"
        ],
        [
          "bacon_deluxe",
          "hierarchyAble"
        ],
        [
          "bacon_deluxe",
          "isEdee"
        ],
        [
          "bacon_deluxe",
          "isEder"
        ],
        [
          "bacon_deluxe",
          "object"
        ],
        [
          "bacon_deluxe",
          "property"
        ],
        [
          "bacon_deluxe",
          "queryable"
        ],
        [
          "bacon_deluxe",
          "theAble"
        ],
        [
          "banana",
          "fruit"
        ],
        [
          "banana",
          "hierarchyAble"
        ],
        [
          "banana",
          "isEdee"
        ],
        [
          "banana",
          "isEder"
        ],
        [
          "banana",
          "object"
        ],
        [
          "banana",
          "property"
        ],
        [
          "banana",
          "queryable"
        ],
        [
          "banana",
          "theAble"
        ],
        [
          "between",
          "preposition"
        ],
        [
          "brocoli",
          "hierarchyAble"
        ],
        [
          "brocoli",
          "isEdee"
        ],
        [
          "brocoli",
          "isEder"
        ],
        [
          "brocoli",
          "object"
        ],
        [
          "brocoli",
          "property"
        ],
        [
          "brocoli",
          "queryable"
        ],
        [
          "brocoli",
          "theAble"
        ],
        [
          "brocoli",
          "vegetable"
        ],
        [
          "cabbage",
          "hierarchyAble"
        ],
        [
          "cabbage",
          "isEdee"
        ],
        [
          "cabbage",
          "isEder"
        ],
        [
          "cabbage",
          "object"
        ],
        [
          "cabbage",
          "property"
        ],
        [
          "cabbage",
          "queryable"
        ],
        [
          "cabbage",
          "theAble"
        ],
        [
          "cabbage",
          "vegetable"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "carrot",
          "hierarchyAble"
        ],
        [
          "carrot",
          "isEdee"
        ],
        [
          "carrot",
          "isEder"
        ],
        [
          "carrot",
          "object"
        ],
        [
          "carrot",
          "property"
        ],
        [
          "carrot",
          "queryable"
        ],
        [
          "carrot",
          "theAble"
        ],
        [
          "carrot",
          "vegetable"
        ],
        [
          "changes",
          "event"
        ],
        [
          "changes",
          "verby"
        ],
        [
          "chicken",
          "hierarchyAble"
        ],
        [
          "chicken",
          "isEdee"
        ],
        [
          "chicken",
          "isEder"
        ],
        [
          "chicken",
          "object"
        ],
        [
          "chicken",
          "property"
        ],
        [
          "chicken",
          "queryable"
        ],
        [
          "chicken",
          "theAble"
        ],
        [
          "chicken_sandwich",
          "adjective"
        ],
        [
          "chicken_sandwich",
          "concept"
        ],
        [
          "chicken_sandwich",
          "hierarchyAble"
        ],
        [
          "chicken_sandwich",
          "isEdee"
        ],
        [
          "chicken_sandwich",
          "isEder"
        ],
        [
          "chicken_sandwich",
          "object"
        ],
        [
          "chicken_sandwich",
          "property"
        ],
        [
          "chicken_sandwich",
          "queryable"
        ],
        [
          "chicken_sandwich",
          "theAble"
        ],
        [
          "chicken_strip",
          "adjective"
        ],
        [
          "chicken_strip",
          "concept"
        ],
        [
          "chicken_strip",
          "food"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "isEdee"
        ],
        [
          "chicken_strip",
          "isEder"
        ],
        [
          "chicken_strip",
          "object"
        ],
        [
          "chicken_strip",
          "property"
        ],
        [
          "chicken_strip",
          "queryable"
        ],
        [
          "chicken_strip",
          "theAble"
        ],
        [
          "cod",
          "concept"
        ],
        [
          "cod",
          "hierarchyAble"
        ],
        [
          "cod",
          "isEdee"
        ],
        [
          "cod",
          "isEder"
        ],
        [
          "cod",
          "object"
        ],
        [
          "cod",
          "property"
        ],
        [
          "cod",
          "queryable"
        ],
        [
          "cod",
          "theAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "countable",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "concept"
        ],
        [
          "deluxe",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "isEdee"
        ],
        [
          "deluxe",
          "isEder"
        ],
        [
          "deluxe",
          "object"
        ],
        [
          "deluxe",
          "property"
        ],
        [
          "deluxe",
          "queryable"
        ],
        [
          "deluxe",
          "theAble"
        ],
        [
          "dog",
          "concept"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "dog",
          "isEdee"
        ],
        [
          "dog",
          "isEder"
        ],
        [
          "dog",
          "object"
        ],
        [
          "dog",
          "property"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "event",
          "event"
        ],
        [
          "food",
          "countable"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "french",
          "hierarchyAble"
        ],
        [
          "french",
          "isEdee"
        ],
        [
          "french",
          "isEder"
        ],
        [
          "french",
          "object"
        ],
        [
          "french",
          "property"
        ],
        [
          "french",
          "queryable"
        ],
        [
          "french",
          "theAble"
        ],
        [
          "french_fry",
          "adjective"
        ],
        [
          "french_fry",
          "concept"
        ],
        [
          "french_fry",
          "food"
        ],
        [
          "french_fry",
          "hierarchyAble"
        ],
        [
          "french_fry",
          "isEdee"
        ],
        [
          "french_fry",
          "isEder"
        ],
        [
          "french_fry",
          "object"
        ],
        [
          "french_fry",
          "property"
        ],
        [
          "french_fry",
          "queryable"
        ],
        [
          "french_fry",
          "theAble"
        ],
        [
          "fruit",
          "food"
        ],
        [
          "fruit",
          "hierarchyAble"
        ],
        [
          "fruit",
          "isEdee"
        ],
        [
          "fruit",
          "isEder"
        ],
        [
          "fruit",
          "object"
        ],
        [
          "fruit",
          "property"
        ],
        [
          "fruit",
          "queryable"
        ],
        [
          "fruit",
          "theAble"
        ],
        [
          "fry",
          "concept"
        ],
        [
          "fry",
          "hierarchyAble"
        ],
        [
          "fry",
          "isEdee"
        ],
        [
          "fry",
          "isEder"
        ],
        [
          "fry",
          "object"
        ],
        [
          "fry",
          "property"
        ],
        [
          "fry",
          "queryable"
        ],
        [
          "fry",
          "theAble"
        ],
        [
          "grill",
          "concept"
        ],
        [
          "grill",
          "hierarchyAble"
        ],
        [
          "grill",
          "isEdee"
        ],
        [
          "grill",
          "isEder"
        ],
        [
          "grill",
          "object"
        ],
        [
          "grill",
          "property"
        ],
        [
          "grill",
          "queryable"
        ],
        [
          "grill",
          "theAble"
        ],
        [
          "hamburger",
          "hierarchyAble"
        ],
        [
          "hamburger",
          "isEdee"
        ],
        [
          "hamburger",
          "isEder"
        ],
        [
          "hamburger",
          "object"
        ],
        [
          "hamburger",
          "property"
        ],
        [
          "hamburger",
          "queryable"
        ],
        [
          "hamburger",
          "sandwich"
        ],
        [
          "hamburger",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "hot",
          "hierarchyAble"
        ],
        [
          "hot",
          "isEdee"
        ],
        [
          "hot",
          "isEder"
        ],
        [
          "hot",
          "object"
        ],
        [
          "hot",
          "property"
        ],
        [
          "hot",
          "queryable"
        ],
        [
          "hot",
          "theAble"
        ],
        [
          "hot_dog",
          "adjective"
        ],
        [
          "hot_dog",
          "concept"
        ],
        [
          "hot_dog",
          "hierarchyAble"
        ],
        [
          "hot_dog",
          "isEdee"
        ],
        [
          "hot_dog",
          "isEder"
        ],
        [
          "hot_dog",
          "object"
        ],
        [
          "hot_dog",
          "property"
        ],
        [
          "hot_dog",
          "queryable"
        ],
        [
          "hot_dog",
          "sausage"
        ],
        [
          "hot_dog",
          "theAble"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "meat",
          "food"
        ],
        [
          "meat",
          "hierarchyAble"
        ],
        [
          "meat",
          "isEdee"
        ],
        [
          "meat",
          "isEder"
        ],
        [
          "meat",
          "object"
        ],
        [
          "meat",
          "property"
        ],
        [
          "meat",
          "queryable"
        ],
        [
          "meat",
          "theAble"
        ],
        [
          "modifies",
          "verby"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "noun",
          "theAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "orange",
          "fruit"
        ],
        [
          "orange",
          "hierarchyAble"
        ],
        [
          "orange",
          "isEdee"
        ],
        [
          "orange",
          "isEder"
        ],
        [
          "orange",
          "object"
        ],
        [
          "orange",
          "property"
        ],
        [
          "orange",
          "queryable"
        ],
        [
          "orange",
          "theAble"
        ],
        [
          "orderNoun",
          "noun"
        ],
        [
          "orderNoun",
          "queryable"
        ],
        [
          "pea",
          "hierarchyAble"
        ],
        [
          "pea",
          "isEdee"
        ],
        [
          "pea",
          "isEder"
        ],
        [
          "pea",
          "object"
        ],
        [
          "pea",
          "property"
        ],
        [
          "pea",
          "queryable"
        ],
        [
          "pea",
          "theAble"
        ],
        [
          "pea",
          "vegetable"
        ],
        [
          "premium",
          "hierarchyAble"
        ],
        [
          "premium",
          "isEdee"
        ],
        [
          "premium",
          "isEder"
        ],
        [
          "premium",
          "object"
        ],
        [
          "premium",
          "property"
        ],
        [
          "premium",
          "queryable"
        ],
        [
          "premium",
          "theAble"
        ],
        [
          "premium_cod",
          "adjective"
        ],
        [
          "premium_cod",
          "concept"
        ],
        [
          "premium_cod",
          "hierarchyAble"
        ],
        [
          "premium_cod",
          "isEdee"
        ],
        [
          "premium_cod",
          "isEder"
        ],
        [
          "premium_cod",
          "object"
        ],
        [
          "premium_cod",
          "property"
        ],
        [
          "premium_cod",
          "queryable"
        ],
        [
          "premium_cod",
          "theAble"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "sandwich",
          "concept"
        ],
        [
          "sandwich",
          "food"
        ],
        [
          "sandwich",
          "hierarchyAble"
        ],
        [
          "sandwich",
          "isEdee"
        ],
        [
          "sandwich",
          "isEder"
        ],
        [
          "sandwich",
          "object"
        ],
        [
          "sandwich",
          "property"
        ],
        [
          "sandwich",
          "queryable"
        ],
        [
          "sandwich",
          "theAble"
        ],
        [
          "sausage",
          "hierarchyAble"
        ],
        [
          "sausage",
          "isEdee"
        ],
        [
          "sausage",
          "isEder"
        ],
        [
          "sausage",
          "meat"
        ],
        [
          "sausage",
          "object"
        ],
        [
          "sausage",
          "property"
        ],
        [
          "sausage",
          "queryable"
        ],
        [
          "sausage",
          "theAble"
        ],
        [
          "showOrder",
          "verby"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "strip",
          "isEdee"
        ],
        [
          "strip",
          "isEder"
        ],
        [
          "strip",
          "object"
        ],
        [
          "strip",
          "property"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "sushi",
          "food"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "sushi",
          "isEdee"
        ],
        [
          "sushi",
          "isEder"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "sushi",
          "property"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "ultimate",
          "hierarchyAble"
        ],
        [
          "ultimate",
          "isEdee"
        ],
        [
          "ultimate",
          "isEder"
        ],
        [
          "ultimate",
          "object"
        ],
        [
          "ultimate",
          "property"
        ],
        [
          "ultimate",
          "queryable"
        ],
        [
          "ultimate",
          "theAble"
        ],
        [
          "ultimate_chicken_grill",
          "adjective"
        ],
        [
          "ultimate_chicken_grill",
          "concept"
        ],
        [
          "ultimate_chicken_grill",
          "hierarchyAble"
        ],
        [
          "ultimate_chicken_grill",
          "isEdee"
        ],
        [
          "ultimate_chicken_grill",
          "isEder"
        ],
        [
          "ultimate_chicken_grill",
          "object"
        ],
        [
          "ultimate_chicken_grill",
          "property"
        ],
        [
          "ultimate_chicken_grill",
          "queryable"
        ],
        [
          "ultimate_chicken_grill",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "vegetable",
          "food"
        ],
        [
          "vegetable",
          "hierarchyAble"
        ],
        [
          "vegetable",
          "isEdee"
        ],
        [
          "vegetable",
          "isEder"
        ],
        [
          "vegetable",
          "object"
        ],
        [
          "vegetable",
          "property"
        ],
        [
          "vegetable",
          "queryable"
        ],
        [
          "vegetable",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "chicken",
                0
              ],
              [
                "modifies",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "unknown",
                0
              ],
              [
                "chicken",
                0
              ],
              [
                "modifies",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "chicken",
                0
              ],
              [
                "modifies",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "chicken",
              0
            ],
            "ops": [
              [
                "chicken",
                0
              ],
              [
                "modifies",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "modifies",
              0
            ],
            "ops": [
              [
                "modifies",
                0
              ]
            ],
            "counter": 5
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"asiago\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 5}\n                                   text: asiago\n                                   value: asiago\n                                   word: asiago\n    1. unknown/0  - \"ranch\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 7, 'end': 11}\n                                   text: ranch\n                                   value: ranch\n                                   word: ranch\n    2. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 13, 'end': 19}\n                                   text: chicken\n                                   value: chicken\n                                   word: chicken\n    3. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 28}\n                                   text: modifies\n                                   word: modifies\n    4. unknown/0  - \"club\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 30, 'end': 33}\n                                   text: club\n                                   value: club\n                                   word: club\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: asiago, value: asiago, word: asiago})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) - \"asiago\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 5}\n                                   text: asiago\n                                   unknown: True\n                                   value: asiago\n                                   word: asiago\n    1. unknown/0  - \"ranch\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 7, 'end': 11}\n                                   text: ranch\n                                   value: ranch\n                                   word: ranch\n    2. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 13, 'end': 19}\n                                   text: chicken\n                                   value: chicken\n                                   word: chicken\n    3. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 28}\n                                   text: modifies\n                                   word: modifies\n    4. unknown/0  - \"club\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 30, 'end': 33}\n                                   text: club\n                                   value: club\n                                   word: club\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 11}, text: ranch, value: ranch, word: ranch})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) - \"asiago\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 5}\n                                   text: asiago\n                                   unknown: True\n                                   value: asiago\n                                   word: asiago\n   *1. unknown/1 (dead) - \"ranch\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 7, 'end': 11}\n                                   text: ranch\n                                   unknown: True\n                                   value: ranch\n                                   word: ranch\n    2. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 13, 'end': 19}\n                                   text: chicken\n                                   value: chicken\n                                   word: chicken\n    3. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 28}\n                                   text: modifies\n                                   word: modifies\n    4. unknown/0  - \"club\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 30, 'end': 33}\n                                   text: club\n                                   value: club\n                                   word: club\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 30, 'end': 33}, text: club, value: club, word: club})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1 (dead) - \"asiago\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 5}\n                                   text: asiago\n                                   unknown: True\n                                   value: asiago\n                                   word: asiago\n    1. unknown/1 (dead) - \"ranch\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 7, 'end': 11}\n                                   text: ranch\n                                   unknown: True\n                                   value: ranch\n                                   word: ranch\n    2. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 13, 'end': 19}\n                                   text: chicken\n                                   value: chicken\n                                   word: chicken\n    3. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 28}\n                                   text: modifies\n                                   word: modifies\n   *4. unknown/1 (dead) - \"club\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 30, 'end': 33}\n                                   text: club\n                                   unknown: True\n                                   value: club\n                                   word: club\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 13, 'end': 19}, text: chicken, value: chicken, word: chicken})\n\n>>>>>>>>>>>>> Counter 5\n    0. unknown/1 (dead) - \"asiago\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 5}\n                                   text: asiago\n                                   unknown: True\n                                   value: asiago\n                                   word: asiago\n    1. unknown/1 (dead) - \"ranch\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 7, 'end': 11}\n                                   text: ranch\n                                   unknown: True\n                                   value: ranch\n                                   word: ranch\n   *2. chicken/1 (dead) - \"chicken\"\n                                   dead: True\n                                   marker: Operator(chicken/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 13, 'end': 19}\n                                   text: chicken\n                                   value: chicken\n                                   word: chicken\n    3. modifies/0  - \"modifies\"\n                                   marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 28}\n                                   text: modifies\n                                   word: modifies\n    4. unknown/1 (dead) - \"club\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 30, 'end': 33}\n                                   text: club\n                                   unknown: True\n                                   value: club\n                                   word: club\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0], flatten: true }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0], flatten: true }')), variables({}) bridge(bridge)), number: one, range: {'start': 21, 'end': 28}, text: modifies, word: modifies})\n\n>>>>>>>>>>>>> Counter 6\n   *0. modifies/1 (dead) - \"asiago ranch chicken modifies club\"\n                                   concept: Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 30, 'end': 33}, text: club, unknown: True, value: club, word: club})\n                                   dead: True\n                                   flatten: True\n                                   marker: Operator(modifies/1, ['Selector(None, , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   modifiers: [\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 5}\n                                     text: asiago\n                                     unknown: True\n                                     value: asiago\n                                     word: asiago\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 7, 'end': 11}\n                                     text: ranch\n                                     unknown: True\n                                     value: ranch\n                                     word: ranch\n\n                                     dead: True\n                                     marker: Operator(chicken/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 13, 'end': 19}\n                                     text: chicken\n                                     value: chicken\n                                     word: chicken\n                                   ]\n                                   number: one\n                                   range: {'start': 0, 'end': 33}\n                                   text: asiago ranch chicken modifies club\n                                   word: modifies\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "word": "modifies",
          "number": "one",
          "text": "asiago ranch chicken modifies club",
          "marker": "modifies",
          "range": {
            "start": 0,
            "end": 33
          },
          "dead": true,
          "modifiers": [
            {
              "marker": "unknown",
              "range": {
                "start": 0,
                "end": 5
              },
              "word": "asiago",
              "text": "asiago",
              "value": "asiago",
              "unknown": true,
              "dead": true,
              "level": 1
            },
            {
              "marker": "unknown",
              "range": {
                "start": 7,
                "end": 11
              },
              "word": "ranch",
              "text": "ranch",
              "value": "ranch",
              "unknown": true,
              "dead": true,
              "level": 1
            },
            {
              "value": "chicken",
              "text": "chicken",
              "marker": "chicken",
              "word": "chicken",
              "range": {
                "start": 13,
                "end": 19
              },
              "dead": true,
              "level": 1
            }
          ],
          "concept": {
            "marker": "unknown",
            "range": {
              "start": 30,
              "end": 33
            },
            "word": "club",
            "text": "club",
            "value": "club",
            "unknown": true,
            "dead": true,
            "level": 1
          },
          "flatten": true,
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "fastfood#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "asiago ranch chicken modifies club"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "chicken",
            0
          ],
          [
            "modifies",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "chicken",
            0
          ],
          [
            "modifies",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "chicken",
            0
          ],
          [
            "modifies",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "modifies",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "query": "asiago ranch chicken modifies club",
      "key": {
        "query": "asiago ranch chicken modifies club"
      }
    },
    {
      "extraConfig": true,
      "priorities": [
        [
          [
            "asiago_ranch_chicken_club",
            0
          ],
          [
            "list",
            0
          ]
        ]
      ]
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "apple",
          "fruit"
        ],
        [
          "apple",
          "hierarchyAble"
        ],
        [
          "apple",
          "isEdee"
        ],
        [
          "apple",
          "isEder"
        ],
        [
          "apple",
          "object"
        ],
        [
          "apple",
          "property"
        ],
        [
          "apple",
          "queryable"
        ],
        [
          "apple",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "asiago",
          "hierarchyAble"
        ],
        [
          "asiago",
          "isEdee"
        ],
        [
          "asiago",
          "isEder"
        ],
        [
          "asiago",
          "object"
        ],
        [
          "asiago",
          "property"
        ],
        [
          "asiago",
          "queryable"
        ],
        [
          "asiago",
          "theAble"
        ],
        [
          "asiago_ranch_chicken_club",
          "adjective"
        ],
        [
          "asiago_ranch_chicken_club",
          "concept"
        ],
        [
          "asiago_ranch_chicken_club",
          "hierarchyAble"
        ],
        [
          "asiago_ranch_chicken_club",
          "isEdee"
        ],
        [
          "asiago_ranch_chicken_club",
          "isEder"
        ],
        [
          "asiago_ranch_chicken_club",
          "object"
        ],
        [
          "asiago_ranch_chicken_club",
          "property"
        ],
        [
          "asiago_ranch_chicken_club",
          "queryable"
        ],
        [
          "asiago_ranch_chicken_club",
          "theAble"
        ],
        [
          "bacon",
          "hierarchyAble"
        ],
        [
          "bacon",
          "isEdee"
        ],
        [
          "bacon",
          "isEder"
        ],
        [
          "bacon",
          "object"
        ],
        [
          "bacon",
          "property"
        ],
        [
          "bacon",
          "queryable"
        ],
        [
          "bacon",
          "theAble"
        ],
        [
          "bacon_deluxe",
          "adjective"
        ],
        [
          "bacon_deluxe",
          "concept"
        ],
        [
          "bacon_deluxe",
          "hierarchyAble"
        ],
        [
          "bacon_deluxe",
          "isEdee"
        ],
        [
          "bacon_deluxe",
          "isEder"
        ],
        [
          "bacon_deluxe",
          "object"
        ],
        [
          "bacon_deluxe",
          "property"
        ],
        [
          "bacon_deluxe",
          "queryable"
        ],
        [
          "bacon_deluxe",
          "theAble"
        ],
        [
          "banana",
          "fruit"
        ],
        [
          "banana",
          "hierarchyAble"
        ],
        [
          "banana",
          "isEdee"
        ],
        [
          "banana",
          "isEder"
        ],
        [
          "banana",
          "object"
        ],
        [
          "banana",
          "property"
        ],
        [
          "banana",
          "queryable"
        ],
        [
          "banana",
          "theAble"
        ],
        [
          "between",
          "preposition"
        ],
        [
          "brocoli",
          "hierarchyAble"
        ],
        [
          "brocoli",
          "isEdee"
        ],
        [
          "brocoli",
          "isEder"
        ],
        [
          "brocoli",
          "object"
        ],
        [
          "brocoli",
          "property"
        ],
        [
          "brocoli",
          "queryable"
        ],
        [
          "brocoli",
          "theAble"
        ],
        [
          "brocoli",
          "vegetable"
        ],
        [
          "cabbage",
          "hierarchyAble"
        ],
        [
          "cabbage",
          "isEdee"
        ],
        [
          "cabbage",
          "isEder"
        ],
        [
          "cabbage",
          "object"
        ],
        [
          "cabbage",
          "property"
        ],
        [
          "cabbage",
          "queryable"
        ],
        [
          "cabbage",
          "theAble"
        ],
        [
          "cabbage",
          "vegetable"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "carrot",
          "hierarchyAble"
        ],
        [
          "carrot",
          "isEdee"
        ],
        [
          "carrot",
          "isEder"
        ],
        [
          "carrot",
          "object"
        ],
        [
          "carrot",
          "property"
        ],
        [
          "carrot",
          "queryable"
        ],
        [
          "carrot",
          "theAble"
        ],
        [
          "carrot",
          "vegetable"
        ],
        [
          "changes",
          "event"
        ],
        [
          "changes",
          "verby"
        ],
        [
          "chicken",
          "hierarchyAble"
        ],
        [
          "chicken",
          "isEdee"
        ],
        [
          "chicken",
          "isEder"
        ],
        [
          "chicken",
          "object"
        ],
        [
          "chicken",
          "property"
        ],
        [
          "chicken",
          "queryable"
        ],
        [
          "chicken",
          "theAble"
        ],
        [
          "chicken_sandwich",
          "adjective"
        ],
        [
          "chicken_sandwich",
          "concept"
        ],
        [
          "chicken_sandwich",
          "hierarchyAble"
        ],
        [
          "chicken_sandwich",
          "isEdee"
        ],
        [
          "chicken_sandwich",
          "isEder"
        ],
        [
          "chicken_sandwich",
          "object"
        ],
        [
          "chicken_sandwich",
          "property"
        ],
        [
          "chicken_sandwich",
          "queryable"
        ],
        [
          "chicken_sandwich",
          "theAble"
        ],
        [
          "chicken_strip",
          "adjective"
        ],
        [
          "chicken_strip",
          "concept"
        ],
        [
          "chicken_strip",
          "food"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "isEdee"
        ],
        [
          "chicken_strip",
          "isEder"
        ],
        [
          "chicken_strip",
          "object"
        ],
        [
          "chicken_strip",
          "property"
        ],
        [
          "chicken_strip",
          "queryable"
        ],
        [
          "chicken_strip",
          "theAble"
        ],
        [
          "club",
          "concept"
        ],
        [
          "club",
          "hierarchyAble"
        ],
        [
          "club",
          "isEdee"
        ],
        [
          "club",
          "isEder"
        ],
        [
          "club",
          "object"
        ],
        [
          "club",
          "property"
        ],
        [
          "club",
          "queryable"
        ],
        [
          "club",
          "theAble"
        ],
        [
          "cod",
          "concept"
        ],
        [
          "cod",
          "hierarchyAble"
        ],
        [
          "cod",
          "isEdee"
        ],
        [
          "cod",
          "isEder"
        ],
        [
          "cod",
          "object"
        ],
        [
          "cod",
          "property"
        ],
        [
          "cod",
          "queryable"
        ],
        [
          "cod",
          "theAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "countable",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "concept"
        ],
        [
          "deluxe",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "isEdee"
        ],
        [
          "deluxe",
          "isEder"
        ],
        [
          "deluxe",
          "object"
        ],
        [
          "deluxe",
          "property"
        ],
        [
          "deluxe",
          "queryable"
        ],
        [
          "deluxe",
          "theAble"
        ],
        [
          "dog",
          "concept"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "dog",
          "isEdee"
        ],
        [
          "dog",
          "isEder"
        ],
        [
          "dog",
          "object"
        ],
        [
          "dog",
          "property"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "event",
          "event"
        ],
        [
          "food",
          "countable"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "french",
          "hierarchyAble"
        ],
        [
          "french",
          "isEdee"
        ],
        [
          "french",
          "isEder"
        ],
        [
          "french",
          "object"
        ],
        [
          "french",
          "property"
        ],
        [
          "french",
          "queryable"
        ],
        [
          "french",
          "theAble"
        ],
        [
          "french_fry",
          "adjective"
        ],
        [
          "french_fry",
          "concept"
        ],
        [
          "french_fry",
          "food"
        ],
        [
          "french_fry",
          "hierarchyAble"
        ],
        [
          "french_fry",
          "isEdee"
        ],
        [
          "french_fry",
          "isEder"
        ],
        [
          "french_fry",
          "object"
        ],
        [
          "french_fry",
          "property"
        ],
        [
          "french_fry",
          "queryable"
        ],
        [
          "french_fry",
          "theAble"
        ],
        [
          "fruit",
          "food"
        ],
        [
          "fruit",
          "hierarchyAble"
        ],
        [
          "fruit",
          "isEdee"
        ],
        [
          "fruit",
          "isEder"
        ],
        [
          "fruit",
          "object"
        ],
        [
          "fruit",
          "property"
        ],
        [
          "fruit",
          "queryable"
        ],
        [
          "fruit",
          "theAble"
        ],
        [
          "fry",
          "concept"
        ],
        [
          "fry",
          "hierarchyAble"
        ],
        [
          "fry",
          "isEdee"
        ],
        [
          "fry",
          "isEder"
        ],
        [
          "fry",
          "object"
        ],
        [
          "fry",
          "property"
        ],
        [
          "fry",
          "queryable"
        ],
        [
          "fry",
          "theAble"
        ],
        [
          "grill",
          "concept"
        ],
        [
          "grill",
          "hierarchyAble"
        ],
        [
          "grill",
          "isEdee"
        ],
        [
          "grill",
          "isEder"
        ],
        [
          "grill",
          "object"
        ],
        [
          "grill",
          "property"
        ],
        [
          "grill",
          "queryable"
        ],
        [
          "grill",
          "theAble"
        ],
        [
          "hamburger",
          "hierarchyAble"
        ],
        [
          "hamburger",
          "isEdee"
        ],
        [
          "hamburger",
          "isEder"
        ],
        [
          "hamburger",
          "object"
        ],
        [
          "hamburger",
          "property"
        ],
        [
          "hamburger",
          "queryable"
        ],
        [
          "hamburger",
          "sandwich"
        ],
        [
          "hamburger",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "hot",
          "hierarchyAble"
        ],
        [
          "hot",
          "isEdee"
        ],
        [
          "hot",
          "isEder"
        ],
        [
          "hot",
          "object"
        ],
        [
          "hot",
          "property"
        ],
        [
          "hot",
          "queryable"
        ],
        [
          "hot",
          "theAble"
        ],
        [
          "hot_dog",
          "adjective"
        ],
        [
          "hot_dog",
          "concept"
        ],
        [
          "hot_dog",
          "hierarchyAble"
        ],
        [
          "hot_dog",
          "isEdee"
        ],
        [
          "hot_dog",
          "isEder"
        ],
        [
          "hot_dog",
          "object"
        ],
        [
          "hot_dog",
          "property"
        ],
        [
          "hot_dog",
          "queryable"
        ],
        [
          "hot_dog",
          "sausage"
        ],
        [
          "hot_dog",
          "theAble"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "meat",
          "food"
        ],
        [
          "meat",
          "hierarchyAble"
        ],
        [
          "meat",
          "isEdee"
        ],
        [
          "meat",
          "isEder"
        ],
        [
          "meat",
          "object"
        ],
        [
          "meat",
          "property"
        ],
        [
          "meat",
          "queryable"
        ],
        [
          "meat",
          "theAble"
        ],
        [
          "modifies",
          "verby"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "noun",
          "theAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "orange",
          "fruit"
        ],
        [
          "orange",
          "hierarchyAble"
        ],
        [
          "orange",
          "isEdee"
        ],
        [
          "orange",
          "isEder"
        ],
        [
          "orange",
          "object"
        ],
        [
          "orange",
          "property"
        ],
        [
          "orange",
          "queryable"
        ],
        [
          "orange",
          "theAble"
        ],
        [
          "orderNoun",
          "noun"
        ],
        [
          "orderNoun",
          "queryable"
        ],
        [
          "pea",
          "hierarchyAble"
        ],
        [
          "pea",
          "isEdee"
        ],
        [
          "pea",
          "isEder"
        ],
        [
          "pea",
          "object"
        ],
        [
          "pea",
          "property"
        ],
        [
          "pea",
          "queryable"
        ],
        [
          "pea",
          "theAble"
        ],
        [
          "pea",
          "vegetable"
        ],
        [
          "premium",
          "hierarchyAble"
        ],
        [
          "premium",
          "isEdee"
        ],
        [
          "premium",
          "isEder"
        ],
        [
          "premium",
          "object"
        ],
        [
          "premium",
          "property"
        ],
        [
          "premium",
          "queryable"
        ],
        [
          "premium",
          "theAble"
        ],
        [
          "premium_cod",
          "adjective"
        ],
        [
          "premium_cod",
          "concept"
        ],
        [
          "premium_cod",
          "hierarchyAble"
        ],
        [
          "premium_cod",
          "isEdee"
        ],
        [
          "premium_cod",
          "isEder"
        ],
        [
          "premium_cod",
          "object"
        ],
        [
          "premium_cod",
          "property"
        ],
        [
          "premium_cod",
          "queryable"
        ],
        [
          "premium_cod",
          "theAble"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "ranch",
          "hierarchyAble"
        ],
        [
          "ranch",
          "isEdee"
        ],
        [
          "ranch",
          "isEder"
        ],
        [
          "ranch",
          "object"
        ],
        [
          "ranch",
          "property"
        ],
        [
          "ranch",
          "queryable"
        ],
        [
          "ranch",
          "theAble"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "sandwich",
          "concept"
        ],
        [
          "sandwich",
          "food"
        ],
        [
          "sandwich",
          "hierarchyAble"
        ],
        [
          "sandwich",
          "isEdee"
        ],
        [
          "sandwich",
          "isEder"
        ],
        [
          "sandwich",
          "object"
        ],
        [
          "sandwich",
          "property"
        ],
        [
          "sandwich",
          "queryable"
        ],
        [
          "sandwich",
          "theAble"
        ],
        [
          "sausage",
          "hierarchyAble"
        ],
        [
          "sausage",
          "isEdee"
        ],
        [
          "sausage",
          "isEder"
        ],
        [
          "sausage",
          "meat"
        ],
        [
          "sausage",
          "object"
        ],
        [
          "sausage",
          "property"
        ],
        [
          "sausage",
          "queryable"
        ],
        [
          "sausage",
          "theAble"
        ],
        [
          "showOrder",
          "verby"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "strip",
          "isEdee"
        ],
        [
          "strip",
          "isEder"
        ],
        [
          "strip",
          "object"
        ],
        [
          "strip",
          "property"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "sushi",
          "food"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "sushi",
          "isEdee"
        ],
        [
          "sushi",
          "isEder"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "sushi",
          "property"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "ultimate",
          "hierarchyAble"
        ],
        [
          "ultimate",
          "isEdee"
        ],
        [
          "ultimate",
          "isEder"
        ],
        [
          "ultimate",
          "object"
        ],
        [
          "ultimate",
          "property"
        ],
        [
          "ultimate",
          "queryable"
        ],
        [
          "ultimate",
          "theAble"
        ],
        [
          "ultimate_chicken_grill",
          "adjective"
        ],
        [
          "ultimate_chicken_grill",
          "concept"
        ],
        [
          "ultimate_chicken_grill",
          "hierarchyAble"
        ],
        [
          "ultimate_chicken_grill",
          "isEdee"
        ],
        [
          "ultimate_chicken_grill",
          "isEder"
        ],
        [
          "ultimate_chicken_grill",
          "object"
        ],
        [
          "ultimate_chicken_grill",
          "property"
        ],
        [
          "ultimate_chicken_grill",
          "queryable"
        ],
        [
          "ultimate_chicken_grill",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "vegetable",
          "food"
        ],
        [
          "vegetable",
          "hierarchyAble"
        ],
        [
          "vegetable",
          "isEdee"
        ],
        [
          "vegetable",
          "isEder"
        ],
        [
          "vegetable",
          "object"
        ],
        [
          "vegetable",
          "property"
        ],
        [
          "vegetable",
          "queryable"
        ],
        [
          "vegetable",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "bacon",
                0
              ],
              [
                "deluxe",
                0
              ],
              [
                "is",
                0
              ],
              [
                "hamburger",
                0
              ],
              [
                "bacon_deluxe",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "bacon",
                0
              ],
              [
                "deluxe",
                0
              ],
              [
                "is",
                0
              ],
              [
                "hamburger",
                0
              ],
              [
                "bacon_deluxe",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "bacon",
                0
              ],
              [
                "deluxe",
                0
              ],
              [
                "is",
                0
              ],
              [
                "hamburger",
                0
              ],
              [
                "bacon_deluxe",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "unknown",
                0
              ],
              [
                "bacon",
                0
              ],
              [
                "deluxe",
                0
              ],
              [
                "is",
                0
              ],
              [
                "hamburger",
                0
              ],
              [
                "bacon_deluxe",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "bacon_deluxe",
              0
            ],
            "ops": [
              [
                "bacon",
                0
              ],
              [
                "bacon_deluxe",
                0
              ],
              [
                "deluxe",
                0
              ],
              [
                "is",
                0
              ],
              [
                "hamburger",
                0
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "hamburger",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 6
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "hamburger",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 7
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "hamburger",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 8
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "hamburger",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 9
          },
          {
            "op": [
              "hamburger",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "hamburger",
                0
              ]
            ],
            "counter": 10
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 11
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 12
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"single\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   value: single\n                                   word: single\n    1. unknown/0  - \"double\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   value: double\n                                   word: double\n    2. unknown/0  - \"triple\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   value: triple\n                                   word: triple\n    3. unknown/0  - \"baconater\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   value: baconater\n                                   word: baconater\n    4. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({}) bridge(bridge))\n                                   range: {'start': 31, 'end': 33}\n                                   text: and\n                                   word: and\n    5. bacon/0  - \"bacon\"\n                                   marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge))\n                                   range: {'start': 35, 'end': 39}\n                                   text: bacon\n                                   value: bacon\n                                   word: bacon\n    6. deluxe/0  - \"deluxe\"\n                                   marker: Operator(deluxe/0, [\"Selector(Bridge('{ ...next(operator), value: 'deluxe' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'deluxe' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 41, 'end': 46}\n                                   text: deluxe\n                                   value: deluxe\n                                   word: deluxe\n    7. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 48, 'end': 50}\n                                   text: are\n                                   word: are\n    8. hamburger/0  - \"hamburgers\"\n                                   marker: Operator(hamburger/0, [\"Selector(Bridge('{ ...next(operator), value: 'hamburger' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'hamburger' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 52, 'end': 61}\n                                   text: hamburgers\n                                   value: hamburger\n                                   word: hamburgers\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: single, value: single, word: single})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   unknown: True\n                                   value: single\n                                   word: single\n    1. unknown/0  - \"double\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   value: double\n                                   word: double\n    2. unknown/0  - \"triple\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   value: triple\n                                   word: triple\n    3. unknown/0  - \"baconater\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   value: baconater\n                                   word: baconater\n    4. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({}) bridge(bridge))\n                                   range: {'start': 31, 'end': 33}\n                                   text: and\n                                   word: and\n    5. bacon/0  - \"bacon\"\n                                   marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge))\n                                   range: {'start': 35, 'end': 39}\n                                   text: bacon\n                                   types: [\n                                   'bacon'\n                                   ]\n                                   value: bacon\n                                   word: bacon\n    6. deluxe/0  - \"deluxe\"\n                                   marker: Operator(deluxe/0, [\"Selector(Bridge('{ ...next(operator), value: 'deluxe' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'deluxe' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 41, 'end': 46}\n                                   text: deluxe\n                                   types: [\n                                   'deluxe'\n                                   ]\n                                   value: deluxe\n                                   word: deluxe\n    7. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 48, 'end': 50}\n                                   text: are\n                                   word: are\n    8. hamburger/0  - \"hamburgers\"\n                                   marker: Operator(hamburger/0, [\"Selector(Bridge('{ ...next(operator), value: 'hamburger' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'hamburger' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 52, 'end': 61}\n                                   text: hamburgers\n                                   value: hamburger\n                                   word: hamburgers\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 12}, text: double, value: double, word: double})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   unknown: True\n                                   value: single\n                                   word: single\n   *1. unknown/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   unknown: True\n                                   value: double\n                                   word: double\n    2. unknown/0  - \"triple\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   value: triple\n                                   word: triple\n    3. unknown/0  - \"baconater\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   value: baconater\n                                   word: baconater\n    4. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({}) bridge(bridge))\n                                   range: {'start': 31, 'end': 33}\n                                   text: and\n                                   word: and\n    5. bacon/0  - \"bacon\"\n                                   marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge))\n                                   range: {'start': 35, 'end': 39}\n                                   text: bacon\n                                   types: [\n                                   'bacon'\n                                   ]\n                                   value: bacon\n                                   word: bacon\n    6. deluxe/0  - \"deluxe\"\n                                   marker: Operator(deluxe/0, [\"Selector(Bridge('{ ...next(operator), value: 'deluxe' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'deluxe' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 41, 'end': 46}\n                                   text: deluxe\n                                   types: [\n                                   'deluxe'\n                                   ]\n                                   value: deluxe\n                                   word: deluxe\n    7. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 48, 'end': 50}\n                                   text: are\n                                   word: are\n    8. hamburger/0  - \"hamburgers\"\n                                   marker: Operator(hamburger/0, [\"Selector(Bridge('{ ...next(operator), value: 'hamburger' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'hamburger' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 52, 'end': 61}\n                                   text: hamburgers\n                                   value: hamburger\n                                   word: hamburgers\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 19}, text: triple, value: triple, word: triple})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   unknown: True\n                                   value: single\n                                   word: single\n    1. unknown/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   unknown: True\n                                   value: double\n                                   word: double\n   *2. unknown/1 (dead) - \"triple\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   unknown: True\n                                   value: triple\n                                   word: triple\n    3. unknown/0  - \"baconater\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   value: baconater\n                                   word: baconater\n    4. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({}) bridge(bridge))\n                                   range: {'start': 31, 'end': 33}\n                                   text: and\n                                   word: and\n    5. bacon/0  - \"bacon\"\n                                   marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge))\n                                   range: {'start': 35, 'end': 39}\n                                   text: bacon\n                                   types: [\n                                   'bacon'\n                                   ]\n                                   value: bacon\n                                   word: bacon\n    6. deluxe/0  - \"deluxe\"\n                                   marker: Operator(deluxe/0, [\"Selector(Bridge('{ ...next(operator), value: 'deluxe' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'deluxe' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 41, 'end': 46}\n                                   text: deluxe\n                                   types: [\n                                   'deluxe'\n                                   ]\n                                   value: deluxe\n                                   word: deluxe\n    7. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 48, 'end': 50}\n                                   text: are\n                                   word: are\n    8. hamburger/0  - \"hamburgers\"\n                                   marker: Operator(hamburger/0, [\"Selector(Bridge('{ ...next(operator), value: 'hamburger' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'hamburger' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 52, 'end': 61}\n                                   text: hamburgers\n                                   value: hamburger\n                                   word: hamburgers\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 21, 'end': 29}, text: baconater, value: baconater, word: baconater})\n\n>>>>>>>>>>>>> Counter 5\n    0. unknown/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   unknown: True\n                                   value: single\n                                   word: single\n    1. unknown/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   unknown: True\n                                   value: double\n                                   word: double\n    2. unknown/1 (dead) - \"triple\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   unknown: True\n                                   value: triple\n                                   word: triple\n   *3. unknown/1 (dead) - \"baconater\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   unknown: True\n                                   value: baconater\n                                   word: baconater\n    4. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({}) bridge(bridge))\n                                   range: {'start': 31, 'end': 33}\n                                   text: and\n                                   word: and\n    5. bacon/0  - \"bacon\"\n                                   marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge))\n                                   range: {'start': 35, 'end': 39}\n                                   text: bacon\n                                   types: [\n                                   'bacon'\n                                   ]\n                                   value: bacon\n                                   word: bacon\n    6. deluxe/0  - \"deluxe\"\n                                   marker: Operator(deluxe/0, [\"Selector(Bridge('{ ...next(operator), value: 'deluxe' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'deluxe' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 41, 'end': 46}\n                                   text: deluxe\n                                   types: [\n                                   'deluxe'\n                                   ]\n                                   value: deluxe\n                                   word: deluxe\n    7. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 48, 'end': 50}\n                                   text: are\n                                   word: are\n    8. hamburger/0  - \"hamburgers\"\n                                   marker: Operator(hamburger/0, [\"Selector(Bridge('{ ...next(operator), value: 'hamburger' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'hamburger' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 52, 'end': 61}\n                                   text: hamburgers\n                                   value: hamburger\n                                   word: hamburgers\n<<<<<<<<<<<<<\nNext Op (index=6) is Context({convolution: True, marker: Operator(bacon_deluxe/0, [\"Selector(Bridge('{ ...after[0], 'bacon': before[0], atomic: true, dead: true, marker: next(operator('bacon_deluxe')), value: 'bacon_deluxe', modifiers: append(['bacon'], after[0].modifiers)}'), , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(Bridge('{ ...after[0], 'bacon': before[0], atomic: true, dead: true, marker: next(operator('bacon_deluxe')), value: 'bacon_deluxe', modifiers: append(['bacon'], after[0].modifiers)}')), variables({}), convolution bridge(bridge)), range: {'start': 35, 'end': 46}})\n\n>>>>>>>>>>>>> Counter 6\n    0. unknown/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   unknown: True\n                                   value: single\n                                   word: single\n    1. unknown/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   unknown: True\n                                   value: double\n                                   word: double\n    2. unknown/1 (dead) - \"triple\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   unknown: True\n                                   value: triple\n                                   word: triple\n    3. unknown/1 (dead) - \"baconater\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   unknown: True\n                                   value: baconater\n                                   word: baconater\n    4. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({}) bridge(bridge))\n                                   range: {'start': 31, 'end': 33}\n                                   text: and\n                                   word: and\n   *5. bacon_deluxe/1 (dead) - \"bacon deluxe\"\n                                   atomic: True\n                                   bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 35, 'end': 39}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                   dead: True\n                                   marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'bacon'\n                                   ]\n                                   number: one\n                                   range: {'start': 35, 'end': 46}\n                                   text: bacon deluxe\n                                   types: [\n                                   'deluxe'\n                                   ]\n                                   value: bacon_deluxe\n                                   word: deluxe\n    6. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 48, 'end': 50}\n                                   text: are\n                                   word: are\n    7. hamburger/0  - \"hamburgers\"\n                                   marker: Operator(hamburger/0, [\"Selector(Bridge('{ ...next(operator), value: 'hamburger' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'hamburger' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 52, 'end': 61}\n                                   text: hamburgers\n                                   value: hamburger\n                                   word: hamburgers\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({default: True, marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'bacon_deluxe', 'unknown', 'adjective', 'object', 'isEdee', 'hierarchyAble', 'property', 'notAble', 'concept', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 31, 'end': 33}, text: and, types: [], word: and})\n\n>>>>>>>>>>>>> Counter 7\n    0. unknown/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   unknown: True\n                                   value: single\n                                   word: single\n    1. unknown/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   unknown: True\n                                   value: double\n                                   word: double\n    2. unknown/1 (dead) - \"triple\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   unknown: True\n                                   value: triple\n                                   word: triple\n   *3. list/1  - \"baconater and bacon deluxe\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'bacon_deluxe', 'unknown', 'adjective', 'object', 'isEdee', 'hierarchyAble', 'property', 'notAble', 'concept', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 21, 'end': 46}\n                                   text: baconater and bacon deluxe\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 21, 'end': 29}\n                                     text: baconater\n                                     unknown: True\n                                     value: baconater\n                                     word: baconater\n\n                                     atomic: True\n                                     bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 35, 'end': 39}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                     dead: True\n                                     marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'bacon'\n                                     ]\n                                     number: one\n                                     range: {'start': 35, 'end': 46}\n                                     text: bacon deluxe\n                                     types: [\n                                     'deluxe'\n                                     ]\n                                     value: bacon_deluxe\n                                     word: deluxe\n                                   ]\n                                   word: and\n    4. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 48, 'end': 50}\n                                   text: are\n                                   word: are\n    5. hamburger/0  - \"hamburgers\"\n                                   marker: Operator(hamburger/0, [\"Selector(Bridge('{ ...next(operator), value: 'hamburger' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'hamburger' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 52, 'end': 61}\n                                   text: hamburgers\n                                   value: hamburger\n                                   word: hamburgers\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'bacon_deluxe', 'unknown', 'adjective', 'object', 'isEdee', 'hierarchyAble', 'property', 'notAble', 'concept', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 21, 'end': 46}, text: baconater and bacon deluxe, types: [], value: [Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 21, 'end': 29}, text: baconater, unknown: True, value: baconater, word: baconater}), Context({atomic: True, bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 35, 'end': 39}, text: bacon, types: ['bacon'], value: bacon, word: bacon}), dead: True, marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['bacon'], number: one, range: {'start': 35, 'end': 46}, text: bacon deluxe, types: ['deluxe'], value: bacon_deluxe, word: deluxe})], word: and})\n\n>>>>>>>>>>>>> Counter 8\n    0. unknown/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   unknown: True\n                                   value: single\n                                   word: single\n    1. unknown/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   unknown: True\n                                   value: double\n                                   word: double\n   *2. list/1  - \"triple baconater and bacon deluxe\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'bacon_deluxe', 'unknown', 'adjective', 'object', 'isEdee', 'hierarchyAble', 'property', 'notAble', 'concept', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 14, 'end': 46}\n                                   text: triple baconater and bacon deluxe\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 19}\n                                     text: triple\n                                     unknown: True\n                                     value: triple\n                                     word: triple\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 21, 'end': 29}\n                                     text: baconater\n                                     unknown: True\n                                     value: baconater\n                                     word: baconater\n\n                                     atomic: True\n                                     bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 35, 'end': 39}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                     dead: True\n                                     marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'bacon'\n                                     ]\n                                     number: one\n                                     range: {'start': 35, 'end': 46}\n                                     text: bacon deluxe\n                                     types: [\n                                     'deluxe'\n                                     ]\n                                     value: bacon_deluxe\n                                     word: deluxe\n                                   ]\n                                   word: and\n    3. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 48, 'end': 50}\n                                   text: are\n                                   word: are\n    4. hamburger/0  - \"hamburgers\"\n                                   marker: Operator(hamburger/0, [\"Selector(Bridge('{ ...next(operator), value: 'hamburger' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'hamburger' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 52, 'end': 61}\n                                   text: hamburgers\n                                   value: hamburger\n                                   word: hamburgers\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'bacon_deluxe', 'unknown', 'adjective', 'object', 'isEdee', 'hierarchyAble', 'property', 'notAble', 'concept', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 14, 'end': 46}, text: triple baconater and bacon deluxe, types: [], value: [Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 19}, text: triple, unknown: True, value: triple, word: triple}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 21, 'end': 29}, text: baconater, unknown: True, value: baconater, word: baconater}), Context({atomic: True, bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 35, 'end': 39}, text: bacon, types: ['bacon'], value: bacon, word: bacon}), dead: True, marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['bacon'], number: one, range: {'start': 35, 'end': 46}, text: bacon deluxe, types: ['deluxe'], value: bacon_deluxe, word: deluxe})], word: and})\n\n>>>>>>>>>>>>> Counter 9\n    0. unknown/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   unknown: True\n                                   value: single\n                                   word: single\n   *1. list/1  - \"double triple baconater and bacon deluxe\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'bacon_deluxe', 'unknown', 'adjective', 'object', 'isEdee', 'hierarchyAble', 'property', 'notAble', 'concept', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 7, 'end': 46}\n                                   text: double triple baconater and bacon deluxe\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 7, 'end': 12}\n                                     text: double\n                                     unknown: True\n                                     value: double\n                                     word: double\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 19}\n                                     text: triple\n                                     unknown: True\n                                     value: triple\n                                     word: triple\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 21, 'end': 29}\n                                     text: baconater\n                                     unknown: True\n                                     value: baconater\n                                     word: baconater\n\n                                     atomic: True\n                                     bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 35, 'end': 39}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                     dead: True\n                                     marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'bacon'\n                                     ]\n                                     number: one\n                                     range: {'start': 35, 'end': 46}\n                                     text: bacon deluxe\n                                     types: [\n                                     'deluxe'\n                                     ]\n                                     value: bacon_deluxe\n                                     word: deluxe\n                                   ]\n                                   word: and\n    2. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 48, 'end': 50}\n                                   text: are\n                                   word: are\n    3. hamburger/0  - \"hamburgers\"\n                                   marker: Operator(hamburger/0, [\"Selector(Bridge('{ ...next(operator), value: 'hamburger' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'hamburger' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 52, 'end': 61}\n                                   text: hamburgers\n                                   value: hamburger\n                                   word: hamburgers\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'bacon_deluxe', 'unknown', 'adjective', 'object', 'isEdee', 'hierarchyAble', 'property', 'notAble', 'concept', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 7, 'end': 46}, text: double triple baconater and bacon deluxe, types: [], value: [Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 12}, text: double, unknown: True, value: double, word: double}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 19}, text: triple, unknown: True, value: triple, word: triple}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 21, 'end': 29}, text: baconater, unknown: True, value: baconater, word: baconater}), Context({atomic: True, bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 35, 'end': 39}, text: bacon, types: ['bacon'], value: bacon, word: bacon}), dead: True, marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['bacon'], number: one, range: {'start': 35, 'end': 46}, text: bacon deluxe, types: ['deluxe'], value: bacon_deluxe, word: deluxe})], word: and})\n\n>>>>>>>>>>>>> Counter 10\n   *0. list/1  - \"single double triple baconater and bacon deluxe\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'bacon_deluxe', 'unknown', 'adjective', 'object', 'isEdee', 'hierarchyAble', 'property', 'notAble', 'concept', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 0, 'end': 46}\n                                   text: single double triple baconater and bacon deluxe\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 5}\n                                     text: single\n                                     unknown: True\n                                     value: single\n                                     word: single\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 7, 'end': 12}\n                                     text: double\n                                     unknown: True\n                                     value: double\n                                     word: double\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 19}\n                                     text: triple\n                                     unknown: True\n                                     value: triple\n                                     word: triple\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 21, 'end': 29}\n                                     text: baconater\n                                     unknown: True\n                                     value: baconater\n                                     word: baconater\n\n                                     atomic: True\n                                     bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 35, 'end': 39}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                     dead: True\n                                     marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'bacon'\n                                     ]\n                                     number: one\n                                     range: {'start': 35, 'end': 46}\n                                     text: bacon deluxe\n                                     types: [\n                                     'deluxe'\n                                     ]\n                                     value: bacon_deluxe\n                                     word: deluxe\n                                   ]\n                                   word: and\n    1. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 48, 'end': 50}\n                                   text: are\n                                   word: are\n    2. hamburger/0  - \"hamburgers\"\n                                   marker: Operator(hamburger/0, [\"Selector(Bridge('{ ...next(operator), value: 'hamburger' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'hamburger' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 52, 'end': 61}\n                                   text: hamburgers\n                                   value: hamburger\n                                   word: hamburgers\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(hamburger/0, [\"Selector(Bridge('{ ...next(operator), value: 'hamburger' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'hamburger' }')), variables({}) bridge(bridge)), number: many, range: {'start': 52, 'end': 61}, text: hamburgers, value: hamburger, word: hamburgers})\n\n>>>>>>>>>>>>> Counter 11\n    0. list/1  - \"single double triple baconater and bacon deluxe\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'bacon_deluxe', 'unknown', 'adjective', 'object', 'isEdee', 'hierarchyAble', 'property', 'notAble', 'concept', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 0, 'end': 46}\n                                   text: single double triple baconater and bacon deluxe\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 5}\n                                     text: single\n                                     unknown: True\n                                     value: single\n                                     word: single\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 7, 'end': 12}\n                                     text: double\n                                     unknown: True\n                                     value: double\n                                     word: double\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 19}\n                                     text: triple\n                                     unknown: True\n                                     value: triple\n                                     word: triple\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 21, 'end': 29}\n                                     text: baconater\n                                     unknown: True\n                                     value: baconater\n                                     word: baconater\n\n                                     atomic: True\n                                     bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 35, 'end': 39}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                     dead: True\n                                     marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'bacon'\n                                     ]\n                                     number: one\n                                     range: {'start': 35, 'end': 46}\n                                     text: bacon deluxe\n                                     types: [\n                                     'deluxe'\n                                     ]\n                                     value: bacon_deluxe\n                                     word: deluxe\n                                   ]\n                                   word: and\n    1. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 48, 'end': 50}\n                                   text: are\n                                   word: are\n   *2. hamburger/1 (dead) - \"hamburgers\"\n                                   dead: True\n                                   marker: Operator(hamburger/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 52, 'end': 61}\n                                   text: hamburgers\n                                   value: hamburger\n                                   word: hamburgers\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 48, 'end': 50}, text: are, word: are})\n\n>>>>>>>>>>>>> Counter 12\n   *0. is/1  - \"single double triple baconater and bacon deluxe are hamburgers\"\n                                   marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   one: Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'bacon_deluxe', 'unknown', 'adjective', 'object', 'isEdee', 'hierarchyAble', 'property', 'notAble', 'concept', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), number: many, range: {'start': 0, 'end': 61}, text: single double triple baconater and bacon deluxe, types: ['unknown'], value: [Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: single, unknown: True, value: single, word: single}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 12}, text: double, unknown: True, value: double, word: double}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 19}, text: triple, unknown: True, value: triple, word: triple}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 21, 'end': 29}, text: baconater, unknown: True, value: baconater, word: baconater}), Contex\n                                   range: {'start': 0, 'end': 61}\n                                   text: single double triple baconater and bacon deluxe are hamburgers\n                                   two: Context({dead: True, marker: Operator(hamburger/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 52, 'end': 61}, text: hamburgers, types: ['hamburger'], value: hamburger, word: hamburgers})\n                                   word: are\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'bacon_deluxe', 'unknown', 'adjective', 'object', 'isEdee', 'hierarchyAble', 'property', 'notAble', 'concept', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), number: many, range: {'start': 0, 'end': 61}, text: single double triple baconater and bacon deluxe, types: ['unknown'], value: [Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: single, unknown: True, value: single, word: single}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 12}, text: double, unknown: True, value: double, word: double}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 19}, text: triple, unknown: True, value: triple, word: triple}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 21, 'end': 29}, text: baconater, unknown: True, value: baconater, word: baconater}), Context({atomic: True, bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 35, 'end': 39}, text: bacon, types: ['bacon'], value: bacon, word: bacon}), dead: True, marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['bacon'], number: one, range: {'start': 35, 'end': 46}, text: bacon deluxe, types: ['deluxe'], value: bacon_deluxe, word: deluxe})], word: and}), range: {'start': 0, 'end': 61}, text: single double triple baconater and bacon deluxe are hamburgers, two: Context({dead: True, marker: Operator(hamburger/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 52, 'end': 61}, text: hamburgers, types: ['hamburger'], value: hamburger, word: hamburgers}), word: are})\n\n>>>>>>>>>>>>> Counter 13\n   *0. is/2 (dead) - \"single double triple baconater and bacon deluxe are hamburgers\"\n                                   dead: True\n                                   marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   one: Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'bacon_deluxe', 'unknown', 'adjective', 'object', 'isEdee', 'hierarchyAble', 'property', 'notAble', 'concept', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), number: many, range: {'start': 0, 'end': 61}, text: single double triple baconater and bacon deluxe, types: ['unknown'], value: [Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: single, unknown: True, value: single, word: single}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 12}, text: double, unknown: True, value: double, word: double}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 19}, text: triple, unknown: True, value: triple, word: triple}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 21, 'end': 29}, text: baconater, unknown: True, value: baconater, word: baconater}), Contex\n                                   range: {'start': 0, 'end': 61}\n                                   text: single double triple baconater and bacon deluxe are hamburgers\n                                   two: Context({dead: True, marker: Operator(hamburger/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 52, 'end': 61}, text: hamburgers, types: ['hamburger'], value: hamburger, word: hamburgers})\n                                   word: are\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "many",
          "text": "single double triple baconater and bacon deluxe are hamburgers",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 61
          },
          "one": {
            "number": "many",
            "marker": "list",
            "default": true,
            "word": "and",
            "text": "single double triple baconater and bacon deluxe",
            "range": {
              "start": 0,
              "end": 61
            },
            "types": [
              "list",
              "unknown"
            ],
            "listable": true,
            "isList": true,
            "value": [
              {
                "marker": "unknown",
                "range": {
                  "start": 0,
                  "end": 5
                },
                "word": "single",
                "text": "single",
                "value": "single",
                "unknown": true,
                "dead": true,
                "level": 1
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 7,
                  "end": 12
                },
                "word": "double",
                "text": "double",
                "value": "double",
                "unknown": true,
                "dead": true,
                "level": 1
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 14,
                  "end": 19
                },
                "word": "triple",
                "text": "triple",
                "value": "triple",
                "unknown": true,
                "dead": true,
                "level": 1
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 21,
                  "end": 29
                },
                "word": "baconater",
                "text": "baconater",
                "value": "baconater",
                "unknown": true,
                "dead": true,
                "level": 1
              },
              {
                "value": "bacon_deluxe",
                "number": "one",
                "text": "bacon deluxe",
                "marker": "bacon_deluxe",
                "word": "deluxe",
                "range": {
                  "start": 35,
                  "end": 46
                },
                "types": [
                  "bacon_deluxe",
                  "deluxe"
                ],
                "bacon": {
                  "value": "bacon",
                  "text": "bacon",
                  "marker": "bacon",
                  "word": "bacon",
                  "range": {
                    "start": 35,
                    "end": 39
                  },
                  "types": [
                    "bacon"
                  ],
                  "level": 0
                },
                "atomic": true,
                "dead": true,
                "modifiers": [
                  "bacon"
                ],
                "level": 1
              }
            ],
            "level": 1
          },
          "two": {
            "value": "hamburger",
            "number": "many",
            "text": "hamburgers",
            "marker": "hamburger",
            "word": "hamburgers",
            "range": {
              "start": 52,
              "end": 61
            },
            "dead": true,
            "types": [
              "hamburger"
            ],
            "level": 1,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "fastfood#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "single, double, triple, baconater and bacon deluxe are hamburgers"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "bacon",
            0
          ],
          [
            "deluxe",
            0
          ],
          [
            "hamburger",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "bacon",
            0
          ],
          [
            "deluxe",
            0
          ],
          [
            "hamburger",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "bacon",
            0
          ],
          [
            "deluxe",
            0
          ],
          [
            "hamburger",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "bacon",
            0
          ],
          [
            "deluxe",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "hamburger",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "hamburger",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            1
          ]
        ],
        [
          [
            "hamburger",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ]
        ]
      ],
      "query": "single double triple baconater and bacon deluxe are hamburgers",
      "key": {
        "query": "single double triple baconater and bacon deluxe are hamburgers"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "apple",
          "fruit"
        ],
        [
          "apple",
          "hierarchyAble"
        ],
        [
          "apple",
          "isEdee"
        ],
        [
          "apple",
          "isEder"
        ],
        [
          "apple",
          "object"
        ],
        [
          "apple",
          "property"
        ],
        [
          "apple",
          "queryable"
        ],
        [
          "apple",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "asiago",
          "hierarchyAble"
        ],
        [
          "asiago",
          "isEdee"
        ],
        [
          "asiago",
          "isEder"
        ],
        [
          "asiago",
          "object"
        ],
        [
          "asiago",
          "property"
        ],
        [
          "asiago",
          "queryable"
        ],
        [
          "asiago",
          "theAble"
        ],
        [
          "asiago_ranch_chicken_club",
          "adjective"
        ],
        [
          "asiago_ranch_chicken_club",
          "concept"
        ],
        [
          "asiago_ranch_chicken_club",
          "hierarchyAble"
        ],
        [
          "asiago_ranch_chicken_club",
          "isEdee"
        ],
        [
          "asiago_ranch_chicken_club",
          "isEder"
        ],
        [
          "asiago_ranch_chicken_club",
          "object"
        ],
        [
          "asiago_ranch_chicken_club",
          "property"
        ],
        [
          "asiago_ranch_chicken_club",
          "queryable"
        ],
        [
          "asiago_ranch_chicken_club",
          "theAble"
        ],
        [
          "bacon",
          "hierarchyAble"
        ],
        [
          "bacon",
          "isEdee"
        ],
        [
          "bacon",
          "isEder"
        ],
        [
          "bacon",
          "object"
        ],
        [
          "bacon",
          "property"
        ],
        [
          "bacon",
          "queryable"
        ],
        [
          "bacon",
          "theAble"
        ],
        [
          "bacon_deluxe",
          "adjective"
        ],
        [
          "bacon_deluxe",
          "concept"
        ],
        [
          "bacon_deluxe",
          "hamburger"
        ],
        [
          "bacon_deluxe",
          "hierarchyAble"
        ],
        [
          "bacon_deluxe",
          "isEdee"
        ],
        [
          "bacon_deluxe",
          "isEder"
        ],
        [
          "bacon_deluxe",
          "object"
        ],
        [
          "bacon_deluxe",
          "property"
        ],
        [
          "bacon_deluxe",
          "queryable"
        ],
        [
          "bacon_deluxe",
          "theAble"
        ],
        [
          "baconater",
          "hamburger"
        ],
        [
          "baconater",
          "hierarchyAble"
        ],
        [
          "baconater",
          "isEdee"
        ],
        [
          "baconater",
          "isEder"
        ],
        [
          "baconater",
          "object"
        ],
        [
          "baconater",
          "property"
        ],
        [
          "baconater",
          "queryable"
        ],
        [
          "baconater",
          "theAble"
        ],
        [
          "banana",
          "fruit"
        ],
        [
          "banana",
          "hierarchyAble"
        ],
        [
          "banana",
          "isEdee"
        ],
        [
          "banana",
          "isEder"
        ],
        [
          "banana",
          "object"
        ],
        [
          "banana",
          "property"
        ],
        [
          "banana",
          "queryable"
        ],
        [
          "banana",
          "theAble"
        ],
        [
          "between",
          "preposition"
        ],
        [
          "brocoli",
          "hierarchyAble"
        ],
        [
          "brocoli",
          "isEdee"
        ],
        [
          "brocoli",
          "isEder"
        ],
        [
          "brocoli",
          "object"
        ],
        [
          "brocoli",
          "property"
        ],
        [
          "brocoli",
          "queryable"
        ],
        [
          "brocoli",
          "theAble"
        ],
        [
          "brocoli",
          "vegetable"
        ],
        [
          "cabbage",
          "hierarchyAble"
        ],
        [
          "cabbage",
          "isEdee"
        ],
        [
          "cabbage",
          "isEder"
        ],
        [
          "cabbage",
          "object"
        ],
        [
          "cabbage",
          "property"
        ],
        [
          "cabbage",
          "queryable"
        ],
        [
          "cabbage",
          "theAble"
        ],
        [
          "cabbage",
          "vegetable"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "carrot",
          "hierarchyAble"
        ],
        [
          "carrot",
          "isEdee"
        ],
        [
          "carrot",
          "isEder"
        ],
        [
          "carrot",
          "object"
        ],
        [
          "carrot",
          "property"
        ],
        [
          "carrot",
          "queryable"
        ],
        [
          "carrot",
          "theAble"
        ],
        [
          "carrot",
          "vegetable"
        ],
        [
          "changes",
          "event"
        ],
        [
          "changes",
          "verby"
        ],
        [
          "chicken",
          "hierarchyAble"
        ],
        [
          "chicken",
          "isEdee"
        ],
        [
          "chicken",
          "isEder"
        ],
        [
          "chicken",
          "object"
        ],
        [
          "chicken",
          "property"
        ],
        [
          "chicken",
          "queryable"
        ],
        [
          "chicken",
          "theAble"
        ],
        [
          "chicken_sandwich",
          "adjective"
        ],
        [
          "chicken_sandwich",
          "concept"
        ],
        [
          "chicken_sandwich",
          "hierarchyAble"
        ],
        [
          "chicken_sandwich",
          "isEdee"
        ],
        [
          "chicken_sandwich",
          "isEder"
        ],
        [
          "chicken_sandwich",
          "object"
        ],
        [
          "chicken_sandwich",
          "property"
        ],
        [
          "chicken_sandwich",
          "queryable"
        ],
        [
          "chicken_sandwich",
          "theAble"
        ],
        [
          "chicken_strip",
          "adjective"
        ],
        [
          "chicken_strip",
          "concept"
        ],
        [
          "chicken_strip",
          "food"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "isEdee"
        ],
        [
          "chicken_strip",
          "isEder"
        ],
        [
          "chicken_strip",
          "object"
        ],
        [
          "chicken_strip",
          "property"
        ],
        [
          "chicken_strip",
          "queryable"
        ],
        [
          "chicken_strip",
          "theAble"
        ],
        [
          "club",
          "concept"
        ],
        [
          "club",
          "hierarchyAble"
        ],
        [
          "club",
          "isEdee"
        ],
        [
          "club",
          "isEder"
        ],
        [
          "club",
          "object"
        ],
        [
          "club",
          "property"
        ],
        [
          "club",
          "queryable"
        ],
        [
          "club",
          "theAble"
        ],
        [
          "cod",
          "concept"
        ],
        [
          "cod",
          "hierarchyAble"
        ],
        [
          "cod",
          "isEdee"
        ],
        [
          "cod",
          "isEder"
        ],
        [
          "cod",
          "object"
        ],
        [
          "cod",
          "property"
        ],
        [
          "cod",
          "queryable"
        ],
        [
          "cod",
          "theAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "countable",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "concept"
        ],
        [
          "deluxe",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "isEdee"
        ],
        [
          "deluxe",
          "isEder"
        ],
        [
          "deluxe",
          "object"
        ],
        [
          "deluxe",
          "property"
        ],
        [
          "deluxe",
          "queryable"
        ],
        [
          "deluxe",
          "theAble"
        ],
        [
          "dog",
          "concept"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "dog",
          "isEdee"
        ],
        [
          "dog",
          "isEder"
        ],
        [
          "dog",
          "object"
        ],
        [
          "dog",
          "property"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "double",
          "hamburger"
        ],
        [
          "double",
          "hierarchyAble"
        ],
        [
          "double",
          "isEdee"
        ],
        [
          "double",
          "isEder"
        ],
        [
          "double",
          "object"
        ],
        [
          "double",
          "property"
        ],
        [
          "double",
          "queryable"
        ],
        [
          "double",
          "theAble"
        ],
        [
          "event",
          "event"
        ],
        [
          "food",
          "countable"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "french",
          "hierarchyAble"
        ],
        [
          "french",
          "isEdee"
        ],
        [
          "french",
          "isEder"
        ],
        [
          "french",
          "object"
        ],
        [
          "french",
          "property"
        ],
        [
          "french",
          "queryable"
        ],
        [
          "french",
          "theAble"
        ],
        [
          "french_fry",
          "adjective"
        ],
        [
          "french_fry",
          "concept"
        ],
        [
          "french_fry",
          "food"
        ],
        [
          "french_fry",
          "hierarchyAble"
        ],
        [
          "french_fry",
          "isEdee"
        ],
        [
          "french_fry",
          "isEder"
        ],
        [
          "french_fry",
          "object"
        ],
        [
          "french_fry",
          "property"
        ],
        [
          "french_fry",
          "queryable"
        ],
        [
          "french_fry",
          "theAble"
        ],
        [
          "fruit",
          "food"
        ],
        [
          "fruit",
          "hierarchyAble"
        ],
        [
          "fruit",
          "isEdee"
        ],
        [
          "fruit",
          "isEder"
        ],
        [
          "fruit",
          "object"
        ],
        [
          "fruit",
          "property"
        ],
        [
          "fruit",
          "queryable"
        ],
        [
          "fruit",
          "theAble"
        ],
        [
          "fry",
          "concept"
        ],
        [
          "fry",
          "hierarchyAble"
        ],
        [
          "fry",
          "isEdee"
        ],
        [
          "fry",
          "isEder"
        ],
        [
          "fry",
          "object"
        ],
        [
          "fry",
          "property"
        ],
        [
          "fry",
          "queryable"
        ],
        [
          "fry",
          "theAble"
        ],
        [
          "grill",
          "concept"
        ],
        [
          "grill",
          "hierarchyAble"
        ],
        [
          "grill",
          "isEdee"
        ],
        [
          "grill",
          "isEder"
        ],
        [
          "grill",
          "object"
        ],
        [
          "grill",
          "property"
        ],
        [
          "grill",
          "queryable"
        ],
        [
          "grill",
          "theAble"
        ],
        [
          "hamburger",
          "hierarchyAble"
        ],
        [
          "hamburger",
          "isEdee"
        ],
        [
          "hamburger",
          "isEder"
        ],
        [
          "hamburger",
          "object"
        ],
        [
          "hamburger",
          "property"
        ],
        [
          "hamburger",
          "queryable"
        ],
        [
          "hamburger",
          "sandwich"
        ],
        [
          "hamburger",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "hot",
          "hierarchyAble"
        ],
        [
          "hot",
          "isEdee"
        ],
        [
          "hot",
          "isEder"
        ],
        [
          "hot",
          "object"
        ],
        [
          "hot",
          "property"
        ],
        [
          "hot",
          "queryable"
        ],
        [
          "hot",
          "theAble"
        ],
        [
          "hot_dog",
          "adjective"
        ],
        [
          "hot_dog",
          "concept"
        ],
        [
          "hot_dog",
          "hierarchyAble"
        ],
        [
          "hot_dog",
          "isEdee"
        ],
        [
          "hot_dog",
          "isEder"
        ],
        [
          "hot_dog",
          "object"
        ],
        [
          "hot_dog",
          "property"
        ],
        [
          "hot_dog",
          "queryable"
        ],
        [
          "hot_dog",
          "sausage"
        ],
        [
          "hot_dog",
          "theAble"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "meat",
          "food"
        ],
        [
          "meat",
          "hierarchyAble"
        ],
        [
          "meat",
          "isEdee"
        ],
        [
          "meat",
          "isEder"
        ],
        [
          "meat",
          "object"
        ],
        [
          "meat",
          "property"
        ],
        [
          "meat",
          "queryable"
        ],
        [
          "meat",
          "theAble"
        ],
        [
          "modifies",
          "verby"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "noun",
          "theAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "orange",
          "fruit"
        ],
        [
          "orange",
          "hierarchyAble"
        ],
        [
          "orange",
          "isEdee"
        ],
        [
          "orange",
          "isEder"
        ],
        [
          "orange",
          "object"
        ],
        [
          "orange",
          "property"
        ],
        [
          "orange",
          "queryable"
        ],
        [
          "orange",
          "theAble"
        ],
        [
          "orderNoun",
          "noun"
        ],
        [
          "orderNoun",
          "queryable"
        ],
        [
          "pea",
          "hierarchyAble"
        ],
        [
          "pea",
          "isEdee"
        ],
        [
          "pea",
          "isEder"
        ],
        [
          "pea",
          "object"
        ],
        [
          "pea",
          "property"
        ],
        [
          "pea",
          "queryable"
        ],
        [
          "pea",
          "theAble"
        ],
        [
          "pea",
          "vegetable"
        ],
        [
          "premium",
          "hierarchyAble"
        ],
        [
          "premium",
          "isEdee"
        ],
        [
          "premium",
          "isEder"
        ],
        [
          "premium",
          "object"
        ],
        [
          "premium",
          "property"
        ],
        [
          "premium",
          "queryable"
        ],
        [
          "premium",
          "theAble"
        ],
        [
          "premium_cod",
          "adjective"
        ],
        [
          "premium_cod",
          "concept"
        ],
        [
          "premium_cod",
          "hierarchyAble"
        ],
        [
          "premium_cod",
          "isEdee"
        ],
        [
          "premium_cod",
          "isEder"
        ],
        [
          "premium_cod",
          "object"
        ],
        [
          "premium_cod",
          "property"
        ],
        [
          "premium_cod",
          "queryable"
        ],
        [
          "premium_cod",
          "theAble"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "ranch",
          "hierarchyAble"
        ],
        [
          "ranch",
          "isEdee"
        ],
        [
          "ranch",
          "isEder"
        ],
        [
          "ranch",
          "object"
        ],
        [
          "ranch",
          "property"
        ],
        [
          "ranch",
          "queryable"
        ],
        [
          "ranch",
          "theAble"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "sandwich",
          "concept"
        ],
        [
          "sandwich",
          "food"
        ],
        [
          "sandwich",
          "hierarchyAble"
        ],
        [
          "sandwich",
          "isEdee"
        ],
        [
          "sandwich",
          "isEder"
        ],
        [
          "sandwich",
          "object"
        ],
        [
          "sandwich",
          "property"
        ],
        [
          "sandwich",
          "queryable"
        ],
        [
          "sandwich",
          "theAble"
        ],
        [
          "sausage",
          "hierarchyAble"
        ],
        [
          "sausage",
          "isEdee"
        ],
        [
          "sausage",
          "isEder"
        ],
        [
          "sausage",
          "meat"
        ],
        [
          "sausage",
          "object"
        ],
        [
          "sausage",
          "property"
        ],
        [
          "sausage",
          "queryable"
        ],
        [
          "sausage",
          "theAble"
        ],
        [
          "showOrder",
          "verby"
        ],
        [
          "single",
          "hamburger"
        ],
        [
          "single",
          "hierarchyAble"
        ],
        [
          "single",
          "isEdee"
        ],
        [
          "single",
          "isEder"
        ],
        [
          "single",
          "object"
        ],
        [
          "single",
          "property"
        ],
        [
          "single",
          "queryable"
        ],
        [
          "single",
          "theAble"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "strip",
          "isEdee"
        ],
        [
          "strip",
          "isEder"
        ],
        [
          "strip",
          "object"
        ],
        [
          "strip",
          "property"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "sushi",
          "food"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "sushi",
          "isEdee"
        ],
        [
          "sushi",
          "isEder"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "sushi",
          "property"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "triple",
          "hamburger"
        ],
        [
          "triple",
          "hierarchyAble"
        ],
        [
          "triple",
          "isEdee"
        ],
        [
          "triple",
          "isEder"
        ],
        [
          "triple",
          "object"
        ],
        [
          "triple",
          "property"
        ],
        [
          "triple",
          "queryable"
        ],
        [
          "triple",
          "theAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "ultimate",
          "hierarchyAble"
        ],
        [
          "ultimate",
          "isEdee"
        ],
        [
          "ultimate",
          "isEder"
        ],
        [
          "ultimate",
          "object"
        ],
        [
          "ultimate",
          "property"
        ],
        [
          "ultimate",
          "queryable"
        ],
        [
          "ultimate",
          "theAble"
        ],
        [
          "ultimate_chicken_grill",
          "adjective"
        ],
        [
          "ultimate_chicken_grill",
          "concept"
        ],
        [
          "ultimate_chicken_grill",
          "hierarchyAble"
        ],
        [
          "ultimate_chicken_grill",
          "isEdee"
        ],
        [
          "ultimate_chicken_grill",
          "isEder"
        ],
        [
          "ultimate_chicken_grill",
          "object"
        ],
        [
          "ultimate_chicken_grill",
          "property"
        ],
        [
          "ultimate_chicken_grill",
          "queryable"
        ],
        [
          "ultimate_chicken_grill",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "vegetable",
          "food"
        ],
        [
          "vegetable",
          "hierarchyAble"
        ],
        [
          "vegetable",
          "isEdee"
        ],
        [
          "vegetable",
          "isEder"
        ],
        [
          "vegetable",
          "object"
        ],
        [
          "vegetable",
          "property"
        ],
        [
          "vegetable",
          "queryable"
        ],
        [
          "vegetable",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "asiago",
                0
              ],
              [
                "ranch",
                0
              ],
              [
                "chicken",
                0
              ],
              [
                "club",
                0
              ],
              [
                "number",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "ultimate",
                0
              ],
              [
                "chicken",
                0
              ],
              [
                "grill",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "sandwich",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "ultimate_chicken_grill",
                0
              ],
              [
                "counting",
                0
              ],
              [
                "asiago_ranch_chicken_club",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "unknown",
                0
              ],
              [
                "asiago",
                0
              ],
              [
                "ranch",
                0
              ],
              [
                "chicken",
                0
              ],
              [
                "club",
                0
              ],
              [
                "number",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "ultimate",
                0
              ],
              [
                "chicken",
                0
              ],
              [
                "grill",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "sandwich",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "ultimate_chicken_grill",
                0
              ],
              [
                "counting",
                0
              ],
              [
                "asiago_ranch_chicken_club",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "asiago",
                0
              ],
              [
                "ranch",
                0
              ],
              [
                "chicken",
                0
              ],
              [
                "club",
                0
              ],
              [
                "number",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "ultimate",
                0
              ],
              [
                "chicken",
                0
              ],
              [
                "grill",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "sandwich",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "ultimate_chicken_grill",
                0
              ],
              [
                "counting",
                0
              ],
              [
                "asiago_ranch_chicken_club",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "asiago",
                0
              ],
              [
                "ranch",
                0
              ],
              [
                "chicken",
                0
              ],
              [
                "club",
                0
              ],
              [
                "number",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "ultimate",
                0
              ],
              [
                "chicken",
                0
              ],
              [
                "grill",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "sandwich",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "ultimate_chicken_grill",
                0
              ],
              [
                "counting",
                0
              ],
              [
                "asiago_ranch_chicken_club",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "asiago_ranch_chicken_club",
              0
            ],
            "ops": [
              [
                "asiago",
                0
              ],
              [
                "ranch",
                0
              ],
              [
                "chicken",
                0
              ],
              [
                "asiago_ranch_chicken_club",
                0
              ],
              [
                "club",
                0
              ],
              [
                "number",
                0
              ],
              [
                "counting",
                0
              ],
              [
                "ultimate",
                0
              ],
              [
                "grill",
                0
              ],
              [
                "ultimate_chicken_grill",
                0
              ],
              [
                "list",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "sandwich",
                0
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "number",
              0
            ],
            "ops": [
              [
                "number",
                0
              ],
              [
                "ultimate",
                0
              ],
              [
                "chicken",
                0
              ],
              [
                "grill",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "sandwich",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "ultimate_chicken_grill",
                0
              ],
              [
                "counting",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 6
          },
          {
            "op": [
              "counting",
              0
            ],
            "ops": [
              [
                "counting",
                0
              ],
              [
                "ultimate",
                0
              ],
              [
                "chicken",
                0
              ],
              [
                "grill",
                0
              ],
              [
                "ultimate_chicken_grill",
                0
              ],
              [
                "list",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "sandwich",
                0
              ]
            ],
            "counter": 7
          },
          {
            "op": [
              "ultimate_chicken_grill",
              0
            ],
            "ops": [
              [
                "ultimate",
                0
              ],
              [
                "chicken",
                0
              ],
              [
                "grill",
                0
              ],
              [
                "ultimate_chicken_grill",
                0
              ],
              [
                "list",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "sandwich",
                0
              ]
            ],
            "counter": 8
          },
          {
            "op": [
              "premium_cod",
              0
            ],
            "ops": [
              [
                "list",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "sandwich",
                0
              ]
            ],
            "counter": 9
          },
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "sandwich",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 10
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "sandwich",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 11
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "sandwich",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 12
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "sandwich",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 13
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "sandwich",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 14
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "sandwich",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 15
          },
          {
            "op": [
              "sandwich",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "sandwich",
                0
              ]
            ],
            "counter": 16
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 17
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 18
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"spicy\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: spicy\n                                   value: spicy\n                                   word: spicy\n    1. unknown/0  - \"homestyle\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 14}\n                                   text: homestyle\n                                   value: homestyle\n                                   word: homestyle\n    2. asiago/0  - \"asiago\"\n                                   marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge))\n                                   range: {'start': 16, 'end': 21}\n                                   text: asiago\n                                   value: asiago\n                                   word: asiago\n    3. ranch/0  - \"ranch\"\n                                   marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge))\n                                   range: {'start': 23, 'end': 27}\n                                   text: ranch\n                                   value: ranch\n                                   word: ranch\n    4. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 29, 'end': 35}\n                                   text: chicken\n                                   value: chicken\n                                   word: chicken\n    5. club/0  - \"club\"\n                                   marker: Operator(club/0, [\"Selector(Bridge('{ ...next(operator), value: 'club' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'club' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 37, 'end': 40}\n                                   text: club\n                                   value: club\n                                   word: club\n    6. number/0  - \"10\"\n                                   instance: True\n                                   marker: Operator(number/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 42, 'end': 43}\n                                   text: 10\n                                   value: 10\n                                   word: 10\n    7. unknown/0  - \"piece\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 45, 'end': 49}\n                                   text: piece\n                                   value: piece\n                                   word: piece\n    8. unknown/0  - \"nuggets\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 51, 'end': 57}\n                                   text: nuggets\n                                   value: nuggets\n                                   word: nuggets\n    9. ultimate/0  - \"ultimate\"\n                                   marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge))\n                                   range: {'start': 59, 'end': 66}\n                                   text: ultimate\n                                   value: ultimate\n                                   word: ultimate\n    10. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 68, 'end': 74}\n                                   text: chicken\n                                   value: chicken\n                                   word: chicken\n    11. grill/0  - \"grill\"\n                                   marker: Operator(grill/0, [\"Selector(Bridge('{ ...next(operator), value: 'grill' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'grill' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 76, 'end': 80}\n                                   text: grill\n                                   value: grill\n                                   word: grill\n    12. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({}) bridge(bridge))\n                                   range: {'start': 82, 'end': 84}\n                                   text: and\n                                   word: and\n    13. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 86, 'end': 92}\n                                   text: premium\n                                   value: premium\n                                   word: premium\n    14. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 94, 'end': 96}\n                                   text: cod\n                                   value: cod\n                                   word: cod\n    15. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n    16. sandwich/0  - \"sandwiches\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: spicy, value: spicy, word: spicy})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: spicy\n                                   unknown: True\n                                   value: spicy\n                                   word: spicy\n    1. unknown/0  - \"homestyle\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 14}\n                                   text: homestyle\n                                   value: homestyle\n                                   word: homestyle\n    2. asiago/0  - \"asiago\"\n                                   marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge))\n                                   range: {'start': 16, 'end': 21}\n                                   text: asiago\n                                   types: [\n                                   'asiago'\n                                   ]\n                                   value: asiago\n                                   word: asiago\n    3. ranch/0  - \"ranch\"\n                                   marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge))\n                                   range: {'start': 23, 'end': 27}\n                                   text: ranch\n                                   types: [\n                                   'ranch'\n                                   ]\n                                   value: ranch\n                                   word: ranch\n    4. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 29, 'end': 35}\n                                   text: chicken\n                                   types: [\n                                   'chicken'\n                                   ]\n                                   value: chicken\n                                   word: chicken\n    5. club/0  - \"club\"\n                                   marker: Operator(club/0, [\"Selector(Bridge('{ ...next(operator), value: 'club' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'club' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 37, 'end': 40}\n                                   text: club\n                                   types: [\n                                   'club'\n                                   ]\n                                   value: club\n                                   word: club\n    6. number/0  - \"10\"\n                                   instance: True\n                                   marker: Operator(number/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 42, 'end': 43}\n                                   text: 10\n                                   types: [\n                                   'number'\n                                   ]\n                                   value: 10\n                                   word: 10\n    7. unknown/0  - \"piece\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 45, 'end': 49}\n                                   text: piece\n                                   types: [\n                                   'countable'\n                                   ]\n                                   value: piece\n                                   word: piece\n    8. unknown/0  - \"nuggets\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 51, 'end': 57}\n                                   text: nuggets\n                                   value: nuggets\n                                   word: nuggets\n    9. ultimate/0  - \"ultimate\"\n                                   marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge))\n                                   range: {'start': 59, 'end': 66}\n                                   text: ultimate\n                                   types: [\n                                   'ultimate'\n                                   ]\n                                   value: ultimate\n                                   word: ultimate\n    10. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 68, 'end': 74}\n                                   text: chicken\n                                   types: [\n                                   'chicken'\n                                   ]\n                                   value: chicken\n                                   word: chicken\n    11. grill/0  - \"grill\"\n                                   marker: Operator(grill/0, [\"Selector(Bridge('{ ...next(operator), value: 'grill' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'grill' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 76, 'end': 80}\n                                   text: grill\n                                   types: [\n                                   'grill'\n                                   ]\n                                   value: grill\n                                   word: grill\n    12. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 82, 'end': 84}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n    13. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 86, 'end': 92}\n                                   text: premium\n                                   types: [\n                                   'premium'\n                                   ]\n                                   value: premium\n                                   word: premium\n    14. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 94, 'end': 96}\n                                   text: cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: cod\n                                   word: cod\n    15. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n    16. sandwich/0  - \"sandwiches\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 14}, text: homestyle, value: homestyle, word: homestyle})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: spicy\n                                   unknown: True\n                                   value: spicy\n                                   word: spicy\n   *1. unknown/1 (dead) - \"homestyle\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 14}\n                                   text: homestyle\n                                   unknown: True\n                                   value: homestyle\n                                   word: homestyle\n    2. asiago/0  - \"asiago\"\n                                   marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge))\n                                   range: {'start': 16, 'end': 21}\n                                   text: asiago\n                                   types: [\n                                   'asiago'\n                                   ]\n                                   value: asiago\n                                   word: asiago\n    3. ranch/0  - \"ranch\"\n                                   marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge))\n                                   range: {'start': 23, 'end': 27}\n                                   text: ranch\n                                   types: [\n                                   'ranch'\n                                   ]\n                                   value: ranch\n                                   word: ranch\n    4. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 29, 'end': 35}\n                                   text: chicken\n                                   types: [\n                                   'chicken'\n                                   ]\n                                   value: chicken\n                                   word: chicken\n    5. club/0  - \"club\"\n                                   marker: Operator(club/0, [\"Selector(Bridge('{ ...next(operator), value: 'club' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'club' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 37, 'end': 40}\n                                   text: club\n                                   types: [\n                                   'club'\n                                   ]\n                                   value: club\n                                   word: club\n    6. number/0  - \"10\"\n                                   instance: True\n                                   marker: Operator(number/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 42, 'end': 43}\n                                   text: 10\n                                   types: [\n                                   'number'\n                                   ]\n                                   value: 10\n                                   word: 10\n    7. unknown/0  - \"piece\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 45, 'end': 49}\n                                   text: piece\n                                   types: [\n                                   'countable'\n                                   ]\n                                   value: piece\n                                   word: piece\n    8. unknown/0  - \"nuggets\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 51, 'end': 57}\n                                   text: nuggets\n                                   value: nuggets\n                                   word: nuggets\n    9. ultimate/0  - \"ultimate\"\n                                   marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge))\n                                   range: {'start': 59, 'end': 66}\n                                   text: ultimate\n                                   types: [\n                                   'ultimate'\n                                   ]\n                                   value: ultimate\n                                   word: ultimate\n    10. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 68, 'end': 74}\n                                   text: chicken\n                                   types: [\n                                   'chicken'\n                                   ]\n                                   value: chicken\n                                   word: chicken\n    11. grill/0  - \"grill\"\n                                   marker: Operator(grill/0, [\"Selector(Bridge('{ ...next(operator), value: 'grill' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'grill' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 76, 'end': 80}\n                                   text: grill\n                                   types: [\n                                   'grill'\n                                   ]\n                                   value: grill\n                                   word: grill\n    12. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 82, 'end': 84}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n    13. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 86, 'end': 92}\n                                   text: premium\n                                   types: [\n                                   'premium'\n                                   ]\n                                   value: premium\n                                   word: premium\n    14. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 94, 'end': 96}\n                                   text: cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: cod\n                                   word: cod\n    15. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n    16. sandwich/0  - \"sandwiches\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=7) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 45, 'end': 49}, text: piece, types: ['countable'], value: piece, word: piece})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: spicy\n                                   unknown: True\n                                   value: spicy\n                                   word: spicy\n    1. unknown/1 (dead) - \"homestyle\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 14}\n                                   text: homestyle\n                                   unknown: True\n                                   value: homestyle\n                                   word: homestyle\n    2. asiago/0  - \"asiago\"\n                                   marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge))\n                                   range: {'start': 16, 'end': 21}\n                                   text: asiago\n                                   types: [\n                                   'asiago'\n                                   ]\n                                   value: asiago\n                                   word: asiago\n    3. ranch/0  - \"ranch\"\n                                   marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge))\n                                   range: {'start': 23, 'end': 27}\n                                   text: ranch\n                                   types: [\n                                   'ranch'\n                                   ]\n                                   value: ranch\n                                   word: ranch\n    4. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 29, 'end': 35}\n                                   text: chicken\n                                   types: [\n                                   'chicken'\n                                   ]\n                                   value: chicken\n                                   word: chicken\n    5. club/0  - \"club\"\n                                   marker: Operator(club/0, [\"Selector(Bridge('{ ...next(operator), value: 'club' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'club' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 37, 'end': 40}\n                                   text: club\n                                   types: [\n                                   'club'\n                                   ]\n                                   value: club\n                                   word: club\n    6. number/0  - \"10\"\n                                   instance: True\n                                   marker: Operator(number/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 42, 'end': 43}\n                                   text: 10\n                                   types: [\n                                   'number'\n                                   ]\n                                   value: 10\n                                   word: 10\n   *7. unknown/1 (dead) - \"piece\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 45, 'end': 49}\n                                   text: piece\n                                   types: [\n                                   'countable'\n                                   ]\n                                   unknown: True\n                                   value: piece\n                                   word: piece\n    8. unknown/0  - \"nuggets\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 51, 'end': 57}\n                                   text: nuggets\n                                   value: nuggets\n                                   word: nuggets\n    9. ultimate/0  - \"ultimate\"\n                                   marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge))\n                                   range: {'start': 59, 'end': 66}\n                                   text: ultimate\n                                   types: [\n                                   'ultimate'\n                                   ]\n                                   value: ultimate\n                                   word: ultimate\n    10. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 68, 'end': 74}\n                                   text: chicken\n                                   types: [\n                                   'chicken'\n                                   ]\n                                   value: chicken\n                                   word: chicken\n    11. grill/0  - \"grill\"\n                                   marker: Operator(grill/0, [\"Selector(Bridge('{ ...next(operator), value: 'grill' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'grill' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 76, 'end': 80}\n                                   text: grill\n                                   types: [\n                                   'grill'\n                                   ]\n                                   value: grill\n                                   word: grill\n    12. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 82, 'end': 84}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n    13. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 86, 'end': 92}\n                                   text: premium\n                                   types: [\n                                   'premium'\n                                   ]\n                                   value: premium\n                                   word: premium\n    14. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 94, 'end': 96}\n                                   text: cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: cod\n                                   word: cod\n    15. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n    16. sandwich/0  - \"sandwiches\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=8) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 51, 'end': 57}, text: nuggets, value: nuggets, word: nuggets})\n\n>>>>>>>>>>>>> Counter 5\n    0. unknown/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: spicy\n                                   unknown: True\n                                   value: spicy\n                                   word: spicy\n    1. unknown/1 (dead) - \"homestyle\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 14}\n                                   text: homestyle\n                                   unknown: True\n                                   value: homestyle\n                                   word: homestyle\n    2. asiago/0  - \"asiago\"\n                                   marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge))\n                                   range: {'start': 16, 'end': 21}\n                                   text: asiago\n                                   types: [\n                                   'asiago'\n                                   ]\n                                   value: asiago\n                                   word: asiago\n    3. ranch/0  - \"ranch\"\n                                   marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge))\n                                   range: {'start': 23, 'end': 27}\n                                   text: ranch\n                                   types: [\n                                   'ranch'\n                                   ]\n                                   value: ranch\n                                   word: ranch\n    4. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 29, 'end': 35}\n                                   text: chicken\n                                   types: [\n                                   'chicken'\n                                   ]\n                                   value: chicken\n                                   word: chicken\n    5. club/0  - \"club\"\n                                   marker: Operator(club/0, [\"Selector(Bridge('{ ...next(operator), value: 'club' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'club' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 37, 'end': 40}\n                                   text: club\n                                   types: [\n                                   'club'\n                                   ]\n                                   value: club\n                                   word: club\n    6. number/0  - \"10\"\n                                   instance: True\n                                   marker: Operator(number/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 42, 'end': 43}\n                                   text: 10\n                                   types: [\n                                   'number'\n                                   ]\n                                   value: 10\n                                   word: 10\n    7. unknown/1 (dead) - \"piece\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 45, 'end': 49}\n                                   text: piece\n                                   types: [\n                                   'countable'\n                                   ]\n                                   unknown: True\n                                   value: piece\n                                   word: piece\n   *8. unknown/1 (dead) - \"nuggets\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 51, 'end': 57}\n                                   text: nuggets\n                                   unknown: True\n                                   value: nuggets\n                                   word: nuggets\n    9. ultimate/0  - \"ultimate\"\n                                   marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge))\n                                   range: {'start': 59, 'end': 66}\n                                   text: ultimate\n                                   types: [\n                                   'ultimate'\n                                   ]\n                                   value: ultimate\n                                   word: ultimate\n    10. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 68, 'end': 74}\n                                   text: chicken\n                                   types: [\n                                   'chicken'\n                                   ]\n                                   value: chicken\n                                   word: chicken\n    11. grill/0  - \"grill\"\n                                   marker: Operator(grill/0, [\"Selector(Bridge('{ ...next(operator), value: 'grill' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'grill' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 76, 'end': 80}\n                                   text: grill\n                                   types: [\n                                   'grill'\n                                   ]\n                                   value: grill\n                                   word: grill\n    12. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 82, 'end': 84}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n    13. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 86, 'end': 92}\n                                   text: premium\n                                   types: [\n                                   'premium'\n                                   ]\n                                   value: premium\n                                   word: premium\n    14. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 94, 'end': 96}\n                                   text: cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: cod\n                                   word: cod\n    15. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n    16. sandwich/0  - \"sandwiches\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=5) is Context({convolution: True, marker: Operator(asiago_ranch_chicken_club/0, [\"Selector(Bridge('{ ...after[0], 'asiago': before[0], 'ranch': before[1], 'chicken': before[2], atomic: true, dead: true, marker: next(operator('asiago_ranch_chicken_club')), value: 'asiago_ranch_chicken_club', modifiers: append(['asiago', 'ranch', 'chicken'], after[0].modifiers)}'), , [Listable(Ref('asiago', (0,))), Listable(Ref('ranch', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('club', (0,)))], bridge(bridge))\"], evaluator(Bridge('{ ...after[0], 'asiago': before[0], 'ranch': before[1], 'chicken': before[2], atomic: true, dead: true, marker: next(operator('asiago_ranch_chicken_club')), value: 'asiago_ranch_chicken_club', modifiers: append(['asiago', 'ranch', 'chicken'], after[0].modifiers)}')), variables({}), convolution bridge(bridge)), range: {'start': 16, 'end': 40}})\n\n>>>>>>>>>>>>> Counter 6\n    0. unknown/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: spicy\n                                   unknown: True\n                                   value: spicy\n                                   word: spicy\n    1. unknown/1 (dead) - \"homestyle\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 14}\n                                   text: homestyle\n                                   unknown: True\n                                   value: homestyle\n                                   word: homestyle\n   *2. asiago_ranch_chicken_club/1 (dead) - \"asiago ranch chicken club\"\n                                   asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago})\n                                   atomic: True\n                                   chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 35}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                   dead: True\n                                   marker: Operator(asiago_ranch_chicken_club/1, [\"Selector(None, , [Listable(Ref('asiago', (0,))), Listable(Ref('ranch', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('club', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'asiago'\n,                                    'ranch'\n,                                    'chicken'\n                                   ]\n                                   number: one\n                                   ranch: Context({marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 27}, text: ranch, types: ['ranch'], value: ranch, word: ranch})\n                                   range: {'start': 16, 'end': 40}\n                                   text: asiago ranch chicken club\n                                   types: [\n                                   'club'\n                                   ]\n                                   value: asiago_ranch_chicken_club\n                                   word: club\n    3. number/0  - \"10\"\n                                   instance: True\n                                   marker: Operator(number/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 42, 'end': 43}\n                                   text: 10\n                                   types: [\n                                   'number'\n                                   ]\n                                   value: 10\n                                   word: 10\n    4. unknown/1 (dead) - \"piece\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 45, 'end': 49}\n                                   text: piece\n                                   types: [\n                                   'countable'\n                                   ]\n                                   unknown: True\n                                   value: piece\n                                   word: piece\n    5. unknown/1 (dead) - \"nuggets\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 51, 'end': 57}\n                                   text: nuggets\n                                   unknown: True\n                                   value: nuggets\n                                   word: nuggets\n    6. ultimate/0  - \"ultimate\"\n                                   marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge))\n                                   range: {'start': 59, 'end': 66}\n                                   text: ultimate\n                                   types: [\n                                   'ultimate'\n                                   ]\n                                   value: ultimate\n                                   word: ultimate\n    7. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 68, 'end': 74}\n                                   text: chicken\n                                   types: [\n                                   'chicken'\n                                   ]\n                                   value: chicken\n                                   word: chicken\n    8. grill/0  - \"grill\"\n                                   marker: Operator(grill/0, [\"Selector(Bridge('{ ...next(operator), value: 'grill' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'grill' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 76, 'end': 80}\n                                   text: grill\n                                   types: [\n                                   'grill'\n                                   ]\n                                   value: grill\n                                   word: grill\n    9. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 82, 'end': 84}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n    10. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 86, 'end': 92}\n                                   text: premium\n                                   types: [\n                                   'premium'\n                                   ]\n                                   value: premium\n                                   word: premium\n    11. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 94, 'end': 96}\n                                   text: cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: cod\n                                   word: cod\n    12. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n    13. sandwich/0  - \"sandwiches\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({instance: True, marker: Operator(number/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 42, 'end': 43}, text: 10, types: ['number'], value: 10, word: 10})\n\n>>>>>>>>>>>>> Counter 7\n    0. unknown/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: spicy\n                                   unknown: True\n                                   value: spicy\n                                   word: spicy\n    1. unknown/1 (dead) - \"homestyle\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 14}\n                                   text: homestyle\n                                   unknown: True\n                                   value: homestyle\n                                   word: homestyle\n    2. asiago_ranch_chicken_club/1 (dead) - \"asiago ranch chicken club\"\n                                   asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago})\n                                   atomic: True\n                                   chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 35}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                   dead: True\n                                   marker: Operator(asiago_ranch_chicken_club/1, [\"Selector(None, , [Listable(Ref('asiago', (0,))), Listable(Ref('ranch', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('club', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'asiago'\n,                                    'ranch'\n,                                    'chicken'\n                                   ]\n                                   number: one\n                                   ranch: Context({marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 27}, text: ranch, types: ['ranch'], value: ranch, word: ranch})\n                                   range: {'start': 16, 'end': 40}\n                                   text: asiago ranch chicken club\n                                   types: [\n                                   'club'\n                                   ]\n                                   value: asiago_ranch_chicken_club\n                                   word: club\n   *3. number/1 (dead) - \"10\"\n                                   dead: True\n                                   instance: True\n                                   marker: Operator(number/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   range: {'start': 42, 'end': 43}\n                                   text: 10\n                                   types: [\n                                   'number'\n                                   ]\n                                   value: 10\n                                   word: 10\n    4. unknown/1 (dead) - \"piece\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 45, 'end': 49}\n                                   text: piece\n                                   types: [\n                                   'countable'\n                                   ]\n                                   unknown: True\n                                   value: piece\n                                   word: piece\n    5. unknown/1 (dead) - \"nuggets\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 51, 'end': 57}\n                                   text: nuggets\n                                   unknown: True\n                                   value: nuggets\n                                   word: nuggets\n    6. ultimate/0  - \"ultimate\"\n                                   marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge))\n                                   range: {'start': 59, 'end': 66}\n                                   text: ultimate\n                                   types: [\n                                   'ultimate'\n                                   ]\n                                   value: ultimate\n                                   word: ultimate\n    7. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 68, 'end': 74}\n                                   text: chicken\n                                   types: [\n                                   'chicken'\n                                   ]\n                                   value: chicken\n                                   word: chicken\n    8. grill/0  - \"grill\"\n                                   marker: Operator(grill/0, [\"Selector(Bridge('{ ...next(operator), value: 'grill' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'grill' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 76, 'end': 80}\n                                   text: grill\n                                   types: [\n                                   'grill'\n                                   ]\n                                   value: grill\n                                   word: grill\n    9. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 82, 'end': 84}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n    10. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 86, 'end': 92}\n                                   text: premium\n                                   types: [\n                                   'premium'\n                                   ]\n                                   value: premium\n                                   word: premium\n    11. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 94, 'end': 96}\n                                   text: cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: cod\n                                   word: cod\n    12. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n    13. sandwich/0  - \"sandwiches\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({convolution: True, marker: Operator(counting/0, [\"Selector(Bridge('{ ...after, quantity: before[0] }'), , [Type('quantifier')]<==>[Type('countable')], bridge(bridge))\"], evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), convolution bridge(bridge)), range: {'start': 42, 'end': 49}})\n\n>>>>>>>>>>>>> Counter 8\n    0. unknown/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: spicy\n                                   unknown: True\n                                   value: spicy\n                                   word: spicy\n    1. unknown/1 (dead) - \"homestyle\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 14}\n                                   text: homestyle\n                                   unknown: True\n                                   value: homestyle\n                                   word: homestyle\n    2. asiago_ranch_chicken_club/1 (dead) - \"asiago ranch chicken club\"\n                                   asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago})\n                                   atomic: True\n                                   chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 35}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                   dead: True\n                                   marker: Operator(asiago_ranch_chicken_club/1, [\"Selector(None, , [Listable(Ref('asiago', (0,))), Listable(Ref('ranch', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('club', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'asiago'\n,                                    'ranch'\n,                                    'chicken'\n                                   ]\n                                   number: one\n                                   ranch: Context({marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 27}, text: ranch, types: ['ranch'], value: ranch, word: ranch})\n                                   range: {'start': 16, 'end': 40}\n                                   text: asiago ranch chicken club\n                                   types: [\n                                   'club'\n                                   ]\n                                   value: asiago_ranch_chicken_club\n                                   word: club\n   *3. unknown/1 (dead) - \"10 piece\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   quantity: Context({dead: True, instance: True, marker: Operator(number/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 42, 'end': 43}, text: 10, types: ['number'], value: 10, word: 10})\n                                   range: {'start': 42, 'end': 49}\n                                   text: 10 piece\n                                   types: [\n                                   'countable'\n                                   ]\n                                   unknown: True\n                                   value: piece\n                                   word: piece\n    4. unknown/1 (dead) - \"nuggets\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 51, 'end': 57}\n                                   text: nuggets\n                                   unknown: True\n                                   value: nuggets\n                                   word: nuggets\n    5. ultimate/0  - \"ultimate\"\n                                   marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge))\n                                   range: {'start': 59, 'end': 66}\n                                   text: ultimate\n                                   types: [\n                                   'ultimate'\n                                   ]\n                                   value: ultimate\n                                   word: ultimate\n    6. chicken/0  - \"chicken\"\n                                   marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge))\n                                   range: {'start': 68, 'end': 74}\n                                   text: chicken\n                                   types: [\n                                   'chicken'\n                                   ]\n                                   value: chicken\n                                   word: chicken\n    7. grill/0  - \"grill\"\n                                   marker: Operator(grill/0, [\"Selector(Bridge('{ ...next(operator), value: 'grill' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'grill' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 76, 'end': 80}\n                                   text: grill\n                                   types: [\n                                   'grill'\n                                   ]\n                                   value: grill\n                                   word: grill\n    8. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 82, 'end': 84}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n    9. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 86, 'end': 92}\n                                   text: premium\n                                   types: [\n                                   'premium'\n                                   ]\n                                   value: premium\n                                   word: premium\n    10. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 94, 'end': 96}\n                                   text: cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: cod\n                                   word: cod\n    11. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n    12. sandwich/0  - \"sandwiches\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=7) is Context({convolution: True, marker: Operator(ultimate_chicken_grill/0, [\"Selector(Bridge('{ ...after[0], 'ultimate': before[0], 'chicken': before[1], atomic: true, dead: true, marker: next(operator('ultimate_chicken_grill')), value: 'ultimate_chicken_grill', modifiers: append(['ultimate', 'chicken'], after[0].modifiers)}'), , [Listable(Ref('ultimate', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('grill', (0,)))], bridge(bridge))\"], evaluator(Bridge('{ ...after[0], 'ultimate': before[0], 'chicken': before[1], atomic: true, dead: true, marker: next(operator('ultimate_chicken_grill')), value: 'ultimate_chicken_grill', modifiers: append(['ultimate', 'chicken'], after[0].modifiers)}')), variables({}), convolution bridge(bridge)), range: {'start': 59, 'end': 80}})\n\n>>>>>>>>>>>>> Counter 9\n    0. unknown/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: spicy\n                                   unknown: True\n                                   value: spicy\n                                   word: spicy\n    1. unknown/1 (dead) - \"homestyle\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 14}\n                                   text: homestyle\n                                   unknown: True\n                                   value: homestyle\n                                   word: homestyle\n    2. asiago_ranch_chicken_club/1 (dead) - \"asiago ranch chicken club\"\n                                   asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago})\n                                   atomic: True\n                                   chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 35}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                   dead: True\n                                   marker: Operator(asiago_ranch_chicken_club/1, [\"Selector(None, , [Listable(Ref('asiago', (0,))), Listable(Ref('ranch', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('club', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'asiago'\n,                                    'ranch'\n,                                    'chicken'\n                                   ]\n                                   number: one\n                                   ranch: Context({marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 27}, text: ranch, types: ['ranch'], value: ranch, word: ranch})\n                                   range: {'start': 16, 'end': 40}\n                                   text: asiago ranch chicken club\n                                   types: [\n                                   'club'\n                                   ]\n                                   value: asiago_ranch_chicken_club\n                                   word: club\n    3. unknown/1 (dead) - \"10 piece\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   quantity: Context({dead: True, instance: True, marker: Operator(number/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 42, 'end': 43}, text: 10, types: ['number'], value: 10, word: 10})\n                                   range: {'start': 42, 'end': 49}\n                                   text: 10 piece\n                                   types: [\n                                   'countable'\n                                   ]\n                                   unknown: True\n                                   value: piece\n                                   word: piece\n    4. unknown/1 (dead) - \"nuggets\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 51, 'end': 57}\n                                   text: nuggets\n                                   unknown: True\n                                   value: nuggets\n                                   word: nuggets\n   *5. ultimate_chicken_grill/1 (dead) - \"ultimate chicken grill\"\n                                   atomic: True\n                                   chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 68, 'end': 74}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                   dead: True\n                                   marker: Operator(ultimate_chicken_grill/1, [\"Selector(None, , [Listable(Ref('ultimate', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('grill', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'ultimate'\n,                                    'chicken'\n                                   ]\n                                   number: one\n                                   range: {'start': 59, 'end': 80}\n                                   text: ultimate chicken grill\n                                   types: [\n                                   'grill'\n                                   ]\n                                   ultimate: Context({marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge)), range: {'start': 59, 'end': 66}, text: ultimate, types: ['ultimate'], value: ultimate, word: ultimate})\n                                   value: ultimate_chicken_grill\n                                   word: grill\n    6. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 82, 'end': 84}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n    7. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 86, 'end': 92}\n                                   text: premium\n                                   types: [\n                                   'premium'\n                                   ]\n                                   value: premium\n                                   word: premium\n    8. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 94, 'end': 96}\n                                   text: cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: cod\n                                   word: cod\n    9. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n    10. sandwich/0  - \"sandwiches\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=8) is Context({convolution: True, marker: Operator(premium_cod/0, [\"Selector(Bridge('{ ...after[0], 'premium': before[0], atomic: true, dead: true, marker: next(operator('premium_cod')), value: 'premium_cod', modifiers: append(['premium'], after[0].modifiers)}'), , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(Bridge('{ ...after[0], 'premium': before[0], atomic: true, dead: true, marker: next(operator('premium_cod')), value: 'premium_cod', modifiers: append(['premium'], after[0].modifiers)}')), variables({}), convolution bridge(bridge)), range: {'start': 86, 'end': 96}})\n\n>>>>>>>>>>>>> Counter 10\n    0. unknown/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: spicy\n                                   unknown: True\n                                   value: spicy\n                                   word: spicy\n    1. unknown/1 (dead) - \"homestyle\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 14}\n                                   text: homestyle\n                                   unknown: True\n                                   value: homestyle\n                                   word: homestyle\n    2. asiago_ranch_chicken_club/1 (dead) - \"asiago ranch chicken club\"\n                                   asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago})\n                                   atomic: True\n                                   chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 35}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                   dead: True\n                                   marker: Operator(asiago_ranch_chicken_club/1, [\"Selector(None, , [Listable(Ref('asiago', (0,))), Listable(Ref('ranch', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('club', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'asiago'\n,                                    'ranch'\n,                                    'chicken'\n                                   ]\n                                   number: one\n                                   ranch: Context({marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 27}, text: ranch, types: ['ranch'], value: ranch, word: ranch})\n                                   range: {'start': 16, 'end': 40}\n                                   text: asiago ranch chicken club\n                                   types: [\n                                   'club'\n                                   ]\n                                   value: asiago_ranch_chicken_club\n                                   word: club\n    3. unknown/1 (dead) - \"10 piece\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   quantity: Context({dead: True, instance: True, marker: Operator(number/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 42, 'end': 43}, text: 10, types: ['number'], value: 10, word: 10})\n                                   range: {'start': 42, 'end': 49}\n                                   text: 10 piece\n                                   types: [\n                                   'countable'\n                                   ]\n                                   unknown: True\n                                   value: piece\n                                   word: piece\n    4. unknown/1 (dead) - \"nuggets\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 51, 'end': 57}\n                                   text: nuggets\n                                   unknown: True\n                                   value: nuggets\n                                   word: nuggets\n    5. ultimate_chicken_grill/1 (dead) - \"ultimate chicken grill\"\n                                   atomic: True\n                                   chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 68, 'end': 74}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                   dead: True\n                                   marker: Operator(ultimate_chicken_grill/1, [\"Selector(None, , [Listable(Ref('ultimate', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('grill', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'ultimate'\n,                                    'chicken'\n                                   ]\n                                   number: one\n                                   range: {'start': 59, 'end': 80}\n                                   text: ultimate chicken grill\n                                   types: [\n                                   'grill'\n                                   ]\n                                   ultimate: Context({marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge)), range: {'start': 59, 'end': 66}, text: ultimate, types: ['ultimate'], value: ultimate, word: ultimate})\n                                   value: ultimate_chicken_grill\n                                   word: grill\n    6. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 82, 'end': 84}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n   *7. premium_cod/1 (dead) - \"premium cod\"\n                                   atomic: True\n                                   dead: True\n                                   marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'premium'\n                                   ]\n                                   number: many\n                                   premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 86, 'end': 92}, text: premium, types: ['premium'], value: premium, word: premium})\n                                   range: {'start': 86, 'end': 96}\n                                   text: premium cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: premium_cod\n                                   word: cod\n    8. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n    9. sandwich/0  - \"sandwiches\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=6) is Context({default: True, marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 82, 'end': 84}, text: and, types: [], word: and})\n\n>>>>>>>>>>>>> Counter 11\n    0. unknown/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: spicy\n                                   unknown: True\n                                   value: spicy\n                                   word: spicy\n    1. unknown/1 (dead) - \"homestyle\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 14}\n                                   text: homestyle\n                                   unknown: True\n                                   value: homestyle\n                                   word: homestyle\n    2. asiago_ranch_chicken_club/1 (dead) - \"asiago ranch chicken club\"\n                                   asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago})\n                                   atomic: True\n                                   chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 35}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                   dead: True\n                                   marker: Operator(asiago_ranch_chicken_club/1, [\"Selector(None, , [Listable(Ref('asiago', (0,))), Listable(Ref('ranch', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('club', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'asiago'\n,                                    'ranch'\n,                                    'chicken'\n                                   ]\n                                   number: one\n                                   ranch: Context({marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 27}, text: ranch, types: ['ranch'], value: ranch, word: ranch})\n                                   range: {'start': 16, 'end': 40}\n                                   text: asiago ranch chicken club\n                                   types: [\n                                   'club'\n                                   ]\n                                   value: asiago_ranch_chicken_club\n                                   word: club\n    3. unknown/1 (dead) - \"10 piece\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   quantity: Context({dead: True, instance: True, marker: Operator(number/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 42, 'end': 43}, text: 10, types: ['number'], value: 10, word: 10})\n                                   range: {'start': 42, 'end': 49}\n                                   text: 10 piece\n                                   types: [\n                                   'countable'\n                                   ]\n                                   unknown: True\n                                   value: piece\n                                   word: piece\n    4. unknown/1 (dead) - \"nuggets\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 51, 'end': 57}\n                                   text: nuggets\n                                   unknown: True\n                                   value: nuggets\n                                   word: nuggets\n   *5. list/1  - \"ultimate chicken grill and premium cod\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 59, 'end': 96}\n                                   text: ultimate chicken grill and premium cod\n                                   types: [\n                                   ]\n                                   value: [\n                                     atomic: True\n                                     chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 68, 'end': 74}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                     dead: True\n                                     marker: Operator(ultimate_chicken_grill/1, [\"Selector(None, , [Listable(Ref('ultimate', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('grill', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'ultimate'\n,                                      'chicken'\n                                     ]\n                                     number: one\n                                     range: {'start': 59, 'end': 80}\n                                     text: ultimate chicken grill\n                                     types: [\n                                     'grill'\n                                     ]\n                                     ultimate: Context({marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge)), range: {'start': 59, 'end': 66}, text: ultimate, types: ['ultimate'], value: ultimate, word: ultimate})\n                                     value: ultimate_chicken_grill\n                                     word: grill\n\n                                     atomic: True\n                                     dead: True\n                                     marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'premium'\n                                     ]\n                                     number: many\n                                     premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 86, 'end': 92}, text: premium, types: ['premium'], value: premium, word: premium})\n                                     range: {'start': 86, 'end': 96}\n                                     text: premium cod\n                                     types: [\n                                     'cod'\n                                     ]\n                                     value: premium_cod\n                                     word: cod\n                                   ]\n                                   word: and\n    6. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n    7. sandwich/0  - \"sandwiches\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=5) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 59, 'end': 96}, text: ultimate chicken grill and premium cod, types: [], value: [Context({atomic: True, chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 68, 'end': 74}, text: chicken, types: ['chicken'], value: chicken, word: chicken}), dead: True, marker: Operator(ultimate_chicken_grill/1, [\"Selector(None, , [Listable(Ref('ultimate', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('grill', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['ultimate', 'chicken'], number: one, range: {'start': 59, 'end': 80}, text: ultimate chicken grill, types: ['grill'], ultimate: Context({marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge)), range: {'start': 59, 'end': 66}, text: ultimate, types: ['ultimate'], value: ultimate, word: ultimate}), value: ultimate_chicken_grill, word: grill}), Context({atomic: True, dead: True, marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['premium'], number: many, premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 86, 'end': 92}, text: premium, types: ['premium'], value: premium, word: premium}), range: {'start': 86, 'end': 96}, text: premium cod, types: ['cod'], value: premium_cod, word: cod})], word: and})\n\n>>>>>>>>>>>>> Counter 12\n    0. unknown/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: spicy\n                                   unknown: True\n                                   value: spicy\n                                   word: spicy\n    1. unknown/1 (dead) - \"homestyle\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 14}\n                                   text: homestyle\n                                   unknown: True\n                                   value: homestyle\n                                   word: homestyle\n    2. asiago_ranch_chicken_club/1 (dead) - \"asiago ranch chicken club\"\n                                   asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago})\n                                   atomic: True\n                                   chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 35}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                   dead: True\n                                   marker: Operator(asiago_ranch_chicken_club/1, [\"Selector(None, , [Listable(Ref('asiago', (0,))), Listable(Ref('ranch', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('club', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'asiago'\n,                                    'ranch'\n,                                    'chicken'\n                                   ]\n                                   number: one\n                                   ranch: Context({marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 27}, text: ranch, types: ['ranch'], value: ranch, word: ranch})\n                                   range: {'start': 16, 'end': 40}\n                                   text: asiago ranch chicken club\n                                   types: [\n                                   'club'\n                                   ]\n                                   value: asiago_ranch_chicken_club\n                                   word: club\n    3. unknown/1 (dead) - \"10 piece\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   quantity: Context({dead: True, instance: True, marker: Operator(number/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 42, 'end': 43}, text: 10, types: ['number'], value: 10, word: 10})\n                                   range: {'start': 42, 'end': 49}\n                                   text: 10 piece\n                                   types: [\n                                   'countable'\n                                   ]\n                                   unknown: True\n                                   value: piece\n                                   word: piece\n   *4. list/1  - \"nuggets ultimate chicken grill and premium cod\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 51, 'end': 96}\n                                   text: nuggets ultimate chicken grill and premium cod\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 51, 'end': 57}\n                                     text: nuggets\n                                     unknown: True\n                                     value: nuggets\n                                     word: nuggets\n\n                                     atomic: True\n                                     chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 68, 'end': 74}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                     dead: True\n                                     marker: Operator(ultimate_chicken_grill/1, [\"Selector(None, , [Listable(Ref('ultimate', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('grill', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'ultimate'\n,                                      'chicken'\n                                     ]\n                                     number: one\n                                     range: {'start': 59, 'end': 80}\n                                     text: ultimate chicken grill\n                                     types: [\n                                     'grill'\n                                     ]\n                                     ultimate: Context({marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge)), range: {'start': 59, 'end': 66}, text: ultimate, types: ['ultimate'], value: ultimate, word: ultimate})\n                                     value: ultimate_chicken_grill\n                                     word: grill\n\n                                     atomic: True\n                                     dead: True\n                                     marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'premium'\n                                     ]\n                                     number: many\n                                     premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 86, 'end': 92}, text: premium, types: ['premium'], value: premium, word: premium})\n                                     range: {'start': 86, 'end': 96}\n                                     text: premium cod\n                                     types: [\n                                     'cod'\n                                     ]\n                                     value: premium_cod\n                                     word: cod\n                                   ]\n                                   word: and\n    5. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n    6. sandwich/0  - \"sandwiches\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 51, 'end': 96}, text: nuggets ultimate chicken grill and premium cod, types: [], value: [Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 51, 'end': 57}, text: nuggets, unknown: True, value: nuggets, word: nuggets}), Context({atomic: True, chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 68, 'end': 74}, text: chicken, types: ['chicken'], value: chicken, word: chicken}), dead: True, marker: Operator(ultimate_chicken_grill/1, [\"Selector(None, , [Listable(Ref('ultimate', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('grill', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['ultimate', 'chicken'], number: one, range: {'start': 59, 'end': 80}, text: ultimate chicken grill, types: ['grill'], ultimate: Context({marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge)), range: {'start': 59, 'end': 66}, text: ultimate, types: ['ultimate'], value: ultimate, word: ultimate}), value: ultimate_chicken_grill, word: grill}), Context({atomic: True, dead: True, marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['premium'], number: many, premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 86, 'end': 92}, text: premium, types: ['premium'], value: premium, word: premium}), range: {'start': 86, 'end': 96}, text: premium cod, types: ['cod'], value: premium_cod, word: cod})], word: and})\n\n>>>>>>>>>>>>> Counter 13\n    0. unknown/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: spicy\n                                   unknown: True\n                                   value: spicy\n                                   word: spicy\n    1. unknown/1 (dead) - \"homestyle\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 14}\n                                   text: homestyle\n                                   unknown: True\n                                   value: homestyle\n                                   word: homestyle\n    2. asiago_ranch_chicken_club/1 (dead) - \"asiago ranch chicken club\"\n                                   asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago})\n                                   atomic: True\n                                   chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 35}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                   dead: True\n                                   marker: Operator(asiago_ranch_chicken_club/1, [\"Selector(None, , [Listable(Ref('asiago', (0,))), Listable(Ref('ranch', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('club', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'asiago'\n,                                    'ranch'\n,                                    'chicken'\n                                   ]\n                                   number: one\n                                   ranch: Context({marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 27}, text: ranch, types: ['ranch'], value: ranch, word: ranch})\n                                   range: {'start': 16, 'end': 40}\n                                   text: asiago ranch chicken club\n                                   types: [\n                                   'club'\n                                   ]\n                                   value: asiago_ranch_chicken_club\n                                   word: club\n   *3. list/1  - \"10 piece nuggets ultimate chicken grill and premium cod\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 42, 'end': 96}\n                                   text: 10 piece nuggets ultimate chicken grill and premium cod\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     quantity: Context({dead: True, instance: True, marker: Operator(number/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 42, 'end': 43}, text: 10, types: ['number'], value: 10, word: 10})\n                                     range: {'start': 42, 'end': 49}\n                                     text: 10 piece\n                                     types: [\n                                     'countable'\n                                     ]\n                                     unknown: True\n                                     value: piece\n                                     word: piece\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 51, 'end': 57}\n                                     text: nuggets\n                                     unknown: True\n                                     value: nuggets\n                                     word: nuggets\n\n                                     atomic: True\n                                     chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 68, 'end': 74}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                     dead: True\n                                     marker: Operator(ultimate_chicken_grill/1, [\"Selector(None, , [Listable(Ref('ultimate', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('grill', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'ultimate'\n,                                      'chicken'\n                                     ]\n                                     number: one\n                                     range: {'start': 59, 'end': 80}\n                                     text: ultimate chicken grill\n                                     types: [\n                                     'grill'\n                                     ]\n                                     ultimate: Context({marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge)), range: {'start': 59, 'end': 66}, text: ultimate, types: ['ultimate'], value: ultimate, word: ultimate})\n                                     value: ultimate_chicken_grill\n                                     word: grill\n\n                                     atomic: True\n                                     dead: True\n                                     marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'premium'\n                                     ]\n                                     number: many\n                                     premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 86, 'end': 92}, text: premium, types: ['premium'], value: premium, word: premium})\n                                     range: {'start': 86, 'end': 96}\n                                     text: premium cod\n                                     types: [\n                                     'cod'\n                                     ]\n                                     value: premium_cod\n                                     word: cod\n                                   ]\n                                   word: and\n    4. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n    5. sandwich/0  - \"sandwiches\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 42, 'end': 96}, text: 10 piece nuggets ultimate chicken grill and premium cod, types: [], value: [Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), quantity: Context({dead: True, instance: True, marker: Operator(number/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 42, 'end': 43}, text: 10, types: ['number'], value: 10, word: 10}), range: {'start': 42, 'end': 49}, text: 10 piece, types: ['countable'], unknown: True, value: piece, word: piece}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 51, 'end': 57}, text: nuggets, unknown: True, value: nuggets, word: nuggets}), Context({atomic: True, chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 68, 'end': 74}, text: chicken, types: ['chicken'], value: chicken, word: chicken}), dead: True, marker: Operator(ultimate_chicken_grill/1, [\"Selector(None, , [Listable(Ref('ultimate', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('grill', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['ultimate', 'chicken'], number: one, range: {'start': 59, 'end': 80}, text: ultimate chicken grill, types: ['grill'], ultimate: Context({marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge)), range: {'start': 59, 'end': 66}, text: ultimate, types: ['ultimate'], value: ultimate, word: ultimate}), value: ultimate_chicken_grill, word: grill}), Context({atomic: True, dead: True, marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['premium'], number: many, premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 86, 'end': 92}, text: premium, types: ['premium'], value: premium, word: premium}), range: {'start': 86, 'end': 96}, text: premium cod, types: ['cod'], value: premium_cod, word: cod})], word: and})\n\n>>>>>>>>>>>>> Counter 14\n    0. unknown/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: spicy\n                                   unknown: True\n                                   value: spicy\n                                   word: spicy\n    1. unknown/1 (dead) - \"homestyle\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 6, 'end': 14}\n                                   text: homestyle\n                                   unknown: True\n                                   value: homestyle\n                                   word: homestyle\n   *2. list/1  - \"asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 16, 'end': 96}\n                                   text: asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod\n                                   types: [\n                                   ]\n                                   value: [\n                                     asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago})\n                                     atomic: True\n                                     chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 35}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                     dead: True\n                                     marker: Operator(asiago_ranch_chicken_club/1, [\"Selector(None, , [Listable(Ref('asiago', (0,))), Listable(Ref('ranch', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('club', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'asiago'\n,                                      'ranch'\n,                                      'chicken'\n                                     ]\n                                     number: one\n                                     ranch: Context({marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 27}, text: ranch, types: ['ranch'], value: ranch, word: ranch})\n                                     range: {'start': 16, 'end': 40}\n                                     text: asiago ranch chicken club\n                                     types: [\n                                     'club'\n                                     ]\n                                     value: asiago_ranch_chicken_club\n                                     word: club\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     quantity: Context({dead: True, instance: True, marker: Operator(number/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 42, 'end': 43}, text: 10, types: ['number'], value: 10, word: 10})\n                                     range: {'start': 42, 'end': 49}\n                                     text: 10 piece\n                                     types: [\n                                     'countable'\n                                     ]\n                                     unknown: True\n                                     value: piece\n                                     word: piece\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 51, 'end': 57}\n                                     text: nuggets\n                                     unknown: True\n                                     value: nuggets\n                                     word: nuggets\n\n                                     atomic: True\n                                     chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 68, 'end': 74}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                     dead: True\n                                     marker: Operator(ultimate_chicken_grill/1, [\"Selector(None, , [Listable(Ref('ultimate', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('grill', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'ultimate'\n,                                      'chicken'\n                                     ]\n                                     number: one\n                                     range: {'start': 59, 'end': 80}\n                                     text: ultimate chicken grill\n                                     types: [\n                                     'grill'\n                                     ]\n                                     ultimate: Context({marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge)), range: {'start': 59, 'end': 66}, text: ultimate, types: ['ultimate'], value: ultimate, word: ultimate})\n                                     value: ultimate_chicken_grill\n                                     word: grill\n\n                                     atomic: True\n                                     dead: True\n                                     marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'premium'\n                                     ]\n                                     number: many\n                                     premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 86, 'end': 92}, text: premium, types: ['premium'], value: premium, word: premium})\n                                     range: {'start': 86, 'end': 96}\n                                     text: premium cod\n                                     types: [\n                                     'cod'\n                                     ]\n                                     value: premium_cod\n                                     word: cod\n                                   ]\n                                   word: and\n    3. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n    4. sandwich/0  - \"sandwiches\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 16, 'end': 96}, text: asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod, types: [], value: [Context({asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago}), atomic: True, chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 35}, text: chicken, types: ['chicken'], value: chicken, word: chicken}), dead: True, marker: Operator(asiago_ranch_chicken_club/1, [\"Selector(None, , [Listable(Ref('asiago', (0,))), Listable(Ref('ranch', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('club', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['asiago', 'ranch', 'chicken'], number: one, ranch: Context({marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 27}, text: ranch, types: ['ranch'], value: ranch, word: ranch}), range: {'start': 16, 'end': 40}, text: asiago ranch chicken club, types: ['club'], value: asiago_ranch_chicken_club, word: club}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), quantity: Context({dead: True, instance: True, marker: Operator(number/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 42, 'end': 43}, text: 10, types: ['number'], value: 10, word: 10}), range: {'start': 42, 'end': 49}, text: 10 piece, types: ['countable'], unknown: True, value: piece, word: piece}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 51, 'end': 57}, text: nuggets, unknown: True, value: nuggets, word: nuggets}), Context({atomic: True, chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 68, 'end': 74}, text: chicken, types: ['chicken'], value: chicken, word: chicken}), dead: True, marker: Operator(ultimate_chicken_grill/1, [\"Selector(None, , [Listable(Ref('ultimate', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('grill', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['ultimate', 'chicken'], number: one, range: {'start': 59, 'end': 80}, text: ultimate chicken grill, types: ['grill'], ultimate: Context({marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge)), range: {'start': 59, 'end': 66}, text: ultimate, types: ['ultimate'], value: ultimate, word: ultimate}), value: ultimate_chicken_grill, word: grill}), Context({atomic: True, dead: True, marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['premium'], number: many, premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 86, 'end': 92}, text: premium, types: ['premium'], value: premium, word: premium}), range: {'start': 86, 'end': 96}, text: premium cod, types: ['cod'], value: premium_cod, word: cod})], word: and})\n\n>>>>>>>>>>>>> Counter 15\n    0. unknown/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 4}\n                                   text: spicy\n                                   unknown: True\n                                   value: spicy\n                                   word: spicy\n   *1. list/1  - \"homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 6, 'end': 96}\n                                   text: homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 14}\n                                     text: homestyle\n                                     unknown: True\n                                     value: homestyle\n                                     word: homestyle\n\n                                     asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago})\n                                     atomic: True\n                                     chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 35}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                     dead: True\n                                     marker: Operator(asiago_ranch_chicken_club/1, [\"Selector(None, , [Listable(Ref('asiago', (0,))), Listable(Ref('ranch', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('club', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'asiago'\n,                                      'ranch'\n,                                      'chicken'\n                                     ]\n                                     number: one\n                                     ranch: Context({marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 27}, text: ranch, types: ['ranch'], value: ranch, word: ranch})\n                                     range: {'start': 16, 'end': 40}\n                                     text: asiago ranch chicken club\n                                     types: [\n                                     'club'\n                                     ]\n                                     value: asiago_ranch_chicken_club\n                                     word: club\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     quantity: Context({dead: True, instance: True, marker: Operator(number/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 42, 'end': 43}, text: 10, types: ['number'], value: 10, word: 10})\n                                     range: {'start': 42, 'end': 49}\n                                     text: 10 piece\n                                     types: [\n                                     'countable'\n                                     ]\n                                     unknown: True\n                                     value: piece\n                                     word: piece\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 51, 'end': 57}\n                                     text: nuggets\n                                     unknown: True\n                                     value: nuggets\n                                     word: nuggets\n\n                                     atomic: True\n                                     chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 68, 'end': 74}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                     dead: True\n                                     marker: Operator(ultimate_chicken_grill/1, [\"Selector(None, , [Listable(Ref('ultimate', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('grill', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'ultimate'\n,                                      'chicken'\n                                     ]\n                                     number: one\n                                     range: {'start': 59, 'end': 80}\n                                     text: ultimate chicken grill\n                                     types: [\n                                     'grill'\n                                     ]\n                                     ultimate: Context({marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge)), range: {'start': 59, 'end': 66}, text: ultimate, types: ['ultimate'], value: ultimate, word: ultimate})\n                                     value: ultimate_chicken_grill\n                                     word: grill\n\n                                     atomic: True\n                                     dead: True\n                                     marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'premium'\n                                     ]\n                                     number: many\n                                     premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 86, 'end': 92}, text: premium, types: ['premium'], value: premium, word: premium})\n                                     range: {'start': 86, 'end': 96}\n                                     text: premium cod\n                                     types: [\n                                     'cod'\n                                     ]\n                                     value: premium_cod\n                                     word: cod\n                                   ]\n                                   word: and\n    2. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n    3. sandwich/0  - \"sandwiches\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 6, 'end': 96}, text: homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod, types: [], value: [Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 14}, text: homestyle, unknown: True, value: homestyle, word: homestyle}), Context({asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago}), atomic: True, chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 35}, text: chicken, types: ['chicken'], value: chicken, word: chicken}), dead: True, marker: Operator(asiago_ranch_chicken_club/1, [\"Selector(None, , [Listable(Ref('asiago', (0,))), Listable(Ref('ranch', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('club', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['asiago', 'ranch', 'chicken'], number: one, ranch: Context({marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 27}, text: ranch, types: ['ranch'], value: ranch, word: ranch}), range: {'start': 16, 'end': 40}, text: asiago ranch chicken club, types: ['club'], value: asiago_ranch_chicken_club, word: club}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), quantity: Context({dead: True, instance: True, marker: Operator(number/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 42, 'end': 43}, text: 10, types: ['number'], value: 10, word: 10}), range: {'start': 42, 'end': 49}, text: 10 piece, types: ['countable'], unknown: True, value: piece, word: piece}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 51, 'end': 57}, text: nuggets, unknown: True, value: nuggets, word: nuggets}), Context({atomic: True, chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 68, 'end': 74}, text: chicken, types: ['chicken'], value: chicken, word: chicken}), dead: True, marker: Operator(ultimate_chicken_grill/1, [\"Selector(None, , [Listable(Ref('ultimate', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('grill', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['ultimate', 'chicken'], number: one, range: {'start': 59, 'end': 80}, text: ultimate chicken grill, types: ['grill'], ultimate: Context({marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge)), range: {'start': 59, 'end': 66}, text: ultimate, types: ['ultimate'], value: ultimate, word: ultimate}), value: ultimate_chicken_grill, word: grill}), Context({atomic: True, dead: True, marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['premium'], number: many, premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 86, 'end': 92}, text: premium, types: ['premium'], value: premium, word: premium}), range: {'start': 86, 'end': 96}, text: premium cod, types: ['cod'], value: premium_cod, word: cod})], word: and})\n\n>>>>>>>>>>>>> Counter 16\n   *0. list/1  - \"spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 0, 'end': 96}\n                                   text: spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: spicy\n                                     unknown: True\n                                     value: spicy\n                                     word: spicy\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 14}\n                                     text: homestyle\n                                     unknown: True\n                                     value: homestyle\n                                     word: homestyle\n\n                                     asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago})\n                                     atomic: True\n                                     chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 35}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                     dead: True\n                                     marker: Operator(asiago_ranch_chicken_club/1, [\"Selector(None, , [Listable(Ref('asiago', (0,))), Listable(Ref('ranch', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('club', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'asiago'\n,                                      'ranch'\n,                                      'chicken'\n                                     ]\n                                     number: one\n                                     ranch: Context({marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 27}, text: ranch, types: ['ranch'], value: ranch, word: ranch})\n                                     range: {'start': 16, 'end': 40}\n                                     text: asiago ranch chicken club\n                                     types: [\n                                     'club'\n                                     ]\n                                     value: asiago_ranch_chicken_club\n                                     word: club\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     quantity: Context({dead: True, instance: True, marker: Operator(number/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 42, 'end': 43}, text: 10, types: ['number'], value: 10, word: 10})\n                                     range: {'start': 42, 'end': 49}\n                                     text: 10 piece\n                                     types: [\n                                     'countable'\n                                     ]\n                                     unknown: True\n                                     value: piece\n                                     word: piece\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 51, 'end': 57}\n                                     text: nuggets\n                                     unknown: True\n                                     value: nuggets\n                                     word: nuggets\n\n                                     atomic: True\n                                     chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 68, 'end': 74}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                     dead: True\n                                     marker: Operator(ultimate_chicken_grill/1, [\"Selector(None, , [Listable(Ref('ultimate', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('grill', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'ultimate'\n,                                      'chicken'\n                                     ]\n                                     number: one\n                                     range: {'start': 59, 'end': 80}\n                                     text: ultimate chicken grill\n                                     types: [\n                                     'grill'\n                                     ]\n                                     ultimate: Context({marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge)), range: {'start': 59, 'end': 66}, text: ultimate, types: ['ultimate'], value: ultimate, word: ultimate})\n                                     value: ultimate_chicken_grill\n                                     word: grill\n\n                                     atomic: True\n                                     dead: True\n                                     marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'premium'\n                                     ]\n                                     number: many\n                                     premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 86, 'end': 92}, text: premium, types: ['premium'], value: premium, word: premium})\n                                     range: {'start': 86, 'end': 96}\n                                     text: premium cod\n                                     types: [\n                                     'cod'\n                                     ]\n                                     value: premium_cod\n                                     word: cod\n                                   ]\n                                   word: and\n    1. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n    2. sandwich/0  - \"sandwiches\"\n                                   marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(sandwich/0, [\"Selector(Bridge('{ ...next(operator), value: 'sandwich' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'sandwich' }')), variables({}) bridge(bridge)), number: many, range: {'start': 102, 'end': 111}, text: sandwiches, value: sandwich, word: sandwiches})\n\n>>>>>>>>>>>>> Counter 17\n    0. list/1  - \"spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 0, 'end': 96}\n                                   text: spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 4}\n                                     text: spicy\n                                     unknown: True\n                                     value: spicy\n                                     word: spicy\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 6, 'end': 14}\n                                     text: homestyle\n                                     unknown: True\n                                     value: homestyle\n                                     word: homestyle\n\n                                     asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago})\n                                     atomic: True\n                                     chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 35}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                     dead: True\n                                     marker: Operator(asiago_ranch_chicken_club/1, [\"Selector(None, , [Listable(Ref('asiago', (0,))), Listable(Ref('ranch', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('club', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'asiago'\n,                                      'ranch'\n,                                      'chicken'\n                                     ]\n                                     number: one\n                                     ranch: Context({marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 27}, text: ranch, types: ['ranch'], value: ranch, word: ranch})\n                                     range: {'start': 16, 'end': 40}\n                                     text: asiago ranch chicken club\n                                     types: [\n                                     'club'\n                                     ]\n                                     value: asiago_ranch_chicken_club\n                                     word: club\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     quantity: Context({dead: True, instance: True, marker: Operator(number/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 42, 'end': 43}, text: 10, types: ['number'], value: 10, word: 10})\n                                     range: {'start': 42, 'end': 49}\n                                     text: 10 piece\n                                     types: [\n                                     'countable'\n                                     ]\n                                     unknown: True\n                                     value: piece\n                                     word: piece\n\n                                     dead: True\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 51, 'end': 57}\n                                     text: nuggets\n                                     unknown: True\n                                     value: nuggets\n                                     word: nuggets\n\n                                     atomic: True\n                                     chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 68, 'end': 74}, text: chicken, types: ['chicken'], value: chicken, word: chicken})\n                                     dead: True\n                                     marker: Operator(ultimate_chicken_grill/1, [\"Selector(None, , [Listable(Ref('ultimate', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('grill', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'ultimate'\n,                                      'chicken'\n                                     ]\n                                     number: one\n                                     range: {'start': 59, 'end': 80}\n                                     text: ultimate chicken grill\n                                     types: [\n                                     'grill'\n                                     ]\n                                     ultimate: Context({marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge)), range: {'start': 59, 'end': 66}, text: ultimate, types: ['ultimate'], value: ultimate, word: ultimate})\n                                     value: ultimate_chicken_grill\n                                     word: grill\n\n                                     atomic: True\n                                     dead: True\n                                     marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'premium'\n                                     ]\n                                     number: many\n                                     premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 86, 'end': 92}, text: premium, types: ['premium'], value: premium, word: premium})\n                                     range: {'start': 86, 'end': 96}\n                                     text: premium cod\n                                     types: [\n                                     'cod'\n                                     ]\n                                     value: premium_cod\n                                     word: cod\n                                   ]\n                                   word: and\n    1. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 98, 'end': 100}\n                                   text: are\n                                   word: are\n   *2. sandwich/1 (dead) - \"sandwiches\"\n                                   dead: True\n                                   marker: Operator(sandwich/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 102, 'end': 111}\n                                   text: sandwiches\n                                   value: sandwich\n                                   word: sandwiches\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 98, 'end': 100}, text: are, word: are})\n\n>>>>>>>>>>>>> Counter 18\n   *0. is/1  - \"spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod are sandwiches\"\n                                   marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   one: Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), number: many, range: {'start': 0, 'end': 111}, text: spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod, types: ['unknown'], value: [Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: spicy, unknown: True, value: spicy, word: spicy}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 14}, text: homestyle, unknown: True, value: homestyle, word: homestyle}), Context({asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago}), atomic: True, chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(b\n                                   range: {'start': 0, 'end': 111}\n                                   text: spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod are sandwiches\n                                   two: Context({dead: True, marker: Operator(sandwich/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 102, 'end': 111}, text: sandwiches, types: ['sandwich'], value: sandwich, word: sandwiches})\n                                   word: are\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), number: many, range: {'start': 0, 'end': 111}, text: spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod, types: ['unknown'], value: [Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: spicy, unknown: True, value: spicy, word: spicy}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 14}, text: homestyle, unknown: True, value: homestyle, word: homestyle}), Context({asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago}), atomic: True, chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 35}, text: chicken, types: ['chicken'], value: chicken, word: chicken}), dead: True, marker: Operator(asiago_ranch_chicken_club/1, [\"Selector(None, , [Listable(Ref('asiago', (0,))), Listable(Ref('ranch', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('club', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['asiago', 'ranch', 'chicken'], number: one, ranch: Context({marker: Operator(ranch/0, [\"Selector(Bridge('{ ...next(operator), value: 'ranch' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ranch' }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 27}, text: ranch, types: ['ranch'], value: ranch, word: ranch}), range: {'start': 16, 'end': 40}, text: asiago ranch chicken club, types: ['club'], value: asiago_ranch_chicken_club, word: club}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), quantity: Context({dead: True, instance: True, marker: Operator(number/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), range: {'start': 42, 'end': 43}, text: 10, types: ['number'], value: 10, word: 10}), range: {'start': 42, 'end': 49}, text: 10 piece, types: ['countable'], unknown: True, value: piece, word: piece}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 51, 'end': 57}, text: nuggets, unknown: True, value: nuggets, word: nuggets}), Context({atomic: True, chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(bridge)), range: {'start': 68, 'end': 74}, text: chicken, types: ['chicken'], value: chicken, word: chicken}), dead: True, marker: Operator(ultimate_chicken_grill/1, [\"Selector(None, , [Listable(Ref('ultimate', (0,))), Listable(Ref('chicken', (0,)))]<==>[Listable(Ref('grill', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['ultimate', 'chicken'], number: one, range: {'start': 59, 'end': 80}, text: ultimate chicken grill, types: ['grill'], ultimate: Context({marker: Operator(ultimate/0, [\"Selector(Bridge('{ ...next(operator), value: 'ultimate' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'ultimate' }')), variables({}) bridge(bridge)), range: {'start': 59, 'end': 66}, text: ultimate, types: ['ultimate'], value: ultimate, word: ultimate}), value: ultimate_chicken_grill, word: grill}), Context({atomic: True, dead: True, marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['premium'], number: many, premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 86, 'end': 92}, text: premium, types: ['premium'], value: premium, word: premium}), range: {'start': 86, 'end': 96}, text: premium cod, types: ['cod'], value: premium_cod, word: cod})], word: and}), range: {'start': 0, 'end': 111}, text: spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod are sandwiches, two: Context({dead: True, marker: Operator(sandwich/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 102, 'end': 111}, text: sandwiches, types: ['sandwich'], value: sandwich, word: sandwiches}), word: are})\n\n>>>>>>>>>>>>> Counter 19\n   *0. is/2 (dead) - \"spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod are sandwiches\"\n                                   dead: True\n                                   marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   one: Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), number: many, range: {'start': 0, 'end': 111}, text: spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod, types: ['unknown'], value: [Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 4}, text: spicy, unknown: True, value: spicy, word: spicy}), Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 14}, text: homestyle, unknown: True, value: homestyle, word: homestyle}), Context({asiago: Context({marker: Operator(asiago/0, [\"Selector(Bridge('{ ...next(operator), value: 'asiago' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'asiago' }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 21}, text: asiago, types: ['asiago'], value: asiago, word: asiago}), atomic: True, chicken: Context({marker: Operator(chicken/0, [\"Selector(Bridge('{ ...next(operator), value: 'chicken' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'chicken' }')), variables({}) bridge(b\n                                   range: {'start': 0, 'end': 111}\n                                   text: spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod are sandwiches\n                                   two: Context({dead: True, marker: Operator(sandwich/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 102, 'end': 111}, text: sandwiches, types: ['sandwich'], value: sandwich, word: sandwiches})\n                                   word: are\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "many",
          "text": "spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod are sandwiches",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 111
          },
          "one": {
            "number": "many",
            "marker": "list",
            "default": true,
            "word": "and",
            "text": "spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod",
            "range": {
              "start": 0,
              "end": 111
            },
            "types": [
              "list",
              "unknown"
            ],
            "listable": true,
            "isList": true,
            "value": [
              {
                "marker": "unknown",
                "range": {
                  "start": 0,
                  "end": 4
                },
                "word": "spicy",
                "text": "spicy",
                "value": "spicy",
                "unknown": true,
                "dead": true,
                "level": 1
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 6,
                  "end": 14
                },
                "word": "homestyle",
                "text": "homestyle",
                "value": "homestyle",
                "unknown": true,
                "dead": true,
                "level": 1
              },
              {
                "value": "asiago_ranch_chicken_club",
                "number": "one",
                "text": "asiago ranch chicken club",
                "marker": "asiago_ranch_chicken_club",
                "word": "club",
                "range": {
                  "start": 16,
                  "end": 40
                },
                "types": [
                  "asiago_ranch_chicken_club",
                  "club"
                ],
                "asiago": {
                  "value": "asiago",
                  "text": "asiago",
                  "marker": "asiago",
                  "word": "asiago",
                  "range": {
                    "start": 16,
                    "end": 21
                  },
                  "types": [
                    "asiago"
                  ],
                  "level": 0
                },
                "ranch": {
                  "value": "ranch",
                  "text": "ranch",
                  "marker": "ranch",
                  "word": "ranch",
                  "range": {
                    "start": 23,
                    "end": 27
                  },
                  "types": [
                    "ranch"
                  ],
                  "level": 0
                },
                "chicken": {
                  "value": "chicken",
                  "text": "chicken",
                  "marker": "chicken",
                  "word": "chicken",
                  "range": {
                    "start": 29,
                    "end": 35
                  },
                  "types": [
                    "chicken"
                  ],
                  "level": 0
                },
                "atomic": true,
                "dead": true,
                "modifiers": [
                  "asiago",
                  "ranch",
                  "chicken"
                ],
                "level": 1
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 42,
                  "end": 49
                },
                "word": "piece",
                "text": "10 piece",
                "value": "piece",
                "types": [
                  "countable",
                  "unknown"
                ],
                "unknown": true,
                "dead": true,
                "quantity": {
                  "value": 10,
                  "instance": true,
                  "text": "10",
                  "marker": "number",
                  "word": "10",
                  "range": {
                    "start": 42,
                    "end": 43
                  },
                  "types": [
                    "number"
                  ],
                  "dead": true,
                  "level": 1
                },
                "level": 1
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 51,
                  "end": 57
                },
                "word": "nuggets",
                "text": "nuggets",
                "value": "nuggets",
                "unknown": true,
                "dead": true,
                "level": 1
              },
              {
                "value": "ultimate_chicken_grill",
                "number": "one",
                "text": "ultimate chicken grill",
                "marker": "ultimate_chicken_grill",
                "word": "grill",
                "range": {
                  "start": 59,
                  "end": 80
                },
                "types": [
                  "grill",
                  "ultimate_chicken_grill"
                ],
                "ultimate": {
                  "value": "ultimate",
                  "text": "ultimate",
                  "marker": "ultimate",
                  "word": "ultimate",
                  "range": {
                    "start": 59,
                    "end": 66
                  },
                  "types": [
                    "ultimate"
                  ],
                  "level": 0
                },
                "chicken": {
                  "value": "chicken",
                  "text": "chicken",
                  "marker": "chicken",
                  "word": "chicken",
                  "range": {
                    "start": 68,
                    "end": 74
                  },
                  "types": [
                    "chicken"
                  ],
                  "level": 0
                },
                "atomic": true,
                "dead": true,
                "modifiers": [
                  "ultimate",
                  "chicken"
                ],
                "level": 1
              },
              {
                "value": "premium_cod",
                "number": "many",
                "text": "premium cod",
                "marker": "premium_cod",
                "word": "cod",
                "range": {
                  "start": 86,
                  "end": 96
                },
                "types": [
                  "cod",
                  "premium_cod"
                ],
                "premium": {
                  "value": "premium",
                  "text": "premium",
                  "marker": "premium",
                  "word": "premium",
                  "range": {
                    "start": 86,
                    "end": 92
                  },
                  "types": [
                    "premium"
                  ],
                  "level": 0
                },
                "atomic": true,
                "dead": true,
                "modifiers": [
                  "premium"
                ],
                "level": 1
              }
            ],
            "level": 1
          },
          "two": {
            "value": "sandwich",
            "number": "many",
            "text": "sandwiches",
            "marker": "sandwich",
            "word": "sandwiches",
            "range": {
              "start": 102,
              "end": 111
            },
            "dead": true,
            "types": [
              "sandwich"
            ],
            "level": 1,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "fastfood#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "spicy, homestyle, asiago ranch chicken club, 10 piece, nuggets, ultimate chicken grill and premium cod are sandwiches"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "asiago",
            0
          ],
          [
            "chicken",
            0
          ],
          [
            "club",
            0
          ],
          [
            "cod",
            0
          ],
          [
            "grill",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "number",
            0
          ],
          [
            "premium",
            0
          ],
          [
            "ranch",
            0
          ],
          [
            "sandwich",
            0
          ],
          [
            "ultimate",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "asiago",
            0
          ],
          [
            "chicken",
            0
          ],
          [
            "club",
            0
          ],
          [
            "cod",
            0
          ],
          [
            "grill",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "number",
            0
          ],
          [
            "premium",
            0
          ],
          [
            "ranch",
            0
          ],
          [
            "sandwich",
            0
          ],
          [
            "ultimate",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "asiago",
            0
          ],
          [
            "chicken",
            0
          ],
          [
            "club",
            0
          ],
          [
            "cod",
            0
          ],
          [
            "grill",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "number",
            0
          ],
          [
            "premium",
            0
          ],
          [
            "ranch",
            0
          ],
          [
            "sandwich",
            0
          ],
          [
            "ultimate",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "asiago",
            0
          ],
          [
            "chicken",
            0
          ],
          [
            "club",
            0
          ],
          [
            "cod",
            0
          ],
          [
            "grill",
            0
          ],
          [
            "premium",
            0
          ],
          [
            "ranch",
            0
          ],
          [
            "ultimate",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "chicken",
            0
          ],
          [
            "cod",
            0
          ],
          [
            "grill",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "number",
            0
          ],
          [
            "premium",
            0
          ],
          [
            "sandwich",
            0
          ],
          [
            "ultimate",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "chicken",
            0
          ],
          [
            "cod",
            0
          ],
          [
            "grill",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "premium",
            0
          ],
          [
            "sandwich",
            0
          ],
          [
            "ultimate",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "cod",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "premium",
            0
          ],
          [
            "sandwich",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "sandwich",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "sandwich",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "sandwich",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "sandwich",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "query": "spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod are sandwiches",
      "key": {
        "query": "spicy homestyle asiago ranch chicken club 10 piece nuggets ultimate chicken grill and premium cod are sandwiches"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "apple",
          "fruit"
        ],
        [
          "apple",
          "hierarchyAble"
        ],
        [
          "apple",
          "isEdee"
        ],
        [
          "apple",
          "isEder"
        ],
        [
          "apple",
          "object"
        ],
        [
          "apple",
          "property"
        ],
        [
          "apple",
          "queryable"
        ],
        [
          "apple",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "asiago",
          "hierarchyAble"
        ],
        [
          "asiago",
          "isEdee"
        ],
        [
          "asiago",
          "isEder"
        ],
        [
          "asiago",
          "object"
        ],
        [
          "asiago",
          "property"
        ],
        [
          "asiago",
          "queryable"
        ],
        [
          "asiago",
          "theAble"
        ],
        [
          "asiago_ranch_chicken_club",
          "adjective"
        ],
        [
          "asiago_ranch_chicken_club",
          "concept"
        ],
        [
          "asiago_ranch_chicken_club",
          "hierarchyAble"
        ],
        [
          "asiago_ranch_chicken_club",
          "isEdee"
        ],
        [
          "asiago_ranch_chicken_club",
          "isEder"
        ],
        [
          "asiago_ranch_chicken_club",
          "object"
        ],
        [
          "asiago_ranch_chicken_club",
          "property"
        ],
        [
          "asiago_ranch_chicken_club",
          "queryable"
        ],
        [
          "asiago_ranch_chicken_club",
          "sandwich"
        ],
        [
          "asiago_ranch_chicken_club",
          "theAble"
        ],
        [
          "bacon",
          "hierarchyAble"
        ],
        [
          "bacon",
          "isEdee"
        ],
        [
          "bacon",
          "isEder"
        ],
        [
          "bacon",
          "object"
        ],
        [
          "bacon",
          "property"
        ],
        [
          "bacon",
          "queryable"
        ],
        [
          "bacon",
          "theAble"
        ],
        [
          "bacon_deluxe",
          "adjective"
        ],
        [
          "bacon_deluxe",
          "concept"
        ],
        [
          "bacon_deluxe",
          "hamburger"
        ],
        [
          "bacon_deluxe",
          "hierarchyAble"
        ],
        [
          "bacon_deluxe",
          "isEdee"
        ],
        [
          "bacon_deluxe",
          "isEder"
        ],
        [
          "bacon_deluxe",
          "object"
        ],
        [
          "bacon_deluxe",
          "property"
        ],
        [
          "bacon_deluxe",
          "queryable"
        ],
        [
          "bacon_deluxe",
          "theAble"
        ],
        [
          "baconater",
          "hamburger"
        ],
        [
          "baconater",
          "hierarchyAble"
        ],
        [
          "baconater",
          "isEdee"
        ],
        [
          "baconater",
          "isEder"
        ],
        [
          "baconater",
          "object"
        ],
        [
          "baconater",
          "property"
        ],
        [
          "baconater",
          "queryable"
        ],
        [
          "baconater",
          "theAble"
        ],
        [
          "banana",
          "fruit"
        ],
        [
          "banana",
          "hierarchyAble"
        ],
        [
          "banana",
          "isEdee"
        ],
        [
          "banana",
          "isEder"
        ],
        [
          "banana",
          "object"
        ],
        [
          "banana",
          "property"
        ],
        [
          "banana",
          "queryable"
        ],
        [
          "banana",
          "theAble"
        ],
        [
          "between",
          "preposition"
        ],
        [
          "brocoli",
          "hierarchyAble"
        ],
        [
          "brocoli",
          "isEdee"
        ],
        [
          "brocoli",
          "isEder"
        ],
        [
          "brocoli",
          "object"
        ],
        [
          "brocoli",
          "property"
        ],
        [
          "brocoli",
          "queryable"
        ],
        [
          "brocoli",
          "theAble"
        ],
        [
          "brocoli",
          "vegetable"
        ],
        [
          "cabbage",
          "hierarchyAble"
        ],
        [
          "cabbage",
          "isEdee"
        ],
        [
          "cabbage",
          "isEder"
        ],
        [
          "cabbage",
          "object"
        ],
        [
          "cabbage",
          "property"
        ],
        [
          "cabbage",
          "queryable"
        ],
        [
          "cabbage",
          "theAble"
        ],
        [
          "cabbage",
          "vegetable"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "carrot",
          "hierarchyAble"
        ],
        [
          "carrot",
          "isEdee"
        ],
        [
          "carrot",
          "isEder"
        ],
        [
          "carrot",
          "object"
        ],
        [
          "carrot",
          "property"
        ],
        [
          "carrot",
          "queryable"
        ],
        [
          "carrot",
          "theAble"
        ],
        [
          "carrot",
          "vegetable"
        ],
        [
          "changes",
          "event"
        ],
        [
          "changes",
          "verby"
        ],
        [
          "chicken",
          "hierarchyAble"
        ],
        [
          "chicken",
          "isEdee"
        ],
        [
          "chicken",
          "isEder"
        ],
        [
          "chicken",
          "object"
        ],
        [
          "chicken",
          "property"
        ],
        [
          "chicken",
          "queryable"
        ],
        [
          "chicken",
          "theAble"
        ],
        [
          "chicken_sandwich",
          "adjective"
        ],
        [
          "chicken_sandwich",
          "concept"
        ],
        [
          "chicken_sandwich",
          "hierarchyAble"
        ],
        [
          "chicken_sandwich",
          "isEdee"
        ],
        [
          "chicken_sandwich",
          "isEder"
        ],
        [
          "chicken_sandwich",
          "object"
        ],
        [
          "chicken_sandwich",
          "property"
        ],
        [
          "chicken_sandwich",
          "queryable"
        ],
        [
          "chicken_sandwich",
          "theAble"
        ],
        [
          "chicken_strip",
          "adjective"
        ],
        [
          "chicken_strip",
          "concept"
        ],
        [
          "chicken_strip",
          "food"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "isEdee"
        ],
        [
          "chicken_strip",
          "isEder"
        ],
        [
          "chicken_strip",
          "object"
        ],
        [
          "chicken_strip",
          "property"
        ],
        [
          "chicken_strip",
          "queryable"
        ],
        [
          "chicken_strip",
          "theAble"
        ],
        [
          "club",
          "concept"
        ],
        [
          "club",
          "hierarchyAble"
        ],
        [
          "club",
          "isEdee"
        ],
        [
          "club",
          "isEder"
        ],
        [
          "club",
          "object"
        ],
        [
          "club",
          "property"
        ],
        [
          "club",
          "queryable"
        ],
        [
          "club",
          "theAble"
        ],
        [
          "cod",
          "concept"
        ],
        [
          "cod",
          "hierarchyAble"
        ],
        [
          "cod",
          "isEdee"
        ],
        [
          "cod",
          "isEder"
        ],
        [
          "cod",
          "object"
        ],
        [
          "cod",
          "property"
        ],
        [
          "cod",
          "queryable"
        ],
        [
          "cod",
          "theAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "countable",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "concept"
        ],
        [
          "deluxe",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "isEdee"
        ],
        [
          "deluxe",
          "isEder"
        ],
        [
          "deluxe",
          "object"
        ],
        [
          "deluxe",
          "property"
        ],
        [
          "deluxe",
          "queryable"
        ],
        [
          "deluxe",
          "theAble"
        ],
        [
          "dog",
          "concept"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "dog",
          "isEdee"
        ],
        [
          "dog",
          "isEder"
        ],
        [
          "dog",
          "object"
        ],
        [
          "dog",
          "property"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "double",
          "hamburger"
        ],
        [
          "double",
          "hierarchyAble"
        ],
        [
          "double",
          "isEdee"
        ],
        [
          "double",
          "isEder"
        ],
        [
          "double",
          "object"
        ],
        [
          "double",
          "property"
        ],
        [
          "double",
          "queryable"
        ],
        [
          "double",
          "theAble"
        ],
        [
          "event",
          "event"
        ],
        [
          "food",
          "countable"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "french",
          "hierarchyAble"
        ],
        [
          "french",
          "isEdee"
        ],
        [
          "french",
          "isEder"
        ],
        [
          "french",
          "object"
        ],
        [
          "french",
          "property"
        ],
        [
          "french",
          "queryable"
        ],
        [
          "french",
          "theAble"
        ],
        [
          "french_fry",
          "adjective"
        ],
        [
          "french_fry",
          "concept"
        ],
        [
          "french_fry",
          "food"
        ],
        [
          "french_fry",
          "hierarchyAble"
        ],
        [
          "french_fry",
          "isEdee"
        ],
        [
          "french_fry",
          "isEder"
        ],
        [
          "french_fry",
          "object"
        ],
        [
          "french_fry",
          "property"
        ],
        [
          "french_fry",
          "queryable"
        ],
        [
          "french_fry",
          "theAble"
        ],
        [
          "fruit",
          "food"
        ],
        [
          "fruit",
          "hierarchyAble"
        ],
        [
          "fruit",
          "isEdee"
        ],
        [
          "fruit",
          "isEder"
        ],
        [
          "fruit",
          "object"
        ],
        [
          "fruit",
          "property"
        ],
        [
          "fruit",
          "queryable"
        ],
        [
          "fruit",
          "theAble"
        ],
        [
          "fry",
          "concept"
        ],
        [
          "fry",
          "hierarchyAble"
        ],
        [
          "fry",
          "isEdee"
        ],
        [
          "fry",
          "isEder"
        ],
        [
          "fry",
          "object"
        ],
        [
          "fry",
          "property"
        ],
        [
          "fry",
          "queryable"
        ],
        [
          "fry",
          "theAble"
        ],
        [
          "grill",
          "concept"
        ],
        [
          "grill",
          "hierarchyAble"
        ],
        [
          "grill",
          "isEdee"
        ],
        [
          "grill",
          "isEder"
        ],
        [
          "grill",
          "object"
        ],
        [
          "grill",
          "property"
        ],
        [
          "grill",
          "queryable"
        ],
        [
          "grill",
          "theAble"
        ],
        [
          "hamburger",
          "hierarchyAble"
        ],
        [
          "hamburger",
          "isEdee"
        ],
        [
          "hamburger",
          "isEder"
        ],
        [
          "hamburger",
          "object"
        ],
        [
          "hamburger",
          "property"
        ],
        [
          "hamburger",
          "queryable"
        ],
        [
          "hamburger",
          "sandwich"
        ],
        [
          "hamburger",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "homestyle",
          "hierarchyAble"
        ],
        [
          "homestyle",
          "isEdee"
        ],
        [
          "homestyle",
          "isEder"
        ],
        [
          "homestyle",
          "object"
        ],
        [
          "homestyle",
          "property"
        ],
        [
          "homestyle",
          "queryable"
        ],
        [
          "homestyle",
          "sandwich"
        ],
        [
          "homestyle",
          "theAble"
        ],
        [
          "hot",
          "hierarchyAble"
        ],
        [
          "hot",
          "isEdee"
        ],
        [
          "hot",
          "isEder"
        ],
        [
          "hot",
          "object"
        ],
        [
          "hot",
          "property"
        ],
        [
          "hot",
          "queryable"
        ],
        [
          "hot",
          "theAble"
        ],
        [
          "hot_dog",
          "adjective"
        ],
        [
          "hot_dog",
          "concept"
        ],
        [
          "hot_dog",
          "hierarchyAble"
        ],
        [
          "hot_dog",
          "isEdee"
        ],
        [
          "hot_dog",
          "isEder"
        ],
        [
          "hot_dog",
          "object"
        ],
        [
          "hot_dog",
          "property"
        ],
        [
          "hot_dog",
          "queryable"
        ],
        [
          "hot_dog",
          "sausage"
        ],
        [
          "hot_dog",
          "theAble"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "meat",
          "food"
        ],
        [
          "meat",
          "hierarchyAble"
        ],
        [
          "meat",
          "isEdee"
        ],
        [
          "meat",
          "isEder"
        ],
        [
          "meat",
          "object"
        ],
        [
          "meat",
          "property"
        ],
        [
          "meat",
          "queryable"
        ],
        [
          "meat",
          "theAble"
        ],
        [
          "modifies",
          "verby"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "noun",
          "theAble"
        ],
        [
          "nugget",
          "hierarchyAble"
        ],
        [
          "nugget",
          "isEdee"
        ],
        [
          "nugget",
          "isEder"
        ],
        [
          "nugget",
          "object"
        ],
        [
          "nugget",
          "property"
        ],
        [
          "nugget",
          "queryable"
        ],
        [
          "nugget",
          "sandwich"
        ],
        [
          "nugget",
          "theAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "orange",
          "fruit"
        ],
        [
          "orange",
          "hierarchyAble"
        ],
        [
          "orange",
          "isEdee"
        ],
        [
          "orange",
          "isEder"
        ],
        [
          "orange",
          "object"
        ],
        [
          "orange",
          "property"
        ],
        [
          "orange",
          "queryable"
        ],
        [
          "orange",
          "theAble"
        ],
        [
          "orderNoun",
          "noun"
        ],
        [
          "orderNoun",
          "queryable"
        ],
        [
          "pea",
          "hierarchyAble"
        ],
        [
          "pea",
          "isEdee"
        ],
        [
          "pea",
          "isEder"
        ],
        [
          "pea",
          "object"
        ],
        [
          "pea",
          "property"
        ],
        [
          "pea",
          "queryable"
        ],
        [
          "pea",
          "theAble"
        ],
        [
          "pea",
          "vegetable"
        ],
        [
          "piece",
          "hierarchyAble"
        ],
        [
          "piece",
          "isEdee"
        ],
        [
          "piece",
          "isEder"
        ],
        [
          "piece",
          "object"
        ],
        [
          "piece",
          "property"
        ],
        [
          "piece",
          "queryable"
        ],
        [
          "piece",
          "sandwich"
        ],
        [
          "piece",
          "theAble"
        ],
        [
          "premium",
          "hierarchyAble"
        ],
        [
          "premium",
          "isEdee"
        ],
        [
          "premium",
          "isEder"
        ],
        [
          "premium",
          "object"
        ],
        [
          "premium",
          "property"
        ],
        [
          "premium",
          "queryable"
        ],
        [
          "premium",
          "theAble"
        ],
        [
          "premium_cod",
          "adjective"
        ],
        [
          "premium_cod",
          "concept"
        ],
        [
          "premium_cod",
          "hierarchyAble"
        ],
        [
          "premium_cod",
          "isEdee"
        ],
        [
          "premium_cod",
          "isEder"
        ],
        [
          "premium_cod",
          "object"
        ],
        [
          "premium_cod",
          "property"
        ],
        [
          "premium_cod",
          "queryable"
        ],
        [
          "premium_cod",
          "sandwich"
        ],
        [
          "premium_cod",
          "theAble"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "ranch",
          "hierarchyAble"
        ],
        [
          "ranch",
          "isEdee"
        ],
        [
          "ranch",
          "isEder"
        ],
        [
          "ranch",
          "object"
        ],
        [
          "ranch",
          "property"
        ],
        [
          "ranch",
          "queryable"
        ],
        [
          "ranch",
          "theAble"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "sandwich",
          "concept"
        ],
        [
          "sandwich",
          "food"
        ],
        [
          "sandwich",
          "hierarchyAble"
        ],
        [
          "sandwich",
          "isEdee"
        ],
        [
          "sandwich",
          "isEder"
        ],
        [
          "sandwich",
          "object"
        ],
        [
          "sandwich",
          "property"
        ],
        [
          "sandwich",
          "queryable"
        ],
        [
          "sandwich",
          "theAble"
        ],
        [
          "sausage",
          "hierarchyAble"
        ],
        [
          "sausage",
          "isEdee"
        ],
        [
          "sausage",
          "isEder"
        ],
        [
          "sausage",
          "meat"
        ],
        [
          "sausage",
          "object"
        ],
        [
          "sausage",
          "property"
        ],
        [
          "sausage",
          "queryable"
        ],
        [
          "sausage",
          "theAble"
        ],
        [
          "showOrder",
          "verby"
        ],
        [
          "single",
          "hamburger"
        ],
        [
          "single",
          "hierarchyAble"
        ],
        [
          "single",
          "isEdee"
        ],
        [
          "single",
          "isEder"
        ],
        [
          "single",
          "object"
        ],
        [
          "single",
          "property"
        ],
        [
          "single",
          "queryable"
        ],
        [
          "single",
          "theAble"
        ],
        [
          "spicy",
          "hierarchyAble"
        ],
        [
          "spicy",
          "isEdee"
        ],
        [
          "spicy",
          "isEder"
        ],
        [
          "spicy",
          "object"
        ],
        [
          "spicy",
          "property"
        ],
        [
          "spicy",
          "queryable"
        ],
        [
          "spicy",
          "sandwich"
        ],
        [
          "spicy",
          "theAble"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "strip",
          "isEdee"
        ],
        [
          "strip",
          "isEder"
        ],
        [
          "strip",
          "object"
        ],
        [
          "strip",
          "property"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "sushi",
          "food"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "sushi",
          "isEdee"
        ],
        [
          "sushi",
          "isEder"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "sushi",
          "property"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "triple",
          "hamburger"
        ],
        [
          "triple",
          "hierarchyAble"
        ],
        [
          "triple",
          "isEdee"
        ],
        [
          "triple",
          "isEder"
        ],
        [
          "triple",
          "object"
        ],
        [
          "triple",
          "property"
        ],
        [
          "triple",
          "queryable"
        ],
        [
          "triple",
          "theAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "ultimate",
          "hierarchyAble"
        ],
        [
          "ultimate",
          "isEdee"
        ],
        [
          "ultimate",
          "isEder"
        ],
        [
          "ultimate",
          "object"
        ],
        [
          "ultimate",
          "property"
        ],
        [
          "ultimate",
          "queryable"
        ],
        [
          "ultimate",
          "theAble"
        ],
        [
          "ultimate_chicken_grill",
          "adjective"
        ],
        [
          "ultimate_chicken_grill",
          "concept"
        ],
        [
          "ultimate_chicken_grill",
          "hierarchyAble"
        ],
        [
          "ultimate_chicken_grill",
          "isEdee"
        ],
        [
          "ultimate_chicken_grill",
          "isEder"
        ],
        [
          "ultimate_chicken_grill",
          "object"
        ],
        [
          "ultimate_chicken_grill",
          "property"
        ],
        [
          "ultimate_chicken_grill",
          "queryable"
        ],
        [
          "ultimate_chicken_grill",
          "sandwich"
        ],
        [
          "ultimate_chicken_grill",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "vegetable",
          "food"
        ],
        [
          "vegetable",
          "hierarchyAble"
        ],
        [
          "vegetable",
          "isEdee"
        ],
        [
          "vegetable",
          "isEder"
        ],
        [
          "vegetable",
          "object"
        ],
        [
          "vegetable",
          "property"
        ],
        [
          "vegetable",
          "queryable"
        ],
        [
          "vegetable",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "is",
                0
              ],
              [
                "food",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "food",
              0
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "is",
                0
              ],
              [
                "food",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "a",
              0
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "is",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 5
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. a/0  - \"a\"\n                                   default: True\n                                   marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 0}\n                                   text: a\n                                   word: a\n    1. unknown/0  - \"meals\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 2, 'end': 6}\n                                   text: meals\n                                   value: meals\n                                   word: meals\n    2. is/0  - \"is\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 9}\n                                   text: is\n                                   word: is\n    3. food/0  - \"food\"\n                                   marker: Operator(food/0, [\"Selector(Bridge('{ ...next(operator), value: 'food' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'food' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 11, 'end': 14}\n                                   text: food\n                                   value: food\n                                   word: food\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 2, 'end': 6}, text: meals, value: meals, word: meals})\n\n>>>>>>>>>>>>> Counter 2\n    0. a/0  - \"a\"\n                                   default: True\n                                   marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 0}\n                                   text: a\n                                   word: a\n   *1. unknown/1 (dead) - \"meals\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 2, 'end': 6}\n                                   text: meals\n                                   unknown: True\n                                   value: meals\n                                   word: meals\n    2. is/0  - \"is\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 9}\n                                   text: is\n                                   word: is\n    3. food/0  - \"food\"\n                                   marker: Operator(food/0, [\"Selector(Bridge('{ ...next(operator), value: 'food' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'food' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 11, 'end': 14}\n                                   text: food\n                                   value: food\n                                   word: food\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({marker: Operator(food/0, [\"Selector(Bridge('{ ...next(operator), value: 'food' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'food' }')), variables({}) bridge(bridge)), number: one, range: {'start': 11, 'end': 14}, text: food, value: food, word: food})\n\n>>>>>>>>>>>>> Counter 3\n    0. a/0  - \"a\"\n                                   default: True\n                                   marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 0}\n                                   text: a\n                                   word: a\n    1. unknown/1 (dead) - \"meals\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 2, 'end': 6}\n                                   text: meals\n                                   unknown: True\n                                   value: meals\n                                   word: meals\n    2. is/0  - \"is\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 9}\n                                   text: is\n                                   word: is\n   *3. food/1 (dead) - \"food\"\n                                   dead: True\n                                   marker: Operator(food/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 11, 'end': 14}\n                                   text: food\n                                   value: food\n                                   word: food\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a})\n\n>>>>>>>>>>>>> Counter 4\n   *0. unknown/1 (dead) - \"a meals\"\n                                   concept: True\n                                   dead: True\n                                   determiner: Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a})\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   modifiers: [\n                                   'determiner'\n                                   ]\n                                   number: one\n                                   pullFromContext: False\n                                   range: {'start': 0, 'end': 6}\n                                   text: a meals\n                                   types: [\n                                   'unknown'\n                                   ]\n                                   unknown: True\n                                   value: meals\n                                   wantsValue: True\n                                   word: meals\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 9}\n                                   text: is\n                                   word: is\n    2. food/1 (dead) - \"food\"\n                                   dead: True\n                                   marker: Operator(food/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 11, 'end': 14}\n                                   text: food\n                                   value: food\n                                   word: food\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 8, 'end': 9}, text: is, word: is})\n\n>>>>>>>>>>>>> Counter 5\n   *0. is/1  - \"a meals is food\"\n                                   marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: one\n                                   one: Context({concept: True, dead: True, determiner: Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 0, 'end': 14}, text: a meals, types: ['unknown'], unknown: True, value: meals, wantsValue: True, word: meals})\n                                   range: {'start': 0, 'end': 14}\n                                   text: a meals is food\n                                   two: Context({dead: True, marker: Operator(food/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 11, 'end': 14}, text: food, types: ['food'], value: food, word: food})\n                                   word: is\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, one: Context({concept: True, dead: True, determiner: Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 0, 'end': 14}, text: a meals, types: ['unknown'], unknown: True, value: meals, wantsValue: True, word: meals}), range: {'start': 0, 'end': 14}, text: a meals is food, two: Context({dead: True, marker: Operator(food/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 11, 'end': 14}, text: food, types: ['food'], value: food, word: food}), word: is})\n\n>>>>>>>>>>>>> Counter 6\n   *0. is/2 (dead) - \"a meals is food\"\n                                   dead: True\n                                   marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   one: Context({concept: True, dead: True, determiner: Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 0, 'end': 14}, text: a meals, types: ['unknown'], unknown: True, value: meals, wantsValue: True, word: meals})\n                                   range: {'start': 0, 'end': 14}\n                                   text: a meals is food\n                                   two: Context({dead: True, marker: Operator(food/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 11, 'end': 14}, text: food, types: ['food'], value: food, word: food})\n                                   word: is\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "one",
          "text": "a meals is food",
          "marker": "is",
          "word": "is",
          "range": {
            "start": 0,
            "end": 14
          },
          "one": {
            "number": "one",
            "marker": "unknown",
            "range": {
              "start": 0,
              "end": 14
            },
            "word": "meals",
            "text": "a meals",
            "value": "meals",
            "unknown": true,
            "dead": true,
            "types": [
              "unknown"
            ],
            "pullFromContext": false,
            "concept": true,
            "wantsValue": true,
            "determiner": {
              "marker": "a",
              "default": true,
              "word": "a",
              "text": "a",
              "range": {
                "start": 0,
                "end": 0
              },
              "level": 0
            },
            "modifiers": [
              "determiner"
            ],
            "level": 1
          },
          "two": {
            "value": "food",
            "number": "one",
            "text": "food",
            "marker": "food",
            "word": "food",
            "range": {
              "start": 11,
              "end": 14
            },
            "dead": true,
            "types": [
              "food"
            ],
            "level": 1,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "fastfood#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "a meals is food"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "a",
            0
          ],
          [
            "food",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "a",
            0
          ],
          [
            "food",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "a",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "query": "a meals is food",
      "key": {
        "query": "a meals is food"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "apple",
          "fruit"
        ],
        [
          "apple",
          "hierarchyAble"
        ],
        [
          "apple",
          "isEdee"
        ],
        [
          "apple",
          "isEder"
        ],
        [
          "apple",
          "object"
        ],
        [
          "apple",
          "property"
        ],
        [
          "apple",
          "queryable"
        ],
        [
          "apple",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "asiago",
          "hierarchyAble"
        ],
        [
          "asiago",
          "isEdee"
        ],
        [
          "asiago",
          "isEder"
        ],
        [
          "asiago",
          "object"
        ],
        [
          "asiago",
          "property"
        ],
        [
          "asiago",
          "queryable"
        ],
        [
          "asiago",
          "theAble"
        ],
        [
          "asiago_ranch_chicken_club",
          "adjective"
        ],
        [
          "asiago_ranch_chicken_club",
          "concept"
        ],
        [
          "asiago_ranch_chicken_club",
          "hierarchyAble"
        ],
        [
          "asiago_ranch_chicken_club",
          "isEdee"
        ],
        [
          "asiago_ranch_chicken_club",
          "isEder"
        ],
        [
          "asiago_ranch_chicken_club",
          "object"
        ],
        [
          "asiago_ranch_chicken_club",
          "property"
        ],
        [
          "asiago_ranch_chicken_club",
          "queryable"
        ],
        [
          "asiago_ranch_chicken_club",
          "sandwich"
        ],
        [
          "asiago_ranch_chicken_club",
          "theAble"
        ],
        [
          "bacon",
          "hierarchyAble"
        ],
        [
          "bacon",
          "isEdee"
        ],
        [
          "bacon",
          "isEder"
        ],
        [
          "bacon",
          "object"
        ],
        [
          "bacon",
          "property"
        ],
        [
          "bacon",
          "queryable"
        ],
        [
          "bacon",
          "theAble"
        ],
        [
          "bacon_deluxe",
          "adjective"
        ],
        [
          "bacon_deluxe",
          "concept"
        ],
        [
          "bacon_deluxe",
          "hamburger"
        ],
        [
          "bacon_deluxe",
          "hierarchyAble"
        ],
        [
          "bacon_deluxe",
          "isEdee"
        ],
        [
          "bacon_deluxe",
          "isEder"
        ],
        [
          "bacon_deluxe",
          "object"
        ],
        [
          "bacon_deluxe",
          "property"
        ],
        [
          "bacon_deluxe",
          "queryable"
        ],
        [
          "bacon_deluxe",
          "theAble"
        ],
        [
          "baconater",
          "hamburger"
        ],
        [
          "baconater",
          "hierarchyAble"
        ],
        [
          "baconater",
          "isEdee"
        ],
        [
          "baconater",
          "isEder"
        ],
        [
          "baconater",
          "object"
        ],
        [
          "baconater",
          "property"
        ],
        [
          "baconater",
          "queryable"
        ],
        [
          "baconater",
          "theAble"
        ],
        [
          "banana",
          "fruit"
        ],
        [
          "banana",
          "hierarchyAble"
        ],
        [
          "banana",
          "isEdee"
        ],
        [
          "banana",
          "isEder"
        ],
        [
          "banana",
          "object"
        ],
        [
          "banana",
          "property"
        ],
        [
          "banana",
          "queryable"
        ],
        [
          "banana",
          "theAble"
        ],
        [
          "between",
          "preposition"
        ],
        [
          "brocoli",
          "hierarchyAble"
        ],
        [
          "brocoli",
          "isEdee"
        ],
        [
          "brocoli",
          "isEder"
        ],
        [
          "brocoli",
          "object"
        ],
        [
          "brocoli",
          "property"
        ],
        [
          "brocoli",
          "queryable"
        ],
        [
          "brocoli",
          "theAble"
        ],
        [
          "brocoli",
          "vegetable"
        ],
        [
          "cabbage",
          "hierarchyAble"
        ],
        [
          "cabbage",
          "isEdee"
        ],
        [
          "cabbage",
          "isEder"
        ],
        [
          "cabbage",
          "object"
        ],
        [
          "cabbage",
          "property"
        ],
        [
          "cabbage",
          "queryable"
        ],
        [
          "cabbage",
          "theAble"
        ],
        [
          "cabbage",
          "vegetable"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "carrot",
          "hierarchyAble"
        ],
        [
          "carrot",
          "isEdee"
        ],
        [
          "carrot",
          "isEder"
        ],
        [
          "carrot",
          "object"
        ],
        [
          "carrot",
          "property"
        ],
        [
          "carrot",
          "queryable"
        ],
        [
          "carrot",
          "theAble"
        ],
        [
          "carrot",
          "vegetable"
        ],
        [
          "changes",
          "event"
        ],
        [
          "changes",
          "verby"
        ],
        [
          "chicken",
          "hierarchyAble"
        ],
        [
          "chicken",
          "isEdee"
        ],
        [
          "chicken",
          "isEder"
        ],
        [
          "chicken",
          "object"
        ],
        [
          "chicken",
          "property"
        ],
        [
          "chicken",
          "queryable"
        ],
        [
          "chicken",
          "theAble"
        ],
        [
          "chicken_sandwich",
          "adjective"
        ],
        [
          "chicken_sandwich",
          "concept"
        ],
        [
          "chicken_sandwich",
          "hierarchyAble"
        ],
        [
          "chicken_sandwich",
          "isEdee"
        ],
        [
          "chicken_sandwich",
          "isEder"
        ],
        [
          "chicken_sandwich",
          "object"
        ],
        [
          "chicken_sandwich",
          "property"
        ],
        [
          "chicken_sandwich",
          "queryable"
        ],
        [
          "chicken_sandwich",
          "theAble"
        ],
        [
          "chicken_strip",
          "adjective"
        ],
        [
          "chicken_strip",
          "concept"
        ],
        [
          "chicken_strip",
          "food"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "isEdee"
        ],
        [
          "chicken_strip",
          "isEder"
        ],
        [
          "chicken_strip",
          "object"
        ],
        [
          "chicken_strip",
          "property"
        ],
        [
          "chicken_strip",
          "queryable"
        ],
        [
          "chicken_strip",
          "theAble"
        ],
        [
          "club",
          "concept"
        ],
        [
          "club",
          "hierarchyAble"
        ],
        [
          "club",
          "isEdee"
        ],
        [
          "club",
          "isEder"
        ],
        [
          "club",
          "object"
        ],
        [
          "club",
          "property"
        ],
        [
          "club",
          "queryable"
        ],
        [
          "club",
          "theAble"
        ],
        [
          "cod",
          "concept"
        ],
        [
          "cod",
          "hierarchyAble"
        ],
        [
          "cod",
          "isEdee"
        ],
        [
          "cod",
          "isEder"
        ],
        [
          "cod",
          "object"
        ],
        [
          "cod",
          "property"
        ],
        [
          "cod",
          "queryable"
        ],
        [
          "cod",
          "theAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "countable",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "concept"
        ],
        [
          "deluxe",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "isEdee"
        ],
        [
          "deluxe",
          "isEder"
        ],
        [
          "deluxe",
          "object"
        ],
        [
          "deluxe",
          "property"
        ],
        [
          "deluxe",
          "queryable"
        ],
        [
          "deluxe",
          "theAble"
        ],
        [
          "dog",
          "concept"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "dog",
          "isEdee"
        ],
        [
          "dog",
          "isEder"
        ],
        [
          "dog",
          "object"
        ],
        [
          "dog",
          "property"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "double",
          "hamburger"
        ],
        [
          "double",
          "hierarchyAble"
        ],
        [
          "double",
          "isEdee"
        ],
        [
          "double",
          "isEder"
        ],
        [
          "double",
          "object"
        ],
        [
          "double",
          "property"
        ],
        [
          "double",
          "queryable"
        ],
        [
          "double",
          "theAble"
        ],
        [
          "event",
          "event"
        ],
        [
          "food",
          "countable"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "french",
          "hierarchyAble"
        ],
        [
          "french",
          "isEdee"
        ],
        [
          "french",
          "isEder"
        ],
        [
          "french",
          "object"
        ],
        [
          "french",
          "property"
        ],
        [
          "french",
          "queryable"
        ],
        [
          "french",
          "theAble"
        ],
        [
          "french_fry",
          "adjective"
        ],
        [
          "french_fry",
          "concept"
        ],
        [
          "french_fry",
          "food"
        ],
        [
          "french_fry",
          "hierarchyAble"
        ],
        [
          "french_fry",
          "isEdee"
        ],
        [
          "french_fry",
          "isEder"
        ],
        [
          "french_fry",
          "object"
        ],
        [
          "french_fry",
          "property"
        ],
        [
          "french_fry",
          "queryable"
        ],
        [
          "french_fry",
          "theAble"
        ],
        [
          "fruit",
          "food"
        ],
        [
          "fruit",
          "hierarchyAble"
        ],
        [
          "fruit",
          "isEdee"
        ],
        [
          "fruit",
          "isEder"
        ],
        [
          "fruit",
          "object"
        ],
        [
          "fruit",
          "property"
        ],
        [
          "fruit",
          "queryable"
        ],
        [
          "fruit",
          "theAble"
        ],
        [
          "fry",
          "concept"
        ],
        [
          "fry",
          "hierarchyAble"
        ],
        [
          "fry",
          "isEdee"
        ],
        [
          "fry",
          "isEder"
        ],
        [
          "fry",
          "object"
        ],
        [
          "fry",
          "property"
        ],
        [
          "fry",
          "queryable"
        ],
        [
          "fry",
          "theAble"
        ],
        [
          "grill",
          "concept"
        ],
        [
          "grill",
          "hierarchyAble"
        ],
        [
          "grill",
          "isEdee"
        ],
        [
          "grill",
          "isEder"
        ],
        [
          "grill",
          "object"
        ],
        [
          "grill",
          "property"
        ],
        [
          "grill",
          "queryable"
        ],
        [
          "grill",
          "theAble"
        ],
        [
          "hamburger",
          "hierarchyAble"
        ],
        [
          "hamburger",
          "isEdee"
        ],
        [
          "hamburger",
          "isEder"
        ],
        [
          "hamburger",
          "object"
        ],
        [
          "hamburger",
          "property"
        ],
        [
          "hamburger",
          "queryable"
        ],
        [
          "hamburger",
          "sandwich"
        ],
        [
          "hamburger",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "homestyle",
          "hierarchyAble"
        ],
        [
          "homestyle",
          "isEdee"
        ],
        [
          "homestyle",
          "isEder"
        ],
        [
          "homestyle",
          "object"
        ],
        [
          "homestyle",
          "property"
        ],
        [
          "homestyle",
          "queryable"
        ],
        [
          "homestyle",
          "sandwich"
        ],
        [
          "homestyle",
          "theAble"
        ],
        [
          "hot",
          "hierarchyAble"
        ],
        [
          "hot",
          "isEdee"
        ],
        [
          "hot",
          "isEder"
        ],
        [
          "hot",
          "object"
        ],
        [
          "hot",
          "property"
        ],
        [
          "hot",
          "queryable"
        ],
        [
          "hot",
          "theAble"
        ],
        [
          "hot_dog",
          "adjective"
        ],
        [
          "hot_dog",
          "concept"
        ],
        [
          "hot_dog",
          "hierarchyAble"
        ],
        [
          "hot_dog",
          "isEdee"
        ],
        [
          "hot_dog",
          "isEder"
        ],
        [
          "hot_dog",
          "object"
        ],
        [
          "hot_dog",
          "property"
        ],
        [
          "hot_dog",
          "queryable"
        ],
        [
          "hot_dog",
          "sausage"
        ],
        [
          "hot_dog",
          "theAble"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "meal",
          "food"
        ],
        [
          "meal",
          "hierarchyAble"
        ],
        [
          "meal",
          "isEdee"
        ],
        [
          "meal",
          "isEder"
        ],
        [
          "meal",
          "object"
        ],
        [
          "meal",
          "property"
        ],
        [
          "meal",
          "queryable"
        ],
        [
          "meal",
          "theAble"
        ],
        [
          "meat",
          "food"
        ],
        [
          "meat",
          "hierarchyAble"
        ],
        [
          "meat",
          "isEdee"
        ],
        [
          "meat",
          "isEder"
        ],
        [
          "meat",
          "object"
        ],
        [
          "meat",
          "property"
        ],
        [
          "meat",
          "queryable"
        ],
        [
          "meat",
          "theAble"
        ],
        [
          "modifies",
          "verby"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "noun",
          "theAble"
        ],
        [
          "nugget",
          "hierarchyAble"
        ],
        [
          "nugget",
          "isEdee"
        ],
        [
          "nugget",
          "isEder"
        ],
        [
          "nugget",
          "object"
        ],
        [
          "nugget",
          "property"
        ],
        [
          "nugget",
          "queryable"
        ],
        [
          "nugget",
          "sandwich"
        ],
        [
          "nugget",
          "theAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "orange",
          "fruit"
        ],
        [
          "orange",
          "hierarchyAble"
        ],
        [
          "orange",
          "isEdee"
        ],
        [
          "orange",
          "isEder"
        ],
        [
          "orange",
          "object"
        ],
        [
          "orange",
          "property"
        ],
        [
          "orange",
          "queryable"
        ],
        [
          "orange",
          "theAble"
        ],
        [
          "orderNoun",
          "noun"
        ],
        [
          "orderNoun",
          "queryable"
        ],
        [
          "pea",
          "hierarchyAble"
        ],
        [
          "pea",
          "isEdee"
        ],
        [
          "pea",
          "isEder"
        ],
        [
          "pea",
          "object"
        ],
        [
          "pea",
          "property"
        ],
        [
          "pea",
          "queryable"
        ],
        [
          "pea",
          "theAble"
        ],
        [
          "pea",
          "vegetable"
        ],
        [
          "piece",
          "hierarchyAble"
        ],
        [
          "piece",
          "isEdee"
        ],
        [
          "piece",
          "isEder"
        ],
        [
          "piece",
          "object"
        ],
        [
          "piece",
          "property"
        ],
        [
          "piece",
          "queryable"
        ],
        [
          "piece",
          "sandwich"
        ],
        [
          "piece",
          "theAble"
        ],
        [
          "premium",
          "hierarchyAble"
        ],
        [
          "premium",
          "isEdee"
        ],
        [
          "premium",
          "isEder"
        ],
        [
          "premium",
          "object"
        ],
        [
          "premium",
          "property"
        ],
        [
          "premium",
          "queryable"
        ],
        [
          "premium",
          "theAble"
        ],
        [
          "premium_cod",
          "adjective"
        ],
        [
          "premium_cod",
          "concept"
        ],
        [
          "premium_cod",
          "hierarchyAble"
        ],
        [
          "premium_cod",
          "isEdee"
        ],
        [
          "premium_cod",
          "isEder"
        ],
        [
          "premium_cod",
          "object"
        ],
        [
          "premium_cod",
          "property"
        ],
        [
          "premium_cod",
          "queryable"
        ],
        [
          "premium_cod",
          "sandwich"
        ],
        [
          "premium_cod",
          "theAble"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "ranch",
          "hierarchyAble"
        ],
        [
          "ranch",
          "isEdee"
        ],
        [
          "ranch",
          "isEder"
        ],
        [
          "ranch",
          "object"
        ],
        [
          "ranch",
          "property"
        ],
        [
          "ranch",
          "queryable"
        ],
        [
          "ranch",
          "theAble"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "sandwich",
          "concept"
        ],
        [
          "sandwich",
          "food"
        ],
        [
          "sandwich",
          "hierarchyAble"
        ],
        [
          "sandwich",
          "isEdee"
        ],
        [
          "sandwich",
          "isEder"
        ],
        [
          "sandwich",
          "object"
        ],
        [
          "sandwich",
          "property"
        ],
        [
          "sandwich",
          "queryable"
        ],
        [
          "sandwich",
          "theAble"
        ],
        [
          "sausage",
          "hierarchyAble"
        ],
        [
          "sausage",
          "isEdee"
        ],
        [
          "sausage",
          "isEder"
        ],
        [
          "sausage",
          "meat"
        ],
        [
          "sausage",
          "object"
        ],
        [
          "sausage",
          "property"
        ],
        [
          "sausage",
          "queryable"
        ],
        [
          "sausage",
          "theAble"
        ],
        [
          "showOrder",
          "verby"
        ],
        [
          "single",
          "hamburger"
        ],
        [
          "single",
          "hierarchyAble"
        ],
        [
          "single",
          "isEdee"
        ],
        [
          "single",
          "isEder"
        ],
        [
          "single",
          "object"
        ],
        [
          "single",
          "property"
        ],
        [
          "single",
          "queryable"
        ],
        [
          "single",
          "theAble"
        ],
        [
          "spicy",
          "hierarchyAble"
        ],
        [
          "spicy",
          "isEdee"
        ],
        [
          "spicy",
          "isEder"
        ],
        [
          "spicy",
          "object"
        ],
        [
          "spicy",
          "property"
        ],
        [
          "spicy",
          "queryable"
        ],
        [
          "spicy",
          "sandwich"
        ],
        [
          "spicy",
          "theAble"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "strip",
          "isEdee"
        ],
        [
          "strip",
          "isEder"
        ],
        [
          "strip",
          "object"
        ],
        [
          "strip",
          "property"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "sushi",
          "food"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "sushi",
          "isEdee"
        ],
        [
          "sushi",
          "isEder"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "sushi",
          "property"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "triple",
          "hamburger"
        ],
        [
          "triple",
          "hierarchyAble"
        ],
        [
          "triple",
          "isEdee"
        ],
        [
          "triple",
          "isEder"
        ],
        [
          "triple",
          "object"
        ],
        [
          "triple",
          "property"
        ],
        [
          "triple",
          "queryable"
        ],
        [
          "triple",
          "theAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "ultimate",
          "hierarchyAble"
        ],
        [
          "ultimate",
          "isEdee"
        ],
        [
          "ultimate",
          "isEder"
        ],
        [
          "ultimate",
          "object"
        ],
        [
          "ultimate",
          "property"
        ],
        [
          "ultimate",
          "queryable"
        ],
        [
          "ultimate",
          "theAble"
        ],
        [
          "ultimate_chicken_grill",
          "adjective"
        ],
        [
          "ultimate_chicken_grill",
          "concept"
        ],
        [
          "ultimate_chicken_grill",
          "hierarchyAble"
        ],
        [
          "ultimate_chicken_grill",
          "isEdee"
        ],
        [
          "ultimate_chicken_grill",
          "isEder"
        ],
        [
          "ultimate_chicken_grill",
          "object"
        ],
        [
          "ultimate_chicken_grill",
          "property"
        ],
        [
          "ultimate_chicken_grill",
          "queryable"
        ],
        [
          "ultimate_chicken_grill",
          "sandwich"
        ],
        [
          "ultimate_chicken_grill",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "vegetable",
          "food"
        ],
        [
          "vegetable",
          "hierarchyAble"
        ],
        [
          "vegetable",
          "isEdee"
        ],
        [
          "vegetable",
          "isEder"
        ],
        [
          "vegetable",
          "object"
        ],
        [
          "vegetable",
          "property"
        ],
        [
          "vegetable",
          "queryable"
        ],
        [
          "vegetable",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "is",
                0
              ],
              [
                "a",
                0
              ],
              [
                "meal",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "meal",
              0
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "is",
                0
              ],
              [
                "a",
                0
              ],
              [
                "meal",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "a",
              0
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "is",
                0
              ],
              [
                "a",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "a",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "a",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 6
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. a/0  - \"a\"\n                                   default: True\n                                   marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 0}\n                                   text: a\n                                   word: a\n    1. unknown/0  - \"combo\"\n                                   marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                   range: {'start': 2, 'end': 6}\n                                   text: combo\n                                   value: combo\n                                   word: combo\n    2. is/0  - \"is\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 9}\n                                   text: is\n                                   word: is\n    3. a/0  - \"a\"\n                                   default: True\n                                   marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                   range: {'start': 11, 'end': 11}\n                                   text: a\n                                   word: a\n    4. meal/0  - \"meal\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 13, 'end': 16}\n                                   text: meal\n                                   value: meal\n                                   word: meal\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 2, 'end': 6}, text: combo, value: combo, word: combo})\n\n>>>>>>>>>>>>> Counter 2\n    0. a/0  - \"a\"\n                                   default: True\n                                   marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 0}\n                                   text: a\n                                   word: a\n   *1. unknown/1 (dead) - \"combo\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 2, 'end': 6}\n                                   text: combo\n                                   unknown: True\n                                   value: combo\n                                   word: combo\n    2. is/0  - \"is\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 9}\n                                   text: is\n                                   word: is\n    3. a/0  - \"a\"\n                                   default: True\n                                   marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                   range: {'start': 11, 'end': 11}\n                                   text: a\n                                   word: a\n    4. meal/0  - \"meal\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 13, 'end': 16}\n                                   text: meal\n                                   value: meal\n                                   word: meal\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge)), number: one, range: {'start': 13, 'end': 16}, text: meal, value: meal, word: meal})\n\n>>>>>>>>>>>>> Counter 3\n    0. a/0  - \"a\"\n                                   default: True\n                                   marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                   range: {'start': 0, 'end': 0}\n                                   text: a\n                                   word: a\n    1. unknown/1 (dead) - \"combo\"\n                                   dead: True\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   range: {'start': 2, 'end': 6}\n                                   text: combo\n                                   unknown: True\n                                   value: combo\n                                   word: combo\n    2. is/0  - \"is\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 9}\n                                   text: is\n                                   word: is\n    3. a/0  - \"a\"\n                                   default: True\n                                   marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                   range: {'start': 11, 'end': 11}\n                                   text: a\n                                   word: a\n   *4. meal/1 (dead) - \"meal\"\n                                   dead: True\n                                   marker: Operator(meal/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 13, 'end': 16}\n                                   text: meal\n                                   value: meal\n                                   word: meal\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a})\n\n>>>>>>>>>>>>> Counter 4\n   *0. unknown/1 (dead) - \"a combo\"\n                                   concept: True\n                                   dead: True\n                                   determiner: Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a})\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   modifiers: [\n                                   'determiner'\n                                   ]\n                                   number: one\n                                   pullFromContext: False\n                                   range: {'start': 0, 'end': 6}\n                                   text: a combo\n                                   types: [\n                                   'unknown'\n                                   ]\n                                   unknown: True\n                                   value: combo\n                                   wantsValue: True\n                                   word: combo\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 9}\n                                   text: is\n                                   word: is\n    2. a/0  - \"a\"\n                                   default: True\n                                   marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                   range: {'start': 11, 'end': 11}\n                                   text: a\n                                   word: a\n    3. meal/1 (dead) - \"meal\"\n                                   dead: True\n                                   marker: Operator(meal/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 13, 'end': 16}\n                                   text: meal\n                                   value: meal\n                                   word: meal\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 11}, text: a, word: a})\n\n>>>>>>>>>>>>> Counter 5\n    0. unknown/1 (dead) - \"a combo\"\n                                   concept: True\n                                   dead: True\n                                   determiner: Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a})\n                                   marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   modifiers: [\n                                   'determiner'\n                                   ]\n                                   number: one\n                                   pullFromContext: False\n                                   range: {'start': 0, 'end': 6}\n                                   text: a combo\n                                   types: [\n                                   'unknown'\n                                   ]\n                                   unknown: True\n                                   value: combo\n                                   wantsValue: True\n                                   word: combo\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 8, 'end': 9}\n                                   text: is\n                                   word: is\n   *2. meal/1 (dead) - \"a meal\"\n                                   concept: True\n                                   dead: True\n                                   determiner: Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 11}, text: a, word: a})\n                                   marker: Operator(meal/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   modifiers: [\n                                   'determiner'\n                                   ]\n                                   number: one\n                                   pullFromContext: False\n                                   range: {'start': 11, 'end': 16}\n                                   text: a meal\n                                   types: [\n                                   'meal'\n                                   ]\n                                   value: meal\n                                   wantsValue: True\n                                   word: meal\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 8, 'end': 9}, text: is, word: is})\n\n>>>>>>>>>>>>> Counter 6\n   *0. is/1  - \"a combo is a meal\"\n                                   marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: one\n                                   one: Context({concept: True, dead: True, determiner: Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 0, 'end': 16}, text: a combo, types: ['unknown'], unknown: True, value: combo, wantsValue: True, word: combo})\n                                   range: {'start': 0, 'end': 16}\n                                   text: a combo is a meal\n                                   two: Context({concept: True, dead: True, determiner: Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 11}, text: a, word: a}), marker: Operator(meal/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 11, 'end': 16}, text: a meal, types: ['meal'], value: meal, wantsValue: True, word: meal})\n                                   word: is\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, one: Context({concept: True, dead: True, determiner: Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 0, 'end': 16}, text: a combo, types: ['unknown'], unknown: True, value: combo, wantsValue: True, word: combo}), range: {'start': 0, 'end': 16}, text: a combo is a meal, two: Context({concept: True, dead: True, determiner: Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 11}, text: a, word: a}), marker: Operator(meal/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 11, 'end': 16}, text: a meal, types: ['meal'], value: meal, wantsValue: True, word: meal}), word: is})\n\n>>>>>>>>>>>>> Counter 7\n   *0. is/2 (dead) - \"a combo is a meal\"\n                                   dead: True\n                                   marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   one: Context({concept: True, dead: True, determiner: Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a}), marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 0, 'end': 16}, text: a combo, types: ['unknown'], unknown: True, value: combo, wantsValue: True, word: combo})\n                                   range: {'start': 0, 'end': 16}\n                                   text: a combo is a meal\n                                   two: Context({concept: True, dead: True, determiner: Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 11}, text: a, word: a}), marker: Operator(meal/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 11, 'end': 16}, text: a meal, types: ['meal'], value: meal, wantsValue: True, word: meal})\n                                   word: is\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "one",
          "text": "a combo is a meal",
          "marker": "is",
          "word": "is",
          "range": {
            "start": 0,
            "end": 16
          },
          "one": {
            "number": "one",
            "marker": "unknown",
            "range": {
              "start": 0,
              "end": 16
            },
            "word": "combo",
            "text": "a combo",
            "value": "combo",
            "unknown": true,
            "dead": true,
            "types": [
              "unknown"
            ],
            "pullFromContext": false,
            "concept": true,
            "wantsValue": true,
            "determiner": {
              "marker": "a",
              "default": true,
              "word": "a",
              "text": "a",
              "range": {
                "start": 0,
                "end": 0
              },
              "level": 0
            },
            "modifiers": [
              "determiner"
            ],
            "level": 1
          },
          "two": {
            "value": "meal",
            "number": "one",
            "text": "a meal",
            "marker": "meal",
            "word": "meal",
            "range": {
              "start": 11,
              "end": 16
            },
            "dead": true,
            "types": [
              "meal"
            ],
            "pullFromContext": false,
            "concept": true,
            "wantsValue": true,
            "determiner": {
              "marker": "a",
              "default": true,
              "word": "a",
              "text": "a",
              "range": {
                "start": 11,
                "end": 11
              },
              "level": 0
            },
            "modifiers": [
              "determiner"
            ],
            "level": 1
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "fastfood#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "a combo is a meal"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "a",
            0
          ],
          [
            "is",
            0
          ],
          [
            "meal",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "a",
            0
          ],
          [
            "is",
            0
          ],
          [
            "meal",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "a",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "query": "a combo is a meal",
      "key": {
        "query": "a combo is a meal"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "adjective",
          "adjective"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "apple",
          "fruit"
        ],
        [
          "apple",
          "hierarchyAble"
        ],
        [
          "apple",
          "isEdee"
        ],
        [
          "apple",
          "isEder"
        ],
        [
          "apple",
          "object"
        ],
        [
          "apple",
          "property"
        ],
        [
          "apple",
          "queryable"
        ],
        [
          "apple",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "asiago",
          "hierarchyAble"
        ],
        [
          "asiago",
          "isEdee"
        ],
        [
          "asiago",
          "isEder"
        ],
        [
          "asiago",
          "object"
        ],
        [
          "asiago",
          "property"
        ],
        [
          "asiago",
          "queryable"
        ],
        [
          "asiago",
          "theAble"
        ],
        [
          "asiago_ranch_chicken_club",
          "adjective"
        ],
        [
          "asiago_ranch_chicken_club",
          "concept"
        ],
        [
          "asiago_ranch_chicken_club",
          "hierarchyAble"
        ],
        [
          "asiago_ranch_chicken_club",
          "isEdee"
        ],
        [
          "asiago_ranch_chicken_club",
          "isEder"
        ],
        [
          "asiago_ranch_chicken_club",
          "object"
        ],
        [
          "asiago_ranch_chicken_club",
          "property"
        ],
        [
          "asiago_ranch_chicken_club",
          "queryable"
        ],
        [
          "asiago_ranch_chicken_club",
          "sandwich"
        ],
        [
          "asiago_ranch_chicken_club",
          "theAble"
        ],
        [
          "bacon",
          "hierarchyAble"
        ],
        [
          "bacon",
          "isEdee"
        ],
        [
          "bacon",
          "isEder"
        ],
        [
          "bacon",
          "object"
        ],
        [
          "bacon",
          "property"
        ],
        [
          "bacon",
          "queryable"
        ],
        [
          "bacon",
          "theAble"
        ],
        [
          "bacon_deluxe",
          "adjective"
        ],
        [
          "bacon_deluxe",
          "concept"
        ],
        [
          "bacon_deluxe",
          "hamburger"
        ],
        [
          "bacon_deluxe",
          "hierarchyAble"
        ],
        [
          "bacon_deluxe",
          "isEdee"
        ],
        [
          "bacon_deluxe",
          "isEder"
        ],
        [
          "bacon_deluxe",
          "object"
        ],
        [
          "bacon_deluxe",
          "property"
        ],
        [
          "bacon_deluxe",
          "queryable"
        ],
        [
          "bacon_deluxe",
          "theAble"
        ],
        [
          "baconater",
          "hamburger"
        ],
        [
          "baconater",
          "hierarchyAble"
        ],
        [
          "baconater",
          "isEdee"
        ],
        [
          "baconater",
          "isEder"
        ],
        [
          "baconater",
          "object"
        ],
        [
          "baconater",
          "property"
        ],
        [
          "baconater",
          "queryable"
        ],
        [
          "baconater",
          "theAble"
        ],
        [
          "banana",
          "fruit"
        ],
        [
          "banana",
          "hierarchyAble"
        ],
        [
          "banana",
          "isEdee"
        ],
        [
          "banana",
          "isEder"
        ],
        [
          "banana",
          "object"
        ],
        [
          "banana",
          "property"
        ],
        [
          "banana",
          "queryable"
        ],
        [
          "banana",
          "theAble"
        ],
        [
          "between",
          "preposition"
        ],
        [
          "brocoli",
          "hierarchyAble"
        ],
        [
          "brocoli",
          "isEdee"
        ],
        [
          "brocoli",
          "isEder"
        ],
        [
          "brocoli",
          "object"
        ],
        [
          "brocoli",
          "property"
        ],
        [
          "brocoli",
          "queryable"
        ],
        [
          "brocoli",
          "theAble"
        ],
        [
          "brocoli",
          "vegetable"
        ],
        [
          "cabbage",
          "hierarchyAble"
        ],
        [
          "cabbage",
          "isEdee"
        ],
        [
          "cabbage",
          "isEder"
        ],
        [
          "cabbage",
          "object"
        ],
        [
          "cabbage",
          "property"
        ],
        [
          "cabbage",
          "queryable"
        ],
        [
          "cabbage",
          "theAble"
        ],
        [
          "cabbage",
          "vegetable"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "carrot",
          "hierarchyAble"
        ],
        [
          "carrot",
          "isEdee"
        ],
        [
          "carrot",
          "isEder"
        ],
        [
          "carrot",
          "object"
        ],
        [
          "carrot",
          "property"
        ],
        [
          "carrot",
          "queryable"
        ],
        [
          "carrot",
          "theAble"
        ],
        [
          "carrot",
          "vegetable"
        ],
        [
          "changes",
          "event"
        ],
        [
          "changes",
          "verby"
        ],
        [
          "chicken",
          "hierarchyAble"
        ],
        [
          "chicken",
          "isEdee"
        ],
        [
          "chicken",
          "isEder"
        ],
        [
          "chicken",
          "object"
        ],
        [
          "chicken",
          "property"
        ],
        [
          "chicken",
          "queryable"
        ],
        [
          "chicken",
          "theAble"
        ],
        [
          "chicken_sandwich",
          "adjective"
        ],
        [
          "chicken_sandwich",
          "concept"
        ],
        [
          "chicken_sandwich",
          "hierarchyAble"
        ],
        [
          "chicken_sandwich",
          "isEdee"
        ],
        [
          "chicken_sandwich",
          "isEder"
        ],
        [
          "chicken_sandwich",
          "object"
        ],
        [
          "chicken_sandwich",
          "property"
        ],
        [
          "chicken_sandwich",
          "queryable"
        ],
        [
          "chicken_sandwich",
          "theAble"
        ],
        [
          "chicken_strip",
          "adjective"
        ],
        [
          "chicken_strip",
          "concept"
        ],
        [
          "chicken_strip",
          "food"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "isEdee"
        ],
        [
          "chicken_strip",
          "isEder"
        ],
        [
          "chicken_strip",
          "object"
        ],
        [
          "chicken_strip",
          "property"
        ],
        [
          "chicken_strip",
          "queryable"
        ],
        [
          "chicken_strip",
          "theAble"
        ],
        [
          "club",
          "concept"
        ],
        [
          "club",
          "hierarchyAble"
        ],
        [
          "club",
          "isEdee"
        ],
        [
          "club",
          "isEder"
        ],
        [
          "club",
          "object"
        ],
        [
          "club",
          "property"
        ],
        [
          "club",
          "queryable"
        ],
        [
          "club",
          "theAble"
        ],
        [
          "cod",
          "concept"
        ],
        [
          "cod",
          "hierarchyAble"
        ],
        [
          "cod",
          "isEdee"
        ],
        [
          "cod",
          "isEder"
        ],
        [
          "cod",
          "object"
        ],
        [
          "cod",
          "property"
        ],
        [
          "cod",
          "queryable"
        ],
        [
          "cod",
          "theAble"
        ],
        [
          "combo",
          "hierarchyAble"
        ],
        [
          "combo",
          "isEdee"
        ],
        [
          "combo",
          "isEder"
        ],
        [
          "combo",
          "meal"
        ],
        [
          "combo",
          "object"
        ],
        [
          "combo",
          "property"
        ],
        [
          "combo",
          "queryable"
        ],
        [
          "combo",
          "theAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "countable",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "concept"
        ],
        [
          "deluxe",
          "hierarchyAble"
        ],
        [
          "deluxe",
          "isEdee"
        ],
        [
          "deluxe",
          "isEder"
        ],
        [
          "deluxe",
          "object"
        ],
        [
          "deluxe",
          "property"
        ],
        [
          "deluxe",
          "queryable"
        ],
        [
          "deluxe",
          "theAble"
        ],
        [
          "dog",
          "concept"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "dog",
          "isEdee"
        ],
        [
          "dog",
          "isEder"
        ],
        [
          "dog",
          "object"
        ],
        [
          "dog",
          "property"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "double",
          "hamburger"
        ],
        [
          "double",
          "hierarchyAble"
        ],
        [
          "double",
          "isEdee"
        ],
        [
          "double",
          "isEder"
        ],
        [
          "double",
          "object"
        ],
        [
          "double",
          "property"
        ],
        [
          "double",
          "queryable"
        ],
        [
          "double",
          "theAble"
        ],
        [
          "event",
          "event"
        ],
        [
          "food",
          "countable"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "french",
          "hierarchyAble"
        ],
        [
          "french",
          "isEdee"
        ],
        [
          "french",
          "isEder"
        ],
        [
          "french",
          "object"
        ],
        [
          "french",
          "property"
        ],
        [
          "french",
          "queryable"
        ],
        [
          "french",
          "theAble"
        ],
        [
          "french_fry",
          "adjective"
        ],
        [
          "french_fry",
          "concept"
        ],
        [
          "french_fry",
          "food"
        ],
        [
          "french_fry",
          "hierarchyAble"
        ],
        [
          "french_fry",
          "isEdee"
        ],
        [
          "french_fry",
          "isEder"
        ],
        [
          "french_fry",
          "object"
        ],
        [
          "french_fry",
          "property"
        ],
        [
          "french_fry",
          "queryable"
        ],
        [
          "french_fry",
          "theAble"
        ],
        [
          "fruit",
          "food"
        ],
        [
          "fruit",
          "hierarchyAble"
        ],
        [
          "fruit",
          "isEdee"
        ],
        [
          "fruit",
          "isEder"
        ],
        [
          "fruit",
          "object"
        ],
        [
          "fruit",
          "property"
        ],
        [
          "fruit",
          "queryable"
        ],
        [
          "fruit",
          "theAble"
        ],
        [
          "fry",
          "concept"
        ],
        [
          "fry",
          "hierarchyAble"
        ],
        [
          "fry",
          "isEdee"
        ],
        [
          "fry",
          "isEder"
        ],
        [
          "fry",
          "object"
        ],
        [
          "fry",
          "property"
        ],
        [
          "fry",
          "queryable"
        ],
        [
          "fry",
          "theAble"
        ],
        [
          "grill",
          "concept"
        ],
        [
          "grill",
          "hierarchyAble"
        ],
        [
          "grill",
          "isEdee"
        ],
        [
          "grill",
          "isEder"
        ],
        [
          "grill",
          "object"
        ],
        [
          "grill",
          "property"
        ],
        [
          "grill",
          "queryable"
        ],
        [
          "grill",
          "theAble"
        ],
        [
          "hamburger",
          "hierarchyAble"
        ],
        [
          "hamburger",
          "isEdee"
        ],
        [
          "hamburger",
          "isEder"
        ],
        [
          "hamburger",
          "object"
        ],
        [
          "hamburger",
          "property"
        ],
        [
          "hamburger",
          "queryable"
        ],
        [
          "hamburger",
          "sandwich"
        ],
        [
          "hamburger",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "homestyle",
          "hierarchyAble"
        ],
        [
          "homestyle",
          "isEdee"
        ],
        [
          "homestyle",
          "isEder"
        ],
        [
          "homestyle",
          "object"
        ],
        [
          "homestyle",
          "property"
        ],
        [
          "homestyle",
          "queryable"
        ],
        [
          "homestyle",
          "sandwich"
        ],
        [
          "homestyle",
          "theAble"
        ],
        [
          "hot",
          "hierarchyAble"
        ],
        [
          "hot",
          "isEdee"
        ],
        [
          "hot",
          "isEder"
        ],
        [
          "hot",
          "object"
        ],
        [
          "hot",
          "property"
        ],
        [
          "hot",
          "queryable"
        ],
        [
          "hot",
          "theAble"
        ],
        [
          "hot_dog",
          "adjective"
        ],
        [
          "hot_dog",
          "concept"
        ],
        [
          "hot_dog",
          "hierarchyAble"
        ],
        [
          "hot_dog",
          "isEdee"
        ],
        [
          "hot_dog",
          "isEder"
        ],
        [
          "hot_dog",
          "object"
        ],
        [
          "hot_dog",
          "property"
        ],
        [
          "hot_dog",
          "queryable"
        ],
        [
          "hot_dog",
          "sausage"
        ],
        [
          "hot_dog",
          "theAble"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "is",
          "verby"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "meal",
          "food"
        ],
        [
          "meal",
          "hierarchyAble"
        ],
        [
          "meal",
          "isEdee"
        ],
        [
          "meal",
          "isEder"
        ],
        [
          "meal",
          "object"
        ],
        [
          "meal",
          "property"
        ],
        [
          "meal",
          "queryable"
        ],
        [
          "meal",
          "theAble"
        ],
        [
          "meat",
          "food"
        ],
        [
          "meat",
          "hierarchyAble"
        ],
        [
          "meat",
          "isEdee"
        ],
        [
          "meat",
          "isEder"
        ],
        [
          "meat",
          "object"
        ],
        [
          "meat",
          "property"
        ],
        [
          "meat",
          "queryable"
        ],
        [
          "meat",
          "theAble"
        ],
        [
          "modifies",
          "verby"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "noun",
          "theAble"
        ],
        [
          "nugget",
          "hierarchyAble"
        ],
        [
          "nugget",
          "isEdee"
        ],
        [
          "nugget",
          "isEder"
        ],
        [
          "nugget",
          "object"
        ],
        [
          "nugget",
          "property"
        ],
        [
          "nugget",
          "queryable"
        ],
        [
          "nugget",
          "sandwich"
        ],
        [
          "nugget",
          "theAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "orange",
          "fruit"
        ],
        [
          "orange",
          "hierarchyAble"
        ],
        [
          "orange",
          "isEdee"
        ],
        [
          "orange",
          "isEder"
        ],
        [
          "orange",
          "object"
        ],
        [
          "orange",
          "property"
        ],
        [
          "orange",
          "queryable"
        ],
        [
          "orange",
          "theAble"
        ],
        [
          "orderNoun",
          "noun"
        ],
        [
          "orderNoun",
          "queryable"
        ],
        [
          "pea",
          "hierarchyAble"
        ],
        [
          "pea",
          "isEdee"
        ],
        [
          "pea",
          "isEder"
        ],
        [
          "pea",
          "object"
        ],
        [
          "pea",
          "property"
        ],
        [
          "pea",
          "queryable"
        ],
        [
          "pea",
          "theAble"
        ],
        [
          "pea",
          "vegetable"
        ],
        [
          "piece",
          "hierarchyAble"
        ],
        [
          "piece",
          "isEdee"
        ],
        [
          "piece",
          "isEder"
        ],
        [
          "piece",
          "object"
        ],
        [
          "piece",
          "property"
        ],
        [
          "piece",
          "queryable"
        ],
        [
          "piece",
          "sandwich"
        ],
        [
          "piece",
          "theAble"
        ],
        [
          "premium",
          "hierarchyAble"
        ],
        [
          "premium",
          "isEdee"
        ],
        [
          "premium",
          "isEder"
        ],
        [
          "premium",
          "object"
        ],
        [
          "premium",
          "property"
        ],
        [
          "premium",
          "queryable"
        ],
        [
          "premium",
          "theAble"
        ],
        [
          "premium_cod",
          "adjective"
        ],
        [
          "premium_cod",
          "concept"
        ],
        [
          "premium_cod",
          "hierarchyAble"
        ],
        [
          "premium_cod",
          "isEdee"
        ],
        [
          "premium_cod",
          "isEder"
        ],
        [
          "premium_cod",
          "object"
        ],
        [
          "premium_cod",
          "property"
        ],
        [
          "premium_cod",
          "queryable"
        ],
        [
          "premium_cod",
          "sandwich"
        ],
        [
          "premium_cod",
          "theAble"
        ],
        [
          "preposition",
          "preposition"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "punctuation",
          "punctuation"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "punctuation"
        ],
        [
          "ranch",
          "hierarchyAble"
        ],
        [
          "ranch",
          "isEdee"
        ],
        [
          "ranch",
          "isEder"
        ],
        [
          "ranch",
          "object"
        ],
        [
          "ranch",
          "property"
        ],
        [
          "ranch",
          "queryable"
        ],
        [
          "ranch",
          "theAble"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "reason",
          "queryable"
        ],
        [
          "reason",
          "theAble"
        ],
        [
          "sandwich",
          "concept"
        ],
        [
          "sandwich",
          "food"
        ],
        [
          "sandwich",
          "hierarchyAble"
        ],
        [
          "sandwich",
          "isEdee"
        ],
        [
          "sandwich",
          "isEder"
        ],
        [
          "sandwich",
          "object"
        ],
        [
          "sandwich",
          "property"
        ],
        [
          "sandwich",
          "queryable"
        ],
        [
          "sandwich",
          "theAble"
        ],
        [
          "sausage",
          "hierarchyAble"
        ],
        [
          "sausage",
          "isEdee"
        ],
        [
          "sausage",
          "isEder"
        ],
        [
          "sausage",
          "meat"
        ],
        [
          "sausage",
          "object"
        ],
        [
          "sausage",
          "property"
        ],
        [
          "sausage",
          "queryable"
        ],
        [
          "sausage",
          "theAble"
        ],
        [
          "showOrder",
          "verby"
        ],
        [
          "single",
          "hamburger"
        ],
        [
          "single",
          "hierarchyAble"
        ],
        [
          "single",
          "isEdee"
        ],
        [
          "single",
          "isEder"
        ],
        [
          "single",
          "object"
        ],
        [
          "single",
          "property"
        ],
        [
          "single",
          "queryable"
        ],
        [
          "single",
          "theAble"
        ],
        [
          "spicy",
          "hierarchyAble"
        ],
        [
          "spicy",
          "isEdee"
        ],
        [
          "spicy",
          "isEder"
        ],
        [
          "spicy",
          "object"
        ],
        [
          "spicy",
          "property"
        ],
        [
          "spicy",
          "queryable"
        ],
        [
          "spicy",
          "sandwich"
        ],
        [
          "spicy",
          "theAble"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "strip",
          "isEdee"
        ],
        [
          "strip",
          "isEder"
        ],
        [
          "strip",
          "object"
        ],
        [
          "strip",
          "property"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "sushi",
          "food"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "sushi",
          "isEdee"
        ],
        [
          "sushi",
          "isEder"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "sushi",
          "property"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "triple",
          "hamburger"
        ],
        [
          "triple",
          "hierarchyAble"
        ],
        [
          "triple",
          "isEdee"
        ],
        [
          "triple",
          "isEder"
        ],
        [
          "triple",
          "object"
        ],
        [
          "triple",
          "property"
        ],
        [
          "triple",
          "queryable"
        ],
        [
          "triple",
          "theAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "ultimate",
          "hierarchyAble"
        ],
        [
          "ultimate",
          "isEdee"
        ],
        [
          "ultimate",
          "isEder"
        ],
        [
          "ultimate",
          "object"
        ],
        [
          "ultimate",
          "property"
        ],
        [
          "ultimate",
          "queryable"
        ],
        [
          "ultimate",
          "theAble"
        ],
        [
          "ultimate_chicken_grill",
          "adjective"
        ],
        [
          "ultimate_chicken_grill",
          "concept"
        ],
        [
          "ultimate_chicken_grill",
          "hierarchyAble"
        ],
        [
          "ultimate_chicken_grill",
          "isEdee"
        ],
        [
          "ultimate_chicken_grill",
          "isEder"
        ],
        [
          "ultimate_chicken_grill",
          "object"
        ],
        [
          "ultimate_chicken_grill",
          "property"
        ],
        [
          "ultimate_chicken_grill",
          "queryable"
        ],
        [
          "ultimate_chicken_grill",
          "sandwich"
        ],
        [
          "ultimate_chicken_grill",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "vegetable",
          "food"
        ],
        [
          "vegetable",
          "hierarchyAble"
        ],
        [
          "vegetable",
          "isEdee"
        ],
        [
          "vegetable",
          "isEder"
        ],
        [
          "vegetable",
          "object"
        ],
        [
          "vegetable",
          "property"
        ],
        [
          "vegetable",
          "queryable"
        ],
        [
          "vegetable",
          "theAble"
        ],
        [
          "verby",
          "verby"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "single",
              0
            ],
            "ops": [
              [
                "single",
                0
              ],
              [
                "double",
                0
              ],
              [
                "triple",
                0
              ],
              [
                "baconater",
                0
              ],
              [
                "bacon",
                0
              ],
              [
                "deluxe",
                0
              ],
              [
                "spicy",
                0
              ],
              [
                "homestyle",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "meal",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "bacon_deluxe",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "double",
              0
            ],
            "ops": [
              [
                "double",
                0
              ],
              [
                "triple",
                0
              ],
              [
                "baconater",
                0
              ],
              [
                "bacon",
                0
              ],
              [
                "deluxe",
                0
              ],
              [
                "spicy",
                0
              ],
              [
                "homestyle",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "meal",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "bacon_deluxe",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "triple",
              0
            ],
            "ops": [
              [
                "triple",
                0
              ],
              [
                "baconater",
                0
              ],
              [
                "bacon",
                0
              ],
              [
                "deluxe",
                0
              ],
              [
                "spicy",
                0
              ],
              [
                "homestyle",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "meal",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "bacon_deluxe",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "baconater",
              0
            ],
            "ops": [
              [
                "baconater",
                0
              ],
              [
                "bacon",
                0
              ],
              [
                "deluxe",
                0
              ],
              [
                "spicy",
                0
              ],
              [
                "homestyle",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "meal",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "bacon_deluxe",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "bacon_deluxe",
              0
            ],
            "ops": [
              [
                "bacon",
                0
              ],
              [
                "bacon_deluxe",
                0
              ],
              [
                "deluxe",
                0
              ],
              [
                "spicy",
                0
              ],
              [
                "homestyle",
                0
              ],
              [
                "list",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "meal",
                0
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "spicy",
              0
            ],
            "ops": [
              [
                "spicy",
                0
              ],
              [
                "homestyle",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "meal",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 6
          },
          {
            "op": [
              "homestyle",
              0
            ],
            "ops": [
              [
                "homestyle",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "meal",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 7
          },
          {
            "op": [
              "premium_cod",
              0
            ],
            "ops": [
              [
                "list",
                0
              ],
              [
                "premium",
                0
              ],
              [
                "cod",
                0
              ],
              [
                "premium_cod",
                0
              ],
              [
                "is",
                0
              ],
              [
                "meal",
                0
              ]
            ],
            "counter": 8
          },
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "meal",
                0
              ],
              [
                "list",
                0
              ]
            ],
            "counter": 9
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "meal",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 10
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "meal",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 11
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "meal",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 12
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "meal",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 13
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "meal",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 14
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "meal",
                0
              ],
              [
                "list",
                1
              ]
            ],
            "counter": 15
          },
          {
            "op": [
              "meal",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "meal",
                0
              ]
            ],
            "counter": 16
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 17
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 18
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. single/0  - \"single\"\n                                   marker: Operator(single/0, [\"Selector(Bridge('{ ...next(operator), value: 'single' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'single' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   value: single\n                                   word: single\n    1. double/0  - \"double\"\n                                   marker: Operator(double/0, [\"Selector(Bridge('{ ...next(operator), value: 'double' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'double' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   value: double\n                                   word: double\n    2. triple/0  - \"triple\"\n                                   marker: Operator(triple/0, [\"Selector(Bridge('{ ...next(operator), value: 'triple' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'triple' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   value: triple\n                                   word: triple\n    3. baconater/0  - \"baconater\"\n                                   marker: Operator(baconater/0, [\"Selector(Bridge('{ ...next(operator), value: 'baconater' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'baconater' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   value: baconater\n                                   word: baconater\n    4. bacon/0  - \"bacon\"\n                                   marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge))\n                                   range: {'start': 31, 'end': 35}\n                                   text: bacon\n                                   value: bacon\n                                   word: bacon\n    5. deluxe/0  - \"deluxe\"\n                                   marker: Operator(deluxe/0, [\"Selector(Bridge('{ ...next(operator), value: 'deluxe' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'deluxe' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 37, 'end': 42}\n                                   text: deluxe\n                                   value: deluxe\n                                   word: deluxe\n    6. spicy/0  - \"spicy\"\n                                   marker: Operator(spicy/0, [\"Selector(Bridge('{ ...next(operator), value: 'spicy' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'spicy' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 44, 'end': 48}\n                                   text: spicy\n                                   value: spicy\n                                   word: spicy\n    7. homestyle/0  - \"homestyle\"\n                                   marker: Operator(homestyle/0, [\"Selector(Bridge('{ ...next(operator), value: 'homestyle' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'homestyle' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 50, 'end': 58}\n                                   text: homestyle\n                                   value: homestyle\n                                   word: homestyle\n    8. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({}) bridge(bridge))\n                                   range: {'start': 60, 'end': 62}\n                                   text: and\n                                   word: and\n    9. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 64, 'end': 70}\n                                   text: premium\n                                   value: premium\n                                   word: premium\n    10. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 72, 'end': 74}\n                                   text: cod\n                                   value: cod\n                                   word: cod\n    11. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n    12. meal/0  - \"meals\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(single/0, [\"Selector(Bridge('{ ...next(operator), value: 'single' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'single' }')), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 5}, text: single, value: single, word: single})\n\n>>>>>>>>>>>>> Counter 2\n   *0. single/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   value: single\n                                   word: single\n    1. double/0  - \"double\"\n                                   marker: Operator(double/0, [\"Selector(Bridge('{ ...next(operator), value: 'double' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'double' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   value: double\n                                   word: double\n    2. triple/0  - \"triple\"\n                                   marker: Operator(triple/0, [\"Selector(Bridge('{ ...next(operator), value: 'triple' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'triple' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   value: triple\n                                   word: triple\n    3. baconater/0  - \"baconater\"\n                                   marker: Operator(baconater/0, [\"Selector(Bridge('{ ...next(operator), value: 'baconater' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'baconater' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   value: baconater\n                                   word: baconater\n    4. bacon/0  - \"bacon\"\n                                   marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge))\n                                   range: {'start': 31, 'end': 35}\n                                   text: bacon\n                                   types: [\n                                   'bacon'\n                                   ]\n                                   value: bacon\n                                   word: bacon\n    5. deluxe/0  - \"deluxe\"\n                                   marker: Operator(deluxe/0, [\"Selector(Bridge('{ ...next(operator), value: 'deluxe' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'deluxe' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 37, 'end': 42}\n                                   text: deluxe\n                                   types: [\n                                   'deluxe'\n                                   ]\n                                   value: deluxe\n                                   word: deluxe\n    6. spicy/0  - \"spicy\"\n                                   marker: Operator(spicy/0, [\"Selector(Bridge('{ ...next(operator), value: 'spicy' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'spicy' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 44, 'end': 48}\n                                   text: spicy\n                                   value: spicy\n                                   word: spicy\n    7. homestyle/0  - \"homestyle\"\n                                   marker: Operator(homestyle/0, [\"Selector(Bridge('{ ...next(operator), value: 'homestyle' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'homestyle' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 50, 'end': 58}\n                                   text: homestyle\n                                   value: homestyle\n                                   word: homestyle\n    8. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 60, 'end': 62}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n    9. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 64, 'end': 70}\n                                   text: premium\n                                   types: [\n                                   'premium'\n                                   ]\n                                   value: premium\n                                   word: premium\n    10. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 72, 'end': 74}\n                                   text: cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: cod\n                                   word: cod\n    11. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n    12. meal/0  - \"meals\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(double/0, [\"Selector(Bridge('{ ...next(operator), value: 'double' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'double' }')), variables({}) bridge(bridge)), number: one, range: {'start': 7, 'end': 12}, text: double, value: double, word: double})\n\n>>>>>>>>>>>>> Counter 3\n    0. single/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   value: single\n                                   word: single\n   *1. double/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   value: double\n                                   word: double\n    2. triple/0  - \"triple\"\n                                   marker: Operator(triple/0, [\"Selector(Bridge('{ ...next(operator), value: 'triple' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'triple' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   value: triple\n                                   word: triple\n    3. baconater/0  - \"baconater\"\n                                   marker: Operator(baconater/0, [\"Selector(Bridge('{ ...next(operator), value: 'baconater' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'baconater' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   value: baconater\n                                   word: baconater\n    4. bacon/0  - \"bacon\"\n                                   marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge))\n                                   range: {'start': 31, 'end': 35}\n                                   text: bacon\n                                   types: [\n                                   'bacon'\n                                   ]\n                                   value: bacon\n                                   word: bacon\n    5. deluxe/0  - \"deluxe\"\n                                   marker: Operator(deluxe/0, [\"Selector(Bridge('{ ...next(operator), value: 'deluxe' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'deluxe' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 37, 'end': 42}\n                                   text: deluxe\n                                   types: [\n                                   'deluxe'\n                                   ]\n                                   value: deluxe\n                                   word: deluxe\n    6. spicy/0  - \"spicy\"\n                                   marker: Operator(spicy/0, [\"Selector(Bridge('{ ...next(operator), value: 'spicy' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'spicy' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 44, 'end': 48}\n                                   text: spicy\n                                   value: spicy\n                                   word: spicy\n    7. homestyle/0  - \"homestyle\"\n                                   marker: Operator(homestyle/0, [\"Selector(Bridge('{ ...next(operator), value: 'homestyle' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'homestyle' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 50, 'end': 58}\n                                   text: homestyle\n                                   value: homestyle\n                                   word: homestyle\n    8. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 60, 'end': 62}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n    9. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 64, 'end': 70}\n                                   text: premium\n                                   types: [\n                                   'premium'\n                                   ]\n                                   value: premium\n                                   word: premium\n    10. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 72, 'end': 74}\n                                   text: cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: cod\n                                   word: cod\n    11. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n    12. meal/0  - \"meals\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(triple/0, [\"Selector(Bridge('{ ...next(operator), value: 'triple' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'triple' }')), variables({}) bridge(bridge)), number: one, range: {'start': 14, 'end': 19}, text: triple, value: triple, word: triple})\n\n>>>>>>>>>>>>> Counter 4\n    0. single/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   value: single\n                                   word: single\n    1. double/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   value: double\n                                   word: double\n   *2. triple/1 (dead) - \"triple\"\n                                   dead: True\n                                   marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   value: triple\n                                   word: triple\n    3. baconater/0  - \"baconater\"\n                                   marker: Operator(baconater/0, [\"Selector(Bridge('{ ...next(operator), value: 'baconater' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'baconater' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   value: baconater\n                                   word: baconater\n    4. bacon/0  - \"bacon\"\n                                   marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge))\n                                   range: {'start': 31, 'end': 35}\n                                   text: bacon\n                                   types: [\n                                   'bacon'\n                                   ]\n                                   value: bacon\n                                   word: bacon\n    5. deluxe/0  - \"deluxe\"\n                                   marker: Operator(deluxe/0, [\"Selector(Bridge('{ ...next(operator), value: 'deluxe' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'deluxe' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 37, 'end': 42}\n                                   text: deluxe\n                                   types: [\n                                   'deluxe'\n                                   ]\n                                   value: deluxe\n                                   word: deluxe\n    6. spicy/0  - \"spicy\"\n                                   marker: Operator(spicy/0, [\"Selector(Bridge('{ ...next(operator), value: 'spicy' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'spicy' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 44, 'end': 48}\n                                   text: spicy\n                                   value: spicy\n                                   word: spicy\n    7. homestyle/0  - \"homestyle\"\n                                   marker: Operator(homestyle/0, [\"Selector(Bridge('{ ...next(operator), value: 'homestyle' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'homestyle' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 50, 'end': 58}\n                                   text: homestyle\n                                   value: homestyle\n                                   word: homestyle\n    8. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 60, 'end': 62}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n    9. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 64, 'end': 70}\n                                   text: premium\n                                   types: [\n                                   'premium'\n                                   ]\n                                   value: premium\n                                   word: premium\n    10. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 72, 'end': 74}\n                                   text: cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: cod\n                                   word: cod\n    11. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n    12. meal/0  - \"meals\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({marker: Operator(baconater/0, [\"Selector(Bridge('{ ...next(operator), value: 'baconater' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'baconater' }')), variables({}) bridge(bridge)), number: one, range: {'start': 21, 'end': 29}, text: baconater, value: baconater, word: baconater})\n\n>>>>>>>>>>>>> Counter 5\n    0. single/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   value: single\n                                   word: single\n    1. double/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   value: double\n                                   word: double\n    2. triple/1 (dead) - \"triple\"\n                                   dead: True\n                                   marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   value: triple\n                                   word: triple\n   *3. baconater/1 (dead) - \"baconater\"\n                                   dead: True\n                                   marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   value: baconater\n                                   word: baconater\n    4. bacon/0  - \"bacon\"\n                                   marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge))\n                                   range: {'start': 31, 'end': 35}\n                                   text: bacon\n                                   types: [\n                                   'bacon'\n                                   ]\n                                   value: bacon\n                                   word: bacon\n    5. deluxe/0  - \"deluxe\"\n                                   marker: Operator(deluxe/0, [\"Selector(Bridge('{ ...next(operator), value: 'deluxe' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'deluxe' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 37, 'end': 42}\n                                   text: deluxe\n                                   types: [\n                                   'deluxe'\n                                   ]\n                                   value: deluxe\n                                   word: deluxe\n    6. spicy/0  - \"spicy\"\n                                   marker: Operator(spicy/0, [\"Selector(Bridge('{ ...next(operator), value: 'spicy' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'spicy' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 44, 'end': 48}\n                                   text: spicy\n                                   value: spicy\n                                   word: spicy\n    7. homestyle/0  - \"homestyle\"\n                                   marker: Operator(homestyle/0, [\"Selector(Bridge('{ ...next(operator), value: 'homestyle' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'homestyle' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 50, 'end': 58}\n                                   text: homestyle\n                                   value: homestyle\n                                   word: homestyle\n    8. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 60, 'end': 62}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n    9. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 64, 'end': 70}\n                                   text: premium\n                                   types: [\n                                   'premium'\n                                   ]\n                                   value: premium\n                                   word: premium\n    10. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 72, 'end': 74}\n                                   text: cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: cod\n                                   word: cod\n    11. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n    12. meal/0  - \"meals\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=5) is Context({convolution: True, marker: Operator(bacon_deluxe/0, [\"Selector(Bridge('{ ...after[0], 'bacon': before[0], atomic: true, dead: true, marker: next(operator('bacon_deluxe')), value: 'bacon_deluxe', modifiers: append(['bacon'], after[0].modifiers)}'), , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(Bridge('{ ...after[0], 'bacon': before[0], atomic: true, dead: true, marker: next(operator('bacon_deluxe')), value: 'bacon_deluxe', modifiers: append(['bacon'], after[0].modifiers)}')), variables({}), convolution bridge(bridge)), range: {'start': 31, 'end': 42}})\n\n>>>>>>>>>>>>> Counter 6\n    0. single/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   value: single\n                                   word: single\n    1. double/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   value: double\n                                   word: double\n    2. triple/1 (dead) - \"triple\"\n                                   dead: True\n                                   marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   value: triple\n                                   word: triple\n    3. baconater/1 (dead) - \"baconater\"\n                                   dead: True\n                                   marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   value: baconater\n                                   word: baconater\n   *4. bacon_deluxe/1 (dead) - \"bacon deluxe\"\n                                   atomic: True\n                                   bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                   dead: True\n                                   marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'bacon'\n                                   ]\n                                   number: one\n                                   range: {'start': 31, 'end': 42}\n                                   text: bacon deluxe\n                                   types: [\n                                   'deluxe'\n                                   ]\n                                   value: bacon_deluxe\n                                   word: deluxe\n    5. spicy/0  - \"spicy\"\n                                   marker: Operator(spicy/0, [\"Selector(Bridge('{ ...next(operator), value: 'spicy' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'spicy' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 44, 'end': 48}\n                                   text: spicy\n                                   value: spicy\n                                   word: spicy\n    6. homestyle/0  - \"homestyle\"\n                                   marker: Operator(homestyle/0, [\"Selector(Bridge('{ ...next(operator), value: 'homestyle' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'homestyle' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 50, 'end': 58}\n                                   text: homestyle\n                                   value: homestyle\n                                   word: homestyle\n    7. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 60, 'end': 62}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n    8. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 64, 'end': 70}\n                                   text: premium\n                                   types: [\n                                   'premium'\n                                   ]\n                                   value: premium\n                                   word: premium\n    9. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 72, 'end': 74}\n                                   text: cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: cod\n                                   word: cod\n    10. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n    11. meal/0  - \"meals\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=5) is Context({marker: Operator(spicy/0, [\"Selector(Bridge('{ ...next(operator), value: 'spicy' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'spicy' }')), variables({}) bridge(bridge)), number: one, range: {'start': 44, 'end': 48}, text: spicy, value: spicy, word: spicy})\n\n>>>>>>>>>>>>> Counter 7\n    0. single/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   value: single\n                                   word: single\n    1. double/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   value: double\n                                   word: double\n    2. triple/1 (dead) - \"triple\"\n                                   dead: True\n                                   marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   value: triple\n                                   word: triple\n    3. baconater/1 (dead) - \"baconater\"\n                                   dead: True\n                                   marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   value: baconater\n                                   word: baconater\n    4. bacon_deluxe/1 (dead) - \"bacon deluxe\"\n                                   atomic: True\n                                   bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                   dead: True\n                                   marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'bacon'\n                                   ]\n                                   number: one\n                                   range: {'start': 31, 'end': 42}\n                                   text: bacon deluxe\n                                   types: [\n                                   'deluxe'\n                                   ]\n                                   value: bacon_deluxe\n                                   word: deluxe\n   *5. spicy/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 44, 'end': 48}\n                                   text: spicy\n                                   value: spicy\n                                   word: spicy\n    6. homestyle/0  - \"homestyle\"\n                                   marker: Operator(homestyle/0, [\"Selector(Bridge('{ ...next(operator), value: 'homestyle' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'homestyle' }')), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 50, 'end': 58}\n                                   text: homestyle\n                                   value: homestyle\n                                   word: homestyle\n    7. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 60, 'end': 62}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n    8. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 64, 'end': 70}\n                                   text: premium\n                                   types: [\n                                   'premium'\n                                   ]\n                                   value: premium\n                                   word: premium\n    9. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 72, 'end': 74}\n                                   text: cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: cod\n                                   word: cod\n    10. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n    11. meal/0  - \"meals\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=6) is Context({marker: Operator(homestyle/0, [\"Selector(Bridge('{ ...next(operator), value: 'homestyle' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'homestyle' }')), variables({}) bridge(bridge)), number: one, range: {'start': 50, 'end': 58}, text: homestyle, value: homestyle, word: homestyle})\n\n>>>>>>>>>>>>> Counter 8\n    0. single/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   value: single\n                                   word: single\n    1. double/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   value: double\n                                   word: double\n    2. triple/1 (dead) - \"triple\"\n                                   dead: True\n                                   marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   value: triple\n                                   word: triple\n    3. baconater/1 (dead) - \"baconater\"\n                                   dead: True\n                                   marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   value: baconater\n                                   word: baconater\n    4. bacon_deluxe/1 (dead) - \"bacon deluxe\"\n                                   atomic: True\n                                   bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                   dead: True\n                                   marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'bacon'\n                                   ]\n                                   number: one\n                                   range: {'start': 31, 'end': 42}\n                                   text: bacon deluxe\n                                   types: [\n                                   'deluxe'\n                                   ]\n                                   value: bacon_deluxe\n                                   word: deluxe\n    5. spicy/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 44, 'end': 48}\n                                   text: spicy\n                                   value: spicy\n                                   word: spicy\n   *6. homestyle/1 (dead) - \"homestyle\"\n                                   dead: True\n                                   marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 50, 'end': 58}\n                                   text: homestyle\n                                   value: homestyle\n                                   word: homestyle\n    7. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 60, 'end': 62}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n    8. premium/0  - \"premium\"\n                                   marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge))\n                                   range: {'start': 64, 'end': 70}\n                                   text: premium\n                                   types: [\n                                   'premium'\n                                   ]\n                                   value: premium\n                                   word: premium\n    9. cod/0  - \"cod\"\n                                   marker: Operator(cod/0, [\"Selector(Bridge('{ ...next(operator), value: 'cod' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'cod' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 72, 'end': 74}\n                                   text: cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: cod\n                                   word: cod\n    10. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n    11. meal/0  - \"meals\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=9) is Context({convolution: True, marker: Operator(premium_cod/0, [\"Selector(Bridge('{ ...after[0], 'premium': before[0], atomic: true, dead: true, marker: next(operator('premium_cod')), value: 'premium_cod', modifiers: append(['premium'], after[0].modifiers)}'), , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(Bridge('{ ...after[0], 'premium': before[0], atomic: true, dead: true, marker: next(operator('premium_cod')), value: 'premium_cod', modifiers: append(['premium'], after[0].modifiers)}')), variables({}), convolution bridge(bridge)), range: {'start': 64, 'end': 74}})\n\n>>>>>>>>>>>>> Counter 9\n    0. single/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   value: single\n                                   word: single\n    1. double/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   value: double\n                                   word: double\n    2. triple/1 (dead) - \"triple\"\n                                   dead: True\n                                   marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   value: triple\n                                   word: triple\n    3. baconater/1 (dead) - \"baconater\"\n                                   dead: True\n                                   marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   value: baconater\n                                   word: baconater\n    4. bacon_deluxe/1 (dead) - \"bacon deluxe\"\n                                   atomic: True\n                                   bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                   dead: True\n                                   marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'bacon'\n                                   ]\n                                   number: one\n                                   range: {'start': 31, 'end': 42}\n                                   text: bacon deluxe\n                                   types: [\n                                   'deluxe'\n                                   ]\n                                   value: bacon_deluxe\n                                   word: deluxe\n    5. spicy/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 44, 'end': 48}\n                                   text: spicy\n                                   value: spicy\n                                   word: spicy\n    6. homestyle/1 (dead) - \"homestyle\"\n                                   dead: True\n                                   marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 50, 'end': 58}\n                                   text: homestyle\n                                   value: homestyle\n                                   word: homestyle\n    7. list/0  - \"and\"\n                                   default: True\n                                   marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 60, 'end': 62}\n                                   text: and\n                                   types: [\n                                   ]\n                                   word: and\n   *8. premium_cod/1 (dead) - \"premium cod\"\n                                   atomic: True\n                                   dead: True\n                                   marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'premium'\n                                   ]\n                                   number: many\n                                   premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 64, 'end': 70}, text: premium, types: ['premium'], value: premium, word: premium})\n                                   range: {'start': 64, 'end': 74}\n                                   text: premium cod\n                                   types: [\n                                   'cod'\n                                   ]\n                                   value: premium_cod\n                                   word: cod\n    9. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n    10. meal/0  - \"meals\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=7) is Context({default: True, marker: Operator(list/0, PASS, ['Selector(Bridge(\\'{ ...next(operator), listable: true, isList: true, value: append(before, after) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), listable: true, isList: true, value: append(before, after) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 60, 'end': 62}, text: and, types: [], word: and})\n\n>>>>>>>>>>>>> Counter 10\n    0. single/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   value: single\n                                   word: single\n    1. double/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   value: double\n                                   word: double\n    2. triple/1 (dead) - \"triple\"\n                                   dead: True\n                                   marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   value: triple\n                                   word: triple\n    3. baconater/1 (dead) - \"baconater\"\n                                   dead: True\n                                   marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   value: baconater\n                                   word: baconater\n    4. bacon_deluxe/1 (dead) - \"bacon deluxe\"\n                                   atomic: True\n                                   bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                   dead: True\n                                   marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'bacon'\n                                   ]\n                                   number: one\n                                   range: {'start': 31, 'end': 42}\n                                   text: bacon deluxe\n                                   types: [\n                                   'deluxe'\n                                   ]\n                                   value: bacon_deluxe\n                                   word: deluxe\n    5. spicy/1 (dead) - \"spicy\"\n                                   dead: True\n                                   marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 44, 'end': 48}\n                                   text: spicy\n                                   value: spicy\n                                   word: spicy\n   *6. list/1  - \"homestyle and premium cod\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 50, 'end': 74}\n                                   text: homestyle and premium cod\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 50, 'end': 58}\n                                     text: homestyle\n                                     value: homestyle\n                                     word: homestyle\n\n                                     atomic: True\n                                     dead: True\n                                     marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'premium'\n                                     ]\n                                     number: many\n                                     premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 64, 'end': 70}, text: premium, types: ['premium'], value: premium, word: premium})\n                                     range: {'start': 64, 'end': 74}\n                                     text: premium cod\n                                     types: [\n                                     'cod'\n                                     ]\n                                     value: premium_cod\n                                     word: cod\n                                   ]\n                                   word: and\n    7. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n    8. meal/0  - \"meals\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=6) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 50, 'end': 74}, text: homestyle and premium cod, types: [], value: [Context({dead: True, marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 50, 'end': 58}, text: homestyle, value: homestyle, word: homestyle}), Context({atomic: True, dead: True, marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['premium'], number: many, premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 64, 'end': 70}, text: premium, types: ['premium'], value: premium, word: premium}), range: {'start': 64, 'end': 74}, text: premium cod, types: ['cod'], value: premium_cod, word: cod})], word: and})\n\n>>>>>>>>>>>>> Counter 11\n    0. single/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   value: single\n                                   word: single\n    1. double/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   value: double\n                                   word: double\n    2. triple/1 (dead) - \"triple\"\n                                   dead: True\n                                   marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   value: triple\n                                   word: triple\n    3. baconater/1 (dead) - \"baconater\"\n                                   dead: True\n                                   marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   value: baconater\n                                   word: baconater\n    4. bacon_deluxe/1 (dead) - \"bacon deluxe\"\n                                   atomic: True\n                                   bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                   dead: True\n                                   marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                   modifiers: [\n                                   'bacon'\n                                   ]\n                                   number: one\n                                   range: {'start': 31, 'end': 42}\n                                   text: bacon deluxe\n                                   types: [\n                                   'deluxe'\n                                   ]\n                                   value: bacon_deluxe\n                                   word: deluxe\n   *5. list/1  - \"spicy homestyle and premium cod\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 44, 'end': 74}\n                                   text: spicy homestyle and premium cod\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 44, 'end': 48}\n                                     text: spicy\n                                     value: spicy\n                                     word: spicy\n\n                                     dead: True\n                                     marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 50, 'end': 58}\n                                     text: homestyle\n                                     value: homestyle\n                                     word: homestyle\n\n                                     atomic: True\n                                     dead: True\n                                     marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'premium'\n                                     ]\n                                     number: many\n                                     premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 64, 'end': 70}, text: premium, types: ['premium'], value: premium, word: premium})\n                                     range: {'start': 64, 'end': 74}\n                                     text: premium cod\n                                     types: [\n                                     'cod'\n                                     ]\n                                     value: premium_cod\n                                     word: cod\n                                   ]\n                                   word: and\n    6. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n    7. meal/0  - \"meals\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=5) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 44, 'end': 74}, text: spicy homestyle and premium cod, types: [], value: [Context({dead: True, marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 44, 'end': 48}, text: spicy, value: spicy, word: spicy}), Context({dead: True, marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 50, 'end': 58}, text: homestyle, value: homestyle, word: homestyle}), Context({atomic: True, dead: True, marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['premium'], number: many, premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 64, 'end': 70}, text: premium, types: ['premium'], value: premium, word: premium}), range: {'start': 64, 'end': 74}, text: premium cod, types: ['cod'], value: premium_cod, word: cod})], word: and})\n\n>>>>>>>>>>>>> Counter 12\n    0. single/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   value: single\n                                   word: single\n    1. double/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   value: double\n                                   word: double\n    2. triple/1 (dead) - \"triple\"\n                                   dead: True\n                                   marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   value: triple\n                                   word: triple\n    3. baconater/1 (dead) - \"baconater\"\n                                   dead: True\n                                   marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 21, 'end': 29}\n                                   text: baconater\n                                   value: baconater\n                                   word: baconater\n   *4. list/1  - \"bacon deluxe spicy homestyle and premium cod\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 31, 'end': 74}\n                                   text: bacon deluxe spicy homestyle and premium cod\n                                   types: [\n                                   ]\n                                   value: [\n                                     atomic: True\n                                     bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                     dead: True\n                                     marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'bacon'\n                                     ]\n                                     number: one\n                                     range: {'start': 31, 'end': 42}\n                                     text: bacon deluxe\n                                     types: [\n                                     'deluxe'\n                                     ]\n                                     value: bacon_deluxe\n                                     word: deluxe\n\n                                     dead: True\n                                     marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 44, 'end': 48}\n                                     text: spicy\n                                     value: spicy\n                                     word: spicy\n\n                                     dead: True\n                                     marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 50, 'end': 58}\n                                     text: homestyle\n                                     value: homestyle\n                                     word: homestyle\n\n                                     atomic: True\n                                     dead: True\n                                     marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'premium'\n                                     ]\n                                     number: many\n                                     premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 64, 'end': 70}, text: premium, types: ['premium'], value: premium, word: premium})\n                                     range: {'start': 64, 'end': 74}\n                                     text: premium cod\n                                     types: [\n                                     'cod'\n                                     ]\n                                     value: premium_cod\n                                     word: cod\n                                   ]\n                                   word: and\n    5. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n    6. meal/0  - \"meals\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 31, 'end': 74}, text: bacon deluxe spicy homestyle and premium cod, types: [], value: [Context({atomic: True, bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon}), dead: True, marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['bacon'], number: one, range: {'start': 31, 'end': 42}, text: bacon deluxe, types: ['deluxe'], value: bacon_deluxe, word: deluxe}), Context({dead: True, marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 44, 'end': 48}, text: spicy, value: spicy, word: spicy}), Context({dead: True, marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 50, 'end': 58}, text: homestyle, value: homestyle, word: homestyle}), Context({atomic: True, dead: True, marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['premium'], number: many, premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 64, 'end': 70}, text: premium, types: ['premium'], value: premium, word: premium}), range: {'start': 64, 'end': 74}, text: premium cod, types: ['cod'], value: premium_cod, word: cod})], word: and})\n\n>>>>>>>>>>>>> Counter 13\n    0. single/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   value: single\n                                   word: single\n    1. double/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   value: double\n                                   word: double\n    2. triple/1 (dead) - \"triple\"\n                                   dead: True\n                                   marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 14, 'end': 19}\n                                   text: triple\n                                   value: triple\n                                   word: triple\n   *3. list/1  - \"baconater bacon deluxe spicy homestyle and premium cod\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 21, 'end': 74}\n                                   text: baconater bacon deluxe spicy homestyle and premium cod\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 21, 'end': 29}\n                                     text: baconater\n                                     value: baconater\n                                     word: baconater\n\n                                     atomic: True\n                                     bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                     dead: True\n                                     marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'bacon'\n                                     ]\n                                     number: one\n                                     range: {'start': 31, 'end': 42}\n                                     text: bacon deluxe\n                                     types: [\n                                     'deluxe'\n                                     ]\n                                     value: bacon_deluxe\n                                     word: deluxe\n\n                                     dead: True\n                                     marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 44, 'end': 48}\n                                     text: spicy\n                                     value: spicy\n                                     word: spicy\n\n                                     dead: True\n                                     marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 50, 'end': 58}\n                                     text: homestyle\n                                     value: homestyle\n                                     word: homestyle\n\n                                     atomic: True\n                                     dead: True\n                                     marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'premium'\n                                     ]\n                                     number: many\n                                     premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 64, 'end': 70}, text: premium, types: ['premium'], value: premium, word: premium})\n                                     range: {'start': 64, 'end': 74}\n                                     text: premium cod\n                                     types: [\n                                     'cod'\n                                     ]\n                                     value: premium_cod\n                                     word: cod\n                                   ]\n                                   word: and\n    4. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n    5. meal/0  - \"meals\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 21, 'end': 74}, text: baconater bacon deluxe spicy homestyle and premium cod, types: [], value: [Context({dead: True, marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 21, 'end': 29}, text: baconater, value: baconater, word: baconater}), Context({atomic: True, bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon}), dead: True, marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['bacon'], number: one, range: {'start': 31, 'end': 42}, text: bacon deluxe, types: ['deluxe'], value: bacon_deluxe, word: deluxe}), Context({dead: True, marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 44, 'end': 48}, text: spicy, value: spicy, word: spicy}), Context({dead: True, marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 50, 'end': 58}, text: homestyle, value: homestyle, word: homestyle}), Context({atomic: True, dead: True, marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['premium'], number: many, premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 64, 'end': 70}, text: premium, types: ['premium'], value: premium, word: premium}), range: {'start': 64, 'end': 74}, text: premium cod, types: ['cod'], value: premium_cod, word: cod})], word: and})\n\n>>>>>>>>>>>>> Counter 14\n    0. single/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   value: single\n                                   word: single\n    1. double/1 (dead) - \"double\"\n                                   dead: True\n                                   marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 7, 'end': 12}\n                                   text: double\n                                   value: double\n                                   word: double\n   *2. list/1  - \"triple baconater bacon deluxe spicy homestyle and premium cod\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 14, 'end': 74}\n                                   text: triple baconater bacon deluxe spicy homestyle and premium cod\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 14, 'end': 19}\n                                     text: triple\n                                     value: triple\n                                     word: triple\n\n                                     dead: True\n                                     marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 21, 'end': 29}\n                                     text: baconater\n                                     value: baconater\n                                     word: baconater\n\n                                     atomic: True\n                                     bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                     dead: True\n                                     marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'bacon'\n                                     ]\n                                     number: one\n                                     range: {'start': 31, 'end': 42}\n                                     text: bacon deluxe\n                                     types: [\n                                     'deluxe'\n                                     ]\n                                     value: bacon_deluxe\n                                     word: deluxe\n\n                                     dead: True\n                                     marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 44, 'end': 48}\n                                     text: spicy\n                                     value: spicy\n                                     word: spicy\n\n                                     dead: True\n                                     marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 50, 'end': 58}\n                                     text: homestyle\n                                     value: homestyle\n                                     word: homestyle\n\n                                     atomic: True\n                                     dead: True\n                                     marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'premium'\n                                     ]\n                                     number: many\n                                     premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 64, 'end': 70}, text: premium, types: ['premium'], value: premium, word: premium})\n                                     range: {'start': 64, 'end': 74}\n                                     text: premium cod\n                                     types: [\n                                     'cod'\n                                     ]\n                                     value: premium_cod\n                                     word: cod\n                                   ]\n                                   word: and\n    3. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n    4. meal/0  - \"meals\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 14, 'end': 74}, text: triple baconater bacon deluxe spicy homestyle and premium cod, types: [], value: [Context({dead: True, marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 14, 'end': 19}, text: triple, value: triple, word: triple}), Context({dead: True, marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 21, 'end': 29}, text: baconater, value: baconater, word: baconater}), Context({atomic: True, bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon}), dead: True, marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['bacon'], number: one, range: {'start': 31, 'end': 42}, text: bacon deluxe, types: ['deluxe'], value: bacon_deluxe, word: deluxe}), Context({dead: True, marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 44, 'end': 48}, text: spicy, value: spicy, word: spicy}), Context({dead: True, marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 50, 'end': 58}, text: homestyle, value: homestyle, word: homestyle}), Context({atomic: True, dead: True, marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['premium'], number: many, premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 64, 'end': 70}, text: premium, types: ['premium'], value: premium, word: premium}), range: {'start': 64, 'end': 74}, text: premium cod, types: ['cod'], value: premium_cod, word: cod})], word: and})\n\n>>>>>>>>>>>>> Counter 15\n    0. single/1 (dead) - \"single\"\n                                   dead: True\n                                   marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: one\n                                   range: {'start': 0, 'end': 5}\n                                   text: single\n                                   value: single\n                                   word: single\n   *1. list/1  - \"double triple baconater bacon deluxe spicy homestyle and premium cod\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 7, 'end': 74}\n                                   text: double triple baconater bacon deluxe spicy homestyle and premium cod\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 7, 'end': 12}\n                                     text: double\n                                     value: double\n                                     word: double\n\n                                     dead: True\n                                     marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 14, 'end': 19}\n                                     text: triple\n                                     value: triple\n                                     word: triple\n\n                                     dead: True\n                                     marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 21, 'end': 29}\n                                     text: baconater\n                                     value: baconater\n                                     word: baconater\n\n                                     atomic: True\n                                     bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                     dead: True\n                                     marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'bacon'\n                                     ]\n                                     number: one\n                                     range: {'start': 31, 'end': 42}\n                                     text: bacon deluxe\n                                     types: [\n                                     'deluxe'\n                                     ]\n                                     value: bacon_deluxe\n                                     word: deluxe\n\n                                     dead: True\n                                     marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 44, 'end': 48}\n                                     text: spicy\n                                     value: spicy\n                                     word: spicy\n\n                                     dead: True\n                                     marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 50, 'end': 58}\n                                     text: homestyle\n                                     value: homestyle\n                                     word: homestyle\n\n                                     atomic: True\n                                     dead: True\n                                     marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'premium'\n                                     ]\n                                     number: many\n                                     premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 64, 'end': 70}, text: premium, types: ['premium'], value: premium, word: premium})\n                                     range: {'start': 64, 'end': 74}\n                                     text: premium cod\n                                     types: [\n                                     'cod'\n                                     ]\n                                     value: premium_cod\n                                     word: cod\n                                   ]\n                                   word: and\n    2. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n    3. meal/0  - \"meals\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), range: {'start': 7, 'end': 74}, text: double triple baconater bacon deluxe spicy homestyle and premium cod, types: [], value: [Context({dead: True, marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 7, 'end': 12}, text: double, value: double, word: double}), Context({dead: True, marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 14, 'end': 19}, text: triple, value: triple, word: triple}), Context({dead: True, marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 21, 'end': 29}, text: baconater, value: baconater, word: baconater}), Context({atomic: True, bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon}), dead: True, marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['bacon'], number: one, range: {'start': 31, 'end': 42}, text: bacon deluxe, types: ['deluxe'], value: bacon_deluxe, word: deluxe}), Context({dead: True, marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 44, 'end': 48}, text: spicy, value: spicy, word: spicy}), Context({dead: True, marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 50, 'end': 58}, text: homestyle, value: homestyle, word: homestyle}), Context({atomic: True, dead: True, marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['premium'], number: many, premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 64, 'end': 70}, text: premium, types: ['premium'], value: premium, word: premium}), range: {'start': 64, 'end': 74}, text: premium cod, types: ['cod'], value: premium_cod, word: cod})], word: and})\n\n>>>>>>>>>>>>> Counter 16\n   *0. list/1  - \"single double triple baconater bacon deluxe spicy homestyle and premium cod\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 0, 'end': 74}\n                                   text: single double triple baconater bacon deluxe spicy homestyle and premium cod\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 0, 'end': 5}\n                                     text: single\n                                     value: single\n                                     word: single\n\n                                     dead: True\n                                     marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 7, 'end': 12}\n                                     text: double\n                                     value: double\n                                     word: double\n\n                                     dead: True\n                                     marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 14, 'end': 19}\n                                     text: triple\n                                     value: triple\n                                     word: triple\n\n                                     dead: True\n                                     marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 21, 'end': 29}\n                                     text: baconater\n                                     value: baconater\n                                     word: baconater\n\n                                     atomic: True\n                                     bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                     dead: True\n                                     marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'bacon'\n                                     ]\n                                     number: one\n                                     range: {'start': 31, 'end': 42}\n                                     text: bacon deluxe\n                                     types: [\n                                     'deluxe'\n                                     ]\n                                     value: bacon_deluxe\n                                     word: deluxe\n\n                                     dead: True\n                                     marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 44, 'end': 48}\n                                     text: spicy\n                                     value: spicy\n                                     word: spicy\n\n                                     dead: True\n                                     marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 50, 'end': 58}\n                                     text: homestyle\n                                     value: homestyle\n                                     word: homestyle\n\n                                     atomic: True\n                                     dead: True\n                                     marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'premium'\n                                     ]\n                                     number: many\n                                     premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 64, 'end': 70}, text: premium, types: ['premium'], value: premium, word: premium})\n                                     range: {'start': 64, 'end': 74}\n                                     text: premium cod\n                                     types: [\n                                     'cod'\n                                     ]\n                                     value: premium_cod\n                                     word: cod\n                                   ]\n                                   word: and\n    1. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n    2. meal/0  - \"meals\"\n                                   marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(meal/0, [\"Selector(Bridge('{ ...next(operator), value: 'meal' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'meal' }')), variables({}) bridge(bridge)), number: many, range: {'start': 80, 'end': 84}, text: meals, value: meal, word: meals})\n\n>>>>>>>>>>>>> Counter 17\n    0. list/1  - \"single double triple baconater bacon deluxe spicy homestyle and premium cod\"\n                                   default: True\n                                   isList: True\n                                   listable: True\n                                   marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge))\n                                   range: {'start': 0, 'end': 74}\n                                   text: single double triple baconater bacon deluxe spicy homestyle and premium cod\n                                   types: [\n                                   ]\n                                   value: [\n                                     dead: True\n                                     marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 0, 'end': 5}\n                                     text: single\n                                     value: single\n                                     word: single\n\n                                     dead: True\n                                     marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 7, 'end': 12}\n                                     text: double\n                                     value: double\n                                     word: double\n\n                                     dead: True\n                                     marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 14, 'end': 19}\n                                     text: triple\n                                     value: triple\n                                     word: triple\n\n                                     dead: True\n                                     marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 21, 'end': 29}\n                                     text: baconater\n                                     value: baconater\n                                     word: baconater\n\n                                     atomic: True\n                                     bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon})\n                                     dead: True\n                                     marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'bacon'\n                                     ]\n                                     number: one\n                                     range: {'start': 31, 'end': 42}\n                                     text: bacon deluxe\n                                     types: [\n                                     'deluxe'\n                                     ]\n                                     value: bacon_deluxe\n                                     word: deluxe\n\n                                     dead: True\n                                     marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 44, 'end': 48}\n                                     text: spicy\n                                     value: spicy\n                                     word: spicy\n\n                                     dead: True\n                                     marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: one\n                                     range: {'start': 50, 'end': 58}\n                                     text: homestyle\n                                     value: homestyle\n                                     word: homestyle\n\n                                     atomic: True\n                                     dead: True\n                                     marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge))\n                                     modifiers: [\n                                     'premium'\n                                     ]\n                                     number: many\n                                     premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 64, 'end': 70}, text: premium, types: ['premium'], value: premium, word: premium})\n                                     range: {'start': 64, 'end': 74}\n                                     text: premium cod\n                                     types: [\n                                     'cod'\n                                     ]\n                                     value: premium_cod\n                                     word: cod\n                                   ]\n                                   word: and\n    1. is/0  - \"are\"\n                                   marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 76, 'end': 78}\n                                   text: are\n                                   word: are\n   *2. meal/1 (dead) - \"meals\"\n                                   dead: True\n                                   marker: Operator(meal/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   range: {'start': 80, 'end': 84}\n                                   text: meals\n                                   value: meal\n                                   word: meals\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 76, 'end': 78}, text: are, word: are})\n\n>>>>>>>>>>>>> Counter 18\n   *0. is/1  - \"single double triple baconater bacon deluxe spicy homestyle and premium cod are meals\"\n                                   marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                   number: many\n                                   one: Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), number: many, range: {'start': 0, 'end': 84}, text: single double triple baconater bacon deluxe spicy homestyle and premium cod, types: ['single'], value: [Context({dead: True, marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 5}, text: single, value: single, word: single}), Context({dead: True, marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 7, 'end': 12}, text: double, value: double, word: double}), Context({dead: True, marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 14, 'end': 19}, text: triple, value: triple, word: triple}), Context({dead: True, marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 21, 'end': 29}, text: baconater, value: baconater, word: baconater}), Context({atomic: True, bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bri\n                                   range: {'start': 0, 'end': 84}\n                                   text: single double triple baconater bacon deluxe spicy homestyle and premium cod are meals\n                                   two: Context({dead: True, marker: Operator(meal/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 80, 'end': 84}, text: meals, types: ['meal'], value: meal, word: meals})\n                                   word: are\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), number: many, range: {'start': 0, 'end': 84}, text: single double triple baconater bacon deluxe spicy homestyle and premium cod, types: ['single'], value: [Context({dead: True, marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 5}, text: single, value: single, word: single}), Context({dead: True, marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 7, 'end': 12}, text: double, value: double, word: double}), Context({dead: True, marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 14, 'end': 19}, text: triple, value: triple, word: triple}), Context({dead: True, marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 21, 'end': 29}, text: baconater, value: baconater, word: baconater}), Context({atomic: True, bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bridge(bridge)), range: {'start': 31, 'end': 35}, text: bacon, types: ['bacon'], value: bacon, word: bacon}), dead: True, marker: Operator(bacon_deluxe/1, [\"Selector(None, , [Listable(Ref('bacon', (0,)))]<==>[Listable(Ref('deluxe', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['bacon'], number: one, range: {'start': 31, 'end': 42}, text: bacon deluxe, types: ['deluxe'], value: bacon_deluxe, word: deluxe}), Context({dead: True, marker: Operator(spicy/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 44, 'end': 48}, text: spicy, value: spicy, word: spicy}), Context({dead: True, marker: Operator(homestyle/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 50, 'end': 58}, text: homestyle, value: homestyle, word: homestyle}), Context({atomic: True, dead: True, marker: Operator(premium_cod/1, [\"Selector(None, , [Listable(Ref('premium', (0,)))]<==>[Listable(Ref('cod', (0,)))], bridge(bridge))\"], evaluator(None), variables({}), convolution bridge(bridge)), modifiers: ['premium'], number: many, premium: Context({marker: Operator(premium/0, [\"Selector(Bridge('{ ...next(operator), value: 'premium' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'premium' }')), variables({}) bridge(bridge)), range: {'start': 64, 'end': 70}, text: premium, types: ['premium'], value: premium, word: premium}), range: {'start': 64, 'end': 74}, text: premium cod, types: ['cod'], value: premium_cod, word: cod})], word: and}), range: {'start': 0, 'end': 84}, text: single double triple baconater bacon deluxe spicy homestyle and premium cod are meals, two: Context({dead: True, marker: Operator(meal/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 80, 'end': 84}, text: meals, types: ['meal'], value: meal, word: meals}), word: are})\n\n>>>>>>>>>>>>> Counter 19\n   *0. is/2 (dead) - \"single double triple baconater bacon deluxe spicy homestyle and premium cod are meals\"\n                                   dead: True\n                                   marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                   number: many\n                                   one: Context({default: True, isList: True, listable: True, marker: Operator(list/1, PASS, ['Selector(Bridge(\\'{ ...operator, value: append(before, operator.value) }\\'), , same/(), [And([\"Type(variable: \\'type\\')\", \"Listable(Unify(Property((\\'context\\', \\'instance\\')), Property((\\'variables\\', \\'instance\\'))))\"])]<==>[], bridge(bridge), passthrough)'], evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'premium', 'unknown', 'object', 'hierarchyAble', 'isEdee', 'notAble', 'property', 'queryable', 'isEder'], 'instance': <class 'matcher.Undefined'>}) bridge(bridge)), number: many, range: {'start': 0, 'end': 84}, text: single double triple baconater bacon deluxe spicy homestyle and premium cod, types: ['single'], value: [Context({dead: True, marker: Operator(single/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 5}, text: single, value: single, word: single}), Context({dead: True, marker: Operator(double/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 7, 'end': 12}, text: double, value: double, word: double}), Context({dead: True, marker: Operator(triple/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 14, 'end': 19}, text: triple, value: triple, word: triple}), Context({dead: True, marker: Operator(baconater/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 21, 'end': 29}, text: baconater, value: baconater, word: baconater}), Context({atomic: True, bacon: Context({marker: Operator(bacon/0, [\"Selector(Bridge('{ ...next(operator), value: 'bacon' }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), value: 'bacon' }')), variables({}) bri\n                                   range: {'start': 0, 'end': 84}\n                                   text: single double triple baconater bacon deluxe spicy homestyle and premium cod are meals\n                                   two: Context({dead: True, marker: Operator(meal/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 80, 'end': 84}, text: meals, types: ['meal'], value: meal, word: meals})\n                                   word: are\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "many",
          "text": "single double triple baconater bacon deluxe spicy homestyle and premium cod are meals",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 84
          },
          "one": {
            "number": "many",
            "marker": "list",
            "default": true,
            "word": "and",
            "text": "single double triple baconater bacon deluxe spicy homestyle and premium cod",
            "range": {
              "start": 0,
              "end": 84
            },
            "types": [
              "list",
              "single"
            ],
            "listable": true,
            "isList": true,
            "value": [
              {
                "value": "single",
                "number": "one",
                "text": "single",
                "marker": "single",
                "word": "single",
                "range": {
                  "start": 0,
                  "end": 5
                },
                "dead": true,
                "level": 1
              },
              {
                "value": "double",
                "number": "one",
                "text": "double",
                "marker": "double",
                "word": "double",
                "range": {
                  "start": 7,
                  "end": 12
                },
                "dead": true,
                "level": 1
              },
              {
                "value": "triple",
                "number": "one",
                "text": "triple",
                "marker": "triple",
                "word": "triple",
                "range": {
                  "start": 14,
                  "end": 19
                },
                "dead": true,
                "level": 1
              },
              {
                "value": "baconater",
                "number": "one",
                "text": "baconater",
                "marker": "baconater",
                "word": "baconater",
                "range": {
                  "start": 21,
                  "end": 29
                },
                "dead": true,
                "level": 1
              },
              {
                "value": "bacon_deluxe",
                "number": "one",
                "text": "bacon deluxe",
                "marker": "bacon_deluxe",
                "word": "deluxe",
                "range": {
                  "start": 31,
                  "end": 42
                },
                "types": [
                  "bacon_deluxe",
                  "deluxe"
                ],
                "bacon": {
                  "value": "bacon",
                  "text": "bacon",
                  "marker": "bacon",
                  "word": "bacon",
                  "range": {
                    "start": 31,
                    "end": 35
                  },
                  "types": [
                    "bacon"
                  ],
                  "level": 0
                },
                "atomic": true,
                "dead": true,
                "modifiers": [
                  "bacon"
                ],
                "level": 1
              },
              {
                "value": "spicy",
                "number": "one",
                "text": "spicy",
                "marker": "spicy",
                "word": "spicy",
                "range": {
                  "start": 44,
                  "end": 48
                },
                "dead": true,
                "level": 1
              },
              {
                "value": "homestyle",
                "number": "one",
                "text": "homestyle",
                "marker": "homestyle",
                "word": "homestyle",
                "range": {
                  "start": 50,
                  "end": 58
                },
                "dead": true,
                "level": 1
              },
              {
                "value": "premium_cod",
                "number": "many",
                "text": "premium cod",
                "marker": "premium_cod",
                "word": "cod",
                "range": {
                  "start": 64,
                  "end": 74
                },
                "types": [
                  "cod",
                  "premium_cod"
                ],
                "premium": {
                  "value": "premium",
                  "text": "premium",
                  "marker": "premium",
                  "word": "premium",
                  "range": {
                    "start": 64,
                    "end": 70
                  },
                  "types": [
                    "premium"
                  ],
                  "level": 0
                },
                "atomic": true,
                "dead": true,
                "modifiers": [
                  "premium"
                ],
                "level": 1
              }
            ],
            "level": 1
          },
          "two": {
            "value": "meal",
            "number": "many",
            "text": "meals",
            "marker": "meal",
            "word": "meals",
            "range": {
              "start": 80,
              "end": 84
            },
            "dead": true,
            "types": [
              "meal"
            ],
            "level": 1,
            "concept": true
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "fastfood#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "single, double, triple, baconater, bacon deluxe, spicy, homestyle and premium cod are meals"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "bacon",
            0
          ],
          [
            "baconater",
            0
          ],
          [
            "cod",
            0
          ],
          [
            "deluxe",
            0
          ],
          [
            "double",
            0
          ],
          [
            "homestyle",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "meal",
            0
          ],
          [
            "premium",
            0
          ],
          [
            "single",
            0
          ],
          [
            "spicy",
            0
          ],
          [
            "triple",
            0
          ]
        ],
        [
          [
            "bacon",
            0
          ],
          [
            "baconater",
            0
          ],
          [
            "cod",
            0
          ],
          [
            "deluxe",
            0
          ],
          [
            "double",
            0
          ],
          [
            "homestyle",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "meal",
            0
          ],
          [
            "premium",
            0
          ],
          [
            "spicy",
            0
          ],
          [
            "triple",
            0
          ]
        ],
        [
          [
            "bacon",
            0
          ],
          [
            "baconater",
            0
          ],
          [
            "cod",
            0
          ],
          [
            "deluxe",
            0
          ],
          [
            "double",
            0
          ],
          [
            "homestyle",
            0
          ],
          [
            "premium",
            0
          ],
          [
            "single",
            0
          ],
          [
            "spicy",
            0
          ],
          [
            "triple",
            0
          ]
        ],
        [
          [
            "bacon",
            0
          ],
          [
            "baconater",
            0
          ],
          [
            "cod",
            0
          ],
          [
            "deluxe",
            0
          ],
          [
            "homestyle",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "meal",
            0
          ],
          [
            "premium",
            0
          ],
          [
            "spicy",
            0
          ]
        ],
        [
          [
            "bacon",
            0
          ],
          [
            "baconater",
            0
          ],
          [
            "cod",
            0
          ],
          [
            "deluxe",
            0
          ],
          [
            "homestyle",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "meal",
            0
          ],
          [
            "premium",
            0
          ],
          [
            "spicy",
            0
          ],
          [
            "triple",
            0
          ]
        ],
        [
          [
            "bacon",
            0
          ],
          [
            "cod",
            0
          ],
          [
            "deluxe",
            0
          ],
          [
            "homestyle",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "meal",
            0
          ],
          [
            "premium",
            0
          ],
          [
            "spicy",
            0
          ]
        ],
        [
          [
            "cod",
            0
          ],
          [
            "homestyle",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "meal",
            0
          ],
          [
            "premium",
            0
          ]
        ],
        [
          [
            "cod",
            0
          ],
          [
            "homestyle",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "meal",
            0
          ],
          [
            "premium",
            0
          ],
          [
            "spicy",
            0
          ]
        ],
        [
          [
            "cod",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "meal",
            0
          ],
          [
            "premium",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "meal",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "meal",
            0
          ]
        ]
      ],
      "query": "single double triple baconater bacon deluxe spicy homestyle and premium cod are meals",
      "key": {
        "query": "single double triple baconater bacon deluxe spicy homestyle and premium cod are meals"
      }
    },
    {
      "extraConfig": true,
      "where": "/home/dev/code/theprogrammablemind/kms/common/fastfood.js:58",
      "operators": [
        "((meal/* && context.comboNumber == undefined) [comboMeal] (combo/*))",
        "((combo/*) [comboNumber] (number/* || numberNumberCombo/*))",
        "((numberNumberCombo/1) [numberNumberCombo_combo|] (combo/0))",
        "((number/0,1 && context.instance == undefined) [numberNumberCombo] (number/0,1))"
      ],
      "priorities": [
        [
          [
            "number",
            0
          ],
          [
            "numberNumberCombo",
            0
          ]
        ],
        [
          [
            "list",
            0
          ],
          [
            "numberNumberCombo",
            0
          ]
        ],
        [
          [
            "list",
            0
          ],
          [
            "comboNumber",
            0
          ]
        ]
      ],
      "generators": [
        {
          "where": "/home/dev/code/theprogrammablemind/kms/common/fastfood.js:86"
        }
      ],
      "bridges": [
        {
          "id": "numberNumberCombo_combo",
          "convolution": true,
          "isA": [
            "food"
          ],
          "before": [
            "combo",
            "counting"
          ],
          "bridge": "{ ...next(operator), modifiers: append(before[0].modifiers, ['comboNumber']), comboNumber: before[0], word: 'combo', flatten: true }"
        },
        {
          "id": "comboMeal",
          "convolution": true,
          "before": [
            "meal",
            "combo",
            "counting"
          ],
          "bridge": "{ ...next(after[0]), modifiers: append(before[0].modifiers, ['type']), type: before[0], flatten: true }"
        },
        {
          "id": "comboNumber",
          "convolution": true,
          "before": [
            "combo"
          ],
          "bridge": "{ ...next(before[0]), postModifiers: append(before[0].modifiers, ['comboNumber']), comboNumber: after[0], instance: true, flatten: true }",
          "nncBridge": "{ ...next(before[0]), postModifiers: append(before[0].modifiers, ['comboNumber']), comboNumber: after[0].comboNumber, flatten: true }"
        },
        {
          "id": "numberNumberCombo",
          "convolution": true,
          "isA": [
            "food"
          ],
          "before": [
            "combo",
            "comboNumber"
          ],
          "bridge": "{ ...next(operator), word: 'number', combo: true, postModifiers: append(before[0].postModifiers, ['comboNumber']), comboNumber: after[0], flatten: true }"
        }
      ]
    }
  ],
  "fragments": [],
  "semantics": [],
  "associations": [
    [
      [
        "a",
        0
      ],
      [
        "food",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "a",
        0
      ],
      [
        "food",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "a",
        0
      ],
      [
        "is",
        0
      ],
      [
        "meal",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "a",
        0
      ],
      [
        "is",
        0
      ],
      [
        "meal",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "a",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "a",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "asiago",
        0
      ],
      [
        "chicken",
        0
      ],
      [
        "club",
        0
      ],
      [
        "cod",
        0
      ],
      [
        "grill",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "number",
        0
      ],
      [
        "premium",
        0
      ],
      [
        "ranch",
        0
      ],
      [
        "sandwich",
        0
      ],
      [
        "ultimate",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "asiago",
        0
      ],
      [
        "chicken",
        0
      ],
      [
        "club",
        0
      ],
      [
        "cod",
        0
      ],
      [
        "grill",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "number",
        0
      ],
      [
        "premium",
        0
      ],
      [
        "ranch",
        0
      ],
      [
        "sandwich",
        0
      ],
      [
        "ultimate",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "asiago",
        0
      ],
      [
        "chicken",
        0
      ],
      [
        "club",
        0
      ],
      [
        "cod",
        0
      ],
      [
        "grill",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "number",
        0
      ],
      [
        "premium",
        0
      ],
      [
        "ranch",
        0
      ],
      [
        "sandwich",
        0
      ],
      [
        "ultimate",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "asiago",
        0
      ],
      [
        "chicken",
        0
      ],
      [
        "club",
        0
      ],
      [
        "cod",
        0
      ],
      [
        "grill",
        0
      ],
      [
        "premium",
        0
      ],
      [
        "ranch",
        0
      ],
      [
        "ultimate",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "bacon",
        0
      ],
      [
        "baconater",
        0
      ],
      [
        "cod",
        0
      ],
      [
        "deluxe",
        0
      ],
      [
        "double",
        0
      ],
      [
        "homestyle",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "meal",
        0
      ],
      [
        "premium",
        0
      ],
      [
        "single",
        0
      ],
      [
        "spicy",
        0
      ],
      [
        "triple",
        0
      ]
    ],
    [
      [
        "bacon",
        0
      ],
      [
        "baconater",
        0
      ],
      [
        "cod",
        0
      ],
      [
        "deluxe",
        0
      ],
      [
        "double",
        0
      ],
      [
        "homestyle",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "meal",
        0
      ],
      [
        "premium",
        0
      ],
      [
        "spicy",
        0
      ],
      [
        "triple",
        0
      ]
    ],
    [
      [
        "bacon",
        0
      ],
      [
        "baconater",
        0
      ],
      [
        "cod",
        0
      ],
      [
        "deluxe",
        0
      ],
      [
        "double",
        0
      ],
      [
        "homestyle",
        0
      ],
      [
        "premium",
        0
      ],
      [
        "single",
        0
      ],
      [
        "spicy",
        0
      ],
      [
        "triple",
        0
      ]
    ],
    [
      [
        "bacon",
        0
      ],
      [
        "baconater",
        0
      ],
      [
        "cod",
        0
      ],
      [
        "deluxe",
        0
      ],
      [
        "homestyle",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "meal",
        0
      ],
      [
        "premium",
        0
      ],
      [
        "spicy",
        0
      ]
    ],
    [
      [
        "bacon",
        0
      ],
      [
        "baconater",
        0
      ],
      [
        "cod",
        0
      ],
      [
        "deluxe",
        0
      ],
      [
        "homestyle",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "meal",
        0
      ],
      [
        "premium",
        0
      ],
      [
        "spicy",
        0
      ],
      [
        "triple",
        0
      ]
    ],
    [
      [
        "bacon",
        0
      ],
      [
        "cod",
        0
      ],
      [
        "deluxe",
        0
      ],
      [
        "homestyle",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "meal",
        0
      ],
      [
        "premium",
        0
      ],
      [
        "spicy",
        0
      ]
    ],
    [
      [
        "bacon",
        0
      ],
      [
        "deluxe",
        0
      ],
      [
        "hamburger",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "bacon",
        0
      ],
      [
        "deluxe",
        0
      ],
      [
        "hamburger",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "bacon",
        0
      ],
      [
        "deluxe",
        0
      ],
      [
        "hamburger",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "bacon",
        0
      ],
      [
        "deluxe",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "chicken",
        0
      ],
      [
        "cod",
        0
      ],
      [
        "grill",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "number",
        0
      ],
      [
        "premium",
        0
      ],
      [
        "sandwich",
        0
      ],
      [
        "ultimate",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "chicken",
        0
      ],
      [
        "cod",
        0
      ],
      [
        "grill",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "premium",
        0
      ],
      [
        "sandwich",
        0
      ],
      [
        "ultimate",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "chicken",
        0
      ],
      [
        "modifies",
        0
      ],
      [
        "sandwich",
        0
      ]
    ],
    [
      [
        "chicken",
        0
      ],
      [
        "modifies",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "chicken",
        0
      ],
      [
        "modifies",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "chicken",
        0
      ],
      [
        "modifies",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "chicken",
        0
      ],
      [
        "modifies",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "chicken",
        0
      ],
      [
        "modifies",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "chicken",
        0
      ],
      [
        "modifies",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "cod",
        0
      ],
      [
        "homestyle",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "meal",
        0
      ],
      [
        "premium",
        0
      ]
    ],
    [
      [
        "cod",
        0
      ],
      [
        "homestyle",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "meal",
        0
      ],
      [
        "premium",
        0
      ],
      [
        "spicy",
        0
      ]
    ],
    [
      [
        "cod",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "meal",
        0
      ],
      [
        "premium",
        0
      ]
    ],
    [
      [
        "cod",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "premium",
        0
      ],
      [
        "sandwich",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "countable",
        0
      ],
      [
        "food",
        0
      ],
      [
        "is",
        0
      ]
    ],
    [
      [
        "countable",
        0
      ],
      [
        "is",
        0
      ]
    ],
    [
      [
        "hamburger",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "hamburger",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        1
      ]
    ],
    [
      [
        "hamburger",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "meal",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "sandwich",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "meal",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "sandwich",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "sandwich",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "sandwich",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "modifies",
        0
      ],
      [
        "sandwich",
        0
      ]
    ],
    [
      [
        "modifies",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "modifies",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "modifies",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "modifies",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "modifies",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "modifies",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "modifies",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "modifies",
        0
      ],
      [
        "unknown",
        1
      ]
    ]
  ]
}